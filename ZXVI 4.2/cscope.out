cscope 15 D:\app\MicroOS_ARM\HBTK-DQext\Loop_2.0 -q 0000003994 0000265706
	@OS_CPU/os_cpu.h

23 #i‚de‡ 
OS_CPU_H


24 
	#OS_CPU_H


	)

27 #ifde‡ 
OS_CPU_GLOBALS


28 
	#OS_CPU_EXT


	)

30 
	#OS_CPU_EXT
 

	)

33 
	~"myty≥.h
"

35 
OS_CPU_EXT
 
uöt8
 
OSI¡Ne°ög
;

36 
OS_CPU_EXT
 
uöt8
 
	gOSRu¬ög
;

37 
OS_CPU_EXT
 
uöt32
 
	gOSTimeTickSize
;

47 
	tBOOLEAN
;

48 
	tINT8U
;

49 sig√d 
	tINT8S
;

50 
	tINT16U
;

51 sig√d 
	tINT16S
;

52 
	tINT32U
;

53 sig√d 
	tINT32S
;

54 
	tFP32
;

55 
	tFP64
;

57 
	tOS_STK
;

58 
	tOS_CPU_SR
;

82 
	#OS_CRITICAL_METHOD
 3u

	)

84 #i‡
OS_CRITICAL_METHOD
 == 3u

85 
	#OS_MALLOC_SR
(Ë
OS_CPU_SR
 
˝u_§


	)

86 
	#OS_ENTER_CRITICAL
(Ë{
˝u_§
 = 
	`OS_CPU_SR_Save
();}

	)

87 
	#OS_EXIT_CRITICAL
(Ë{
	`OS_CPU_SR_Re°‹e
(
˝u_§
);}

	)

91 #i‚de‡
OS_MALLOC_SR


92 
	#OS_MALLOC_SR
(Ë
NULL


	)

101 
	#OS_STK_GROWTH
 1u

	)

103 
	#OS_TASK_SW
(Ë
	`OSI¡CtxSw
()

	)

111 #i‡
OS_CRITICAL_METHOD
 == 3u

112 
	#OS_SREG_VAR
 
OS_CPU_SR
 
˝u_§


	)

113 
OS_CPU_SR
 
OS_CPU_SR_Save
();

114 
OS_CPU_SR_Re°‹e
(
OS_CPU_SR
 
˝u_§
);

117 
OS_CPU_EXT
 
OSI¡CtxSw
();

118 
OS_CPU_EXT
 
OSSèπHighRdy
();

121 
OS_CPU_EXT
 
OS_CPU_SysTickH™dÀr
();

122 
OS_CPU_EXT
 
OS_CPU_SysTickInô
(
INT32U
 
˙ts
);

123 
OS_CPU_EXT
 
OS_CPU_PídSVH™dÀr
();

	@OS_CPU/os_cpu_c.c

40 
	#OS_CPU_GLOBALS


	)

41 
	~<Mi¸oOs.h
>

42 
	~"b•.h
"

50 #i‡
OS_TMR_EN
 > 0u

51 
INT16U
 
	gOSTmrCå
;

60 
	$OS_TaskRëu∫
()

64 
	`OSTimeDly
(
HZ
);

66 
	}
}

75 
OS_STK
 *
OSTaskStkInô
 ((*
èsk
)(), OS_STK *
±os
)

77 
OS_STK
 *
°k
;

79 
°k
 = 
±os
;

82 *(
°k
Ë(
INT32U
)0x01000000uL;

83 *(--
°k
Ë(
INT32U
)
èsk
;

84 *(--
°k
Ë(
INT32U
)
OS_TaskRëu∫
;

85 *(--
°k
Ë(
INT32U
)0x12;

86 *(--
°k
Ë(
INT32U
)0x03;

87 *(--
°k
Ë(
INT32U
)0x02;

88 *(--
°k
Ë(
INT32U
)0x01;

89 *(--
°k
Ë(
INT32U
)0x00;

92 *(--
°k
Ë(
INT32U
)0x07;

93 *(--
°k
Ë(
INT32U
)0x06;

94 *(--
°k
Ë(
INT32U
)0x05;

95 *(--
°k
Ë(
INT32U
)0x04;

97  (
°k
);

98 
	}
}

112 
__AFTER__


113 
SysTick_H™dÀr
 ();

114 
	$SysTick_H™dÀr
 ()

116 
OS_CPU_SR
 
˝u_§
;

118 
OSTimeTickSize
++;

120 
	`OS_ENTER_CRITICAL
();

121 
OSI¡Ne°ög
++;

122 
	`OS_EXIT_CRITICAL
();

124 
	`OSTimeTick
();

126 
	`OSI¡Exô
();

127 
	}
}

141 
	$OS_CPU_SysTickInô
 (
INT32U
 
˙ts
)

143 
	`NVIC_E«bÀIRQ
–
PídSV_IRQn
 );

146 
	`NVIC_SëPri‹ôy
 (
PídSV_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

148 
	`NVIC_E«bÀIRQ
–
SysTick_IRQn
 );

149 
	`NVIC_SëPri‹ôy
(
SysTick_IRQn
, 0x80);

151 
SysTick
->
LOAD
 = 
˙ts
;

152 
SysTick
->
CTRL
 = 0x07;

153 
	}
}

156 
	$OSI¡CtxSw
 ()

158 
SCB
->
ICSR
 = 1ul << 28;

159 
	}
}

162 
OS_CPU_SR
 
	$OS_CPU_SR_Save
()

164 
OS_CPU_SR
 
˝u_§
;

165 
asm
 volatile( "MRS %0, PRIMASK\n\t"

166 "CPSID I\n\t": "Ù"(
˝u_§
) );

167  
˝u_§
;

168 
	}
}

170 
	$OS_CPU_SR_Re°‹e
(
OS_CPU_SR
 
˝u_§
)

172 
asm
 vﬁ©ûe–"MSR PRIMASK, %0" :: "r"(
˝u_§
));

173 
	}
}

	@app/LPC1100PinCfg.h

23 #i‚de‡
__LPC1100PINCFG_H


24 
	#__LPC1100PINCFG_H


	)

33 
	#PIO0_0_RESET
 0x00

	)

34 
	#PIO0_0_GPIO
 0x01

	)

36 
	#FUNC_PIO0_0
 
PIO0_0_RESET


	)

38 
	#PIO0_0_INACTIVE
 0x00

	)

39 
	#PIO0_0_PULLDOWN
 0x01

	)

40 
	#PIO0_0_PULLUP
 0x10

	)

41 
	#PIO0_0_REPEATER
 0x11

	)

43 
	#PIO0_0_MODE
 
PIO0_0_PULLUP


	)

45 
	#PIO0_0_HYSDISABLE
 0

	)

46 
	#PIO0_0_HYSENABLE
 1

	)

48 
	#PIO0_0_HYS
 
PIO0_0_HYSDISABLE


	)

50 
	#PIO0_0_CON
 (
FUNC_PIO0_0
 | (
PIO0_0_MODE
 << 3Ë| (
PIO0_0_HYS
 << 5))

	)

54 
	#PIO0_1_GPIO
 0x00

	)

55 
	#PIO0_1_CLKOUT
 0x01

	)

56 
	#PIO0_1_CT32B0_MAT2
 0x02

	)

58 
	#FUNC_PIO0_1
 
PIO0_1_GPIO


	)

60 
	#PIO0_1_INACTIVE
 0x00

	)

61 
	#PIO0_1_PULLDOWN
 0x01

	)

62 
	#PIO0_1_PULLUP
 0x10

	)

63 
	#PIO0_1_REPEATER
 0x11

	)

65 
	#PIO0_1_MODE
 
PIO0_1_PULLUP


	)

67 
	#PIO0_1_HYSDISABLE
 0

	)

68 
	#PIO0_1_HYSENABLE
 1

	)

70 
	#PIO0_1_HYS
 
PIO0_1_HYSDISABLE


	)

72 
	#PIO0_1_CON
 (
FUNC_PIO0_1
 | (
PIO0_1_MODE
 << 3Ë| (
PIO0_1_HYS
 << 5))

	)

76 
	#PIO0_2_GPIO
 0x00

	)

77 
	#PIO0_2_SSEL0
 0x01

	)

78 
	#PIO0_2_CT16B0_CAP0
 0x02

	)

80 
	#FUNC_PIO0_2
 
PIO0_2_GPIO


	)

82 
	#PIO0_2_INACTIVE
 0x00

	)

83 
	#PIO0_2_PULLDOWN
 0x01

	)

84 
	#PIO0_2_PULLUP
 0x10

	)

85 
	#PIO0_2_REPEATER
 0x11

	)

87 
	#PIO0_2_MODE
 
PIO0_2_PULLUP


	)

89 
	#PIO0_2_HYSDISABLE
 0

	)

90 
	#PIO0_2_HYSENABLE
 1

	)

92 
	#PIO0_2_HYS
 
PIO0_2_HYSDISABLE


	)

94 
	#PIO0_2_CON
 (
FUNC_PIO0_2
 | (
PIO0_2_MODE
 << 3Ë| (
PIO0_2_HYS
 << 5))

	)

98 
	#PIO0_3_GPIO
 0x00

	)

100 
	#FUNC_PIO0_3
 
PIO0_3_GPIO


	)

102 
	#PIO0_3_INACTIVE
 0x00

	)

103 
	#PIO0_3_PULLDOWN
 0x01

	)

104 
	#PIO0_3_PULLUP
 0x10

	)

105 
	#PIO0_3_REPEATER
 0x11

	)

107 
	#PIO0_3_MODE
 
PIO0_3_PULLUP


	)

109 
	#PIO0_3_HYSDISABLE
 0

	)

110 
	#PIO0_3_HYSENABLE
 1

	)

112 
	#PIO0_3_HYS
 
PIO0_3_HYSDISABLE


	)

114 
	#PIO0_3_CON
 (
FUNC_PIO0_3
 | (
PIO0_3_MODE
 << 3Ë| (
PIO0_3_HYS
 << 5))

	)

118 
	#PIO0_4_GPIO
 0x00

	)

119 
	#PIO0_4_SCL
 0x01

	)

121 
	#FUNC_PIO0_4
 
PIO0_4_SCL


	)

123 
	#PIO0_4_STD_I2C
 0x00

	)

124 
	#PIO0_4_STD_IO
 0x01

	)

125 
	#PIO0_4_FM_I2C
 0x10

	)

127 
	#PIO0_4_MODE
 
PIO0_4_STD_I2C


	)

129 
	#PIO0_4_CON
 (
FUNC_PIO0_4
 | (
PIO0_4_MODE
 << 8))

	)

133 
	#PIO0_5_GPIO
 0x00

	)

134 
	#PIO0_5_SDA
 0x01

	)

136 
	#FUNC_PIO0_5
 
PIO0_5_SDA


	)

138 
	#PIO0_5_STD_I2C
 0x00

	)

139 
	#PIO0_5_STD_IO
 0x01

	)

140 
	#PIO0_5_FM_I2C
 0x10

	)

142 
	#PIO0_5_MODE
 
PIO0_5_STD_I2C


	)

144 
	#PIO0_5_CON
 (
FUNC_PIO0_5
 | (
PIO0_5_MODE
 << 8))

	)

148 
	#PIO0_6_GPIO
 0x00

	)

149 
	#PIO0_6_SCK0
 0x02

	)

151 
	#FUNC_PIO0_6
 
PIO0_6_GPIO


	)

153 
	#PIO0_6_INACTIVE
 0x00

	)

154 
	#PIO0_6_PULLDOWN
 0x01

	)

155 
	#PIO0_6_PULLUP
 0x10

	)

156 
	#PIO0_6_REPEATER
 0x11

	)

158 
	#PIO0_6_MODE
 
PIO0_6_PULLUP


	)

160 
	#PIO0_6_HYSDISABLE
 0

	)

161 
	#PIO0_6_HYSENABLE
 1

	)

163 
	#PIO0_6_HYS
 
PIO0_6_HYSDISABLE


	)

165 
	#PIO0_6_CON
 (
FUNC_PIO0_6
 | (
PIO0_6_MODE
 << 3Ë| (
PIO0_6_HYS
 << 5))

	)

169 
	#PIO0_7_GPIO
 0x00

	)

170 
	#PIO0_7_CTS
 0x01

	)

172 
	#FUNC_PIO0_7
 
PIO0_7_GPIO


	)

174 
	#PIO0_7_INACTIVE
 0x00

	)

175 
	#PIO0_7_PULLDOWN
 0x01

	)

176 
	#PIO0_7_PULLUP
 0x10

	)

177 
	#PIO0_7_REPEATER
 0x11

	)

179 
	#PIO0_7_MODE
 
PIO0_7_PULLUP


	)

181 
	#PIO0_7_HYSDISABLE
 0

	)

182 
	#PIO0_7_HYSENABLE
 1

	)

184 
	#PIO0_7_HYS
 
PIO0_7_HYSDISABLE


	)

186 
	#PIO0_7_CON
 (
FUNC_PIO0_7
 | (
PIO0_7_MODE
 << 3Ë| (
PIO0_7_HYS
 << 5))

	)

190 
	#PIO0_8_GPIO
 0x00

	)

191 
	#PIO0_8_MISO0
 0x01

	)

192 
	#PIO0_8_CT16B0_MAT0
 0x02

	)

194 
	#FUNC_PIO0_8
 
PIO0_8_MISO0


	)

196 
	#PIO0_8_INACTIVE
 0x00

	)

197 
	#PIO0_8_PULLDOWN
 0x01

	)

198 
	#PIO0_8_PULLUP
 0x10

	)

199 
	#PIO0_8_REPEATER
 0x11

	)

201 
	#PIO0_8_MODE
 
PIO0_8_PULLUP


	)

203 
	#PIO0_8_HYSDISABLE
 0

	)

204 
	#PIO0_8_HYSENABLE
 1

	)

206 
	#PIO0_8_HYS
 
PIO0_8_HYSDISABLE


	)

208 
	#PIO0_8_CON
 (
FUNC_PIO0_8
 | (
PIO0_8_MODE
 << 3Ë| (
PIO0_8_HYS
 << 5))

	)

212 
	#PIO0_9_GPIO
 0x00

	)

213 
	#PIO0_9_MOSI0
 0x01

	)

214 
	#PIO0_9_CT16B0_MAT1
 0x02

	)

216 
	#FUNC_PIO0_9
 
PIO0_9_MOSI0


	)

218 
	#PIO0_9_INACTIVE
 0x00

	)

219 
	#PIO0_9_PULLDOWN
 0x01

	)

220 
	#PIO0_9_PULLUP
 0x10

	)

221 
	#PIO0_9_REPEATER
 0x11

	)

223 
	#PIO0_9_MODE
 
PIO0_9_PULLUP


	)

225 
	#PIO0_9_HYSDISABLE
 0

	)

226 
	#PIO0_9_HYSENABLE
 1

	)

228 
	#PIO0_9_HYS
 
PIO0_9_HYSDISABLE


	)

230 
	#PIO0_9_CON
 (
FUNC_PIO0_9
 | (
PIO0_9_MODE
 << 3Ë| (
PIO0_9_HYS
 << 5))

	)

234 
	#PIO0_10_SWCLK
 0x00

	)

235 
	#PIO0_10_GPIO
 0x01

	)

236 
	#PIO0_10_SCK0
 0x02

	)

237 
	#PIO0_10_CT16B0_MAT2
 0x03

	)

239 
	#FUNC_PIO0_10
 
PIO0_10_SCK0


	)

241 
	#PIO0_10_INACTIVE
 0x00

	)

242 
	#PIO0_10_PULLDOWN
 0x01

	)

243 
	#PIO0_10_PULLUP
 0x10

	)

244 
	#PIO0_10_REPEATER
 0x11

	)

246 
	#PIO0_10_MODE
 
PIO0_10_PULLUP


	)

248 
	#PIO0_10_HYSDISABLE
 0

	)

249 
	#PIO0_10_HYSENABLE
 1

	)

251 
	#PIO0_10_HYS
 
PIO0_10_HYSDISABLE


	)

253 
	#PIO0_10_CON
 (
FUNC_PIO0_10
 | (
PIO0_10_MODE
 << 3Ë| (
PIO0_10_HYS
 << 5))

	)

257 
	#PIO0_11_TDI
 0x00

	)

258 
	#PIO0_11_GPIO
 0x01

	)

259 
	#PIO0_11_AD0
 0x02

	)

260 
	#PIO0_11_CT32B0_MAT3
 0x03

	)

262 
	#FUNC_PIO0_11
 
PIO0_11_AD0


	)

264 
	#PIO0_11_INACTIVE
 0x00

	)

265 
	#PIO0_11_PULLDOWN
 0x01

	)

266 
	#PIO0_11_PULLUP
 0x10

	)

267 
	#PIO0_11_REPEATER
 0x11

	)

269 
	#PIO0_11_MODE
 
PIO0_11_INACTIVE


	)

271 
	#PIO0_11_HYSDISABLE
 0

	)

272 
	#PIO0_11_HYSENABLE
 1

	)

274 
	#PIO0_11_HYS
 
PIO0_11_HYSDISABLE


	)

276 
	#PIO0_11_ANALOG
 0

	)

277 
	#PIO0_11_DIGITAL
 1

	)

279 
	#PIO0_11_ADMODE
 
PIO0_11_DIGITAL


	)

281 
	#PIO0_11_CON
 (
FUNC_PIO0_11
 | (
PIO0_11_MODE
 << 3) | \

282 (
PIO0_11_HYS
 << 5Ë| (
PIO0_11_ADMODE
 << 7))

	)

286 
	#PIO1_0_TMS
 0x00

	)

287 
	#PIO1_0_GPIO
 0x01

	)

288 
	#PIO1_0_AD1
 0x02

	)

289 
	#PIO1_0_CT32B1_CAP0
 0x03

	)

291 
	#FUNC_PIO1_0
 
PIO1_0_GPIO


	)

293 
	#PIO1_0_INACTIVE
 0x00

	)

294 
	#PIO1_0_PULLDOWN
 0x01

	)

295 
	#PIO1_0_PULLUP
 0x10

	)

296 
	#PIO1_0_REPEATER
 0x11

	)

298 
	#PIO1_0_MODE
 
PIO1_0_PULLUP


	)

300 
	#PIO1_0_HYSDISABLE
 0

	)

301 
	#PIO1_0_HYSENABLE
 1

	)

303 
	#PIO1_0_HYS
 
PIO1_0_HYSDISABLE


	)

305 
	#PIO1_0_ANALOG
 0

	)

306 
	#PIO1_0_DIGITAL
 1

	)

308 
	#PIO1_0_ADMODE
 
PIO1_0_DIGITAL


	)

310 
	#PIO1_0_CON
 (
FUNC_PIO1_0
 | (
PIO1_0_MODE
 << 3) | \

311 (
PIO1_0_HYS
 << 5Ë| (
PIO1_0_ADMODE
 << 7))

	)

315 
	#PIO1_1_TDO
 0x00

	)

316 
	#PIO1_1_GPIO
 0x01

	)

317 
	#PIO1_1_AD2
 0x02

	)

318 
	#PIO1_1_CT32B1_MAT0
 0x03

	)

320 
	#FUNC_PIO1_1
 
PIO1_1_GPIO


	)

322 
	#PIO1_1_INACTIVE
 0x00

	)

323 
	#PIO1_1_PULLDOWN
 0x01

	)

324 
	#PIO1_1_PULLUP
 0x10

	)

325 
	#PIO1_1_REPEATER
 0x11

	)

327 
	#PIO1_1_MODE
 
PIO1_1_PULLUP


	)

329 
	#PIO1_1_HYSDISABLE
 0

	)

330 
	#PIO1_1_HYSENABLE
 1

	)

332 
	#PIO1_1_HYS
 
PIO1_1_HYSDISABLE


	)

334 
	#PIO1_1_ANALOG
 0

	)

335 
	#PIO1_1_DIGITAL
 1

	)

337 
	#PIO1_1_ADMODE
 
PIO1_1_DIGITAL


	)

339 
	#PIO1_1_CON
 (
FUNC_PIO1_1
 | (
PIO1_1_MODE
 << 3) | \

340 (
PIO1_1_HYS
 << 5Ë| (
PIO1_1_ADMODE
 << 7))

	)

344 
	#PIO1_2_TRST
 0x00

	)

345 
	#PIO1_2_GPIO
 0x01

	)

346 
	#PIO1_2_AD3
 0x02

	)

347 
	#PIO1_2_CT32B1_MAT1
 0x03

	)

349 
	#FUNC_PIO1_2
 
PIO1_2_GPIO


	)

351 
	#PIO1_2_INACTIVE
 0x00

	)

352 
	#PIO1_2_PULLDOWN
 0x01

	)

353 
	#PIO1_2_PULLUP
 0x10

	)

354 
	#PIO1_2_REPEATER
 0x11

	)

356 
	#PIO1_2_MODE
 
PIO1_2_PULLUP


	)

358 
	#PIO1_2_HYSDISABLE
 0

	)

359 
	#PIO1_2_HYSENABLE
 1

	)

361 
	#PIO1_2_HYS
 
PIO1_2_HYSDISABLE


	)

363 
	#PIO1_2_ANALOG
 0

	)

364 
	#PIO1_2_DIGITAL
 1

	)

366 
	#PIO1_2_ADMODE
 
PIO1_2_DIGITAL


	)

368 
	#PIO1_2_CON
 (
FUNC_PIO1_2
 | (
PIO1_2_MODE
 << 3) | \

369 (
PIO1_2_HYS
 << 5Ë| (
PIO1_2_ADMODE
 << 7))

	)

373 
	#PIO1_3_SWDIO
 0x00

	)

374 
	#PIO1_3_GPIO
 0x01

	)

375 
	#PIO1_3_AD4
 0x02

	)

376 
	#PIO1_3_CT32B1_MAT2
 0x03

	)

378 
	#FUNC_PIO1_3
 
PIO1_3_GPIO


	)

380 
	#PIO1_3_INACTIVE
 0x00

	)

381 
	#PIO1_3_PULLDOWN
 0x01

	)

382 
	#PIO1_3_PULLUP
 0x10

	)

383 
	#PIO1_3_REPEATER
 0x11

	)

385 
	#PIO1_3_MODE
 
PIO1_3_PULLUP


	)

387 
	#PIO1_3_HYSDISABLE
 0

	)

388 
	#PIO1_3_HYSENABLE
 1

	)

390 
	#PIO1_3_HYS
 
PIO1_3_HYSDISABLE


	)

392 
	#PIO1_3_ANALOG
 0

	)

393 
	#PIO1_3_DIGITAL
 1

	)

395 
	#PIO1_3_ADMODE
 
PIO1_3_DIGITAL


	)

397 
	#PIO1_3_CON
 (
FUNC_PIO1_3
 | (
PIO1_3_MODE
 << 3) | \

398 (
PIO1_3_HYS
 << 5Ë| (
PIO1_3_ADMODE
 << 7))

	)

402 
	#PIO1_4_GPIO
 0x00

	)

403 
	#PIO1_4_AD5
 0x01

	)

404 
	#PIO1_4_CT32B1_MAT3
 0x02

	)

406 
	#FUNC_PIO1_4
 
PIO1_4_GPIO


	)

408 
	#PIO1_4_INACTIVE
 0x00

	)

409 
	#PIO1_4_PULLDOWN
 0x01

	)

410 
	#PIO1_4_PULLUP
 0x10

	)

411 
	#PIO1_4_REPEATER
 0x11

	)

413 
	#PIO1_4_MODE
 
PIO1_4_PULLUP


	)

415 
	#PIO1_4_HYSDISABLE
 0

	)

416 
	#PIO1_4_HYSENABLE
 1

	)

418 
	#PIO1_4_HYS
 
PIO1_4_HYSDISABLE


	)

420 
	#PIO1_4_ANALOG
 0

	)

421 
	#PIO1_4_DIGITAL
 1

	)

423 
	#PIO1_4_ADMODE
 
PIO1_4_DIGITAL


	)

425 
	#PIO1_4_CON
 (
FUNC_PIO1_4
 | (
PIO1_4_MODE
 << 3) | \

426 (
PIO1_4_HYS
 << 5Ë| (
PIO1_4_ADMODE
 << 7))

	)

430 
	#PIO1_5_GPIO
 0x00

	)

431 
	#PIO1_5_RTS
 0x01

	)

432 
	#PIO1_5_CT32B0_CAP0
 0x02

	)

434 
	#FUNC_PIO1_5
 
PIO1_5_GPIO


	)

436 
	#PIO1_5_INACTIVE
 0x00

	)

437 
	#PIO1_5_PULLDOWN
 0x01

	)

438 
	#PIO1_5_PULLUP
 0x10

	)

439 
	#PIO1_5_REPEATER
 0x11

	)

441 
	#PIO1_5_MODE
 
PIO1_5_PULLUP


	)

443 
	#PIO1_5_HYSDISABLE
 0

	)

444 
	#PIO1_5_HYSENABLE
 1

	)

446 
	#PIO1_5_HYS
 
PIO1_5_HYSDISABLE


	)

448 
	#PIO1_5_CON
 (
FUNC_PIO1_5
 | (
PIO1_5_MODE
 << 3Ë| (
PIO1_5_HYS
 << 5))

	)

452 
	#PIO1_6_GPIO
 0x00

	)

453 
	#PIO1_6_UART_RXD
 0x01

	)

454 
	#PIO1_6_CT32B0_MAT0
 0x02

	)

456 
	#FUNC_PIO1_6
 
PIO1_6_UART_RXD


	)

458 
	#PIO1_6_INACTIVE
 0x00

	)

459 
	#PIO1_6_PULLDOWN
 0x01

	)

460 
	#PIO1_6_PULLUP
 0x10

	)

461 
	#PIO1_6_REPEATER
 0x11

	)

463 
	#PIO1_6_MODE
 
PIO1_6_PULLUP


	)

465 
	#PIO1_6_HYSDISABLE
 0

	)

466 
	#PIO1_6_HYSENABLE
 1

	)

468 
	#PIO1_6_HYS
 
PIO1_6_HYSDISABLE


	)

470 
	#PIO1_6_CON
 (
FUNC_PIO1_6
 | (
PIO1_6_MODE
 << 3Ë| (
PIO1_6_HYS
 << 5))

	)

474 
	#PIO1_7_GPIO
 0x00

	)

475 
	#PIO1_7_UART_TXD
 0x01

	)

476 
	#PIO1_7_CT32B0_MAT1
 0x02

	)

478 
	#FUNC_PIO1_7
 
PIO1_7_UART_TXD


	)

480 
	#PIO1_7_INACTIVE
 0x00

	)

481 
	#PIO1_7_PULLDOWN
 0x01

	)

482 
	#PIO1_7_PULLUP
 0x10

	)

483 
	#PIO1_7_REPEATER
 0x11

	)

485 
	#PIO1_7_MODE
 
PIO1_7_PULLUP


	)

487 
	#PIO1_7_HYSDISABLE
 0

	)

488 
	#PIO1_7_HYSENABLE
 1

	)

490 
	#PIO1_7_HYS
 
PIO1_7_HYSDISABLE


	)

492 
	#PIO1_7_CON
 (
FUNC_PIO1_7
 | (
PIO1_7_MODE
 << 3Ë| (
PIO1_7_HYS
 << 5))

	)

496 
	#PIO1_8_GPIO
 0x00

	)

497 
	#PIO1_8_CT16B1_CAP0
 0x01

	)

499 
	#FUNC_PIO1_8
 
PIO1_8_GPIO


	)

501 
	#PIO1_8_INACTIVE
 0x00

	)

502 
	#PIO1_8_PULLDOWN
 0x01

	)

503 
	#PIO1_8_PULLUP
 0x10

	)

504 
	#PIO1_8_REPEATER
 0x11

	)

506 
	#PIO1_8_MODE
 
PIO1_8_PULLUP


	)

508 
	#PIO1_8_HYSDISABLE
 0

	)

509 
	#PIO1_8_HYSENABLE
 1

	)

511 
	#PIO1_8_HYS
 
PIO1_8_HYSDISABLE


	)

513 
	#PIO1_8_CON
 (
FUNC_PIO1_8
 | (
PIO1_8_MODE
 << 3Ë| (
PIO1_8_HYS
 << 5))

	)

517 
	#PIO1_9_GPIO
 0x00

	)

518 
	#PIO1_9_CT16B1_MAT0
 0x01

	)

520 
	#FUNC_PIO1_9
 
PIO1_9_GPIO


	)

522 
	#PIO1_9_INACTIVE
 0x00

	)

523 
	#PIO1_9_PULLDOWN
 0x01

	)

524 
	#PIO1_9_PULLUP
 0x10

	)

525 
	#PIO1_9_REPEATER
 0x11

	)

527 
	#PIO1_9_MODE
 
PIO1_9_PULLUP


	)

529 
	#PIO1_9_HYSDISABLE
 0

	)

530 
	#PIO1_9_HYSENABLE
 1

	)

532 
	#PIO1_9_HYS
 
PIO1_9_HYSDISABLE


	)

534 
	#PIO1_9_CON
 (
FUNC_PIO1_9
 | (
PIO1_9_MODE
 << 3Ë| (
PIO1_9_HYS
 << 5))

	)

538 
	#PIO1_10_GPIO
 0x00

	)

539 
	#PIO1_10_AD6
 0x01

	)

540 
	#PIO1_10_CT16B1_MAT1
 0x02

	)

542 
	#FUNC_PIO1_10
 
PIO1_10_GPIO


	)

544 
	#PIO1_10_INACTIVE
 0x00

	)

545 
	#PIO1_10_PULLDOWN
 0x01

	)

546 
	#PIO1_10_PULLUP
 0x10

	)

547 
	#PIO1_10_REPEATER
 0x11

	)

549 
	#PIO1_10_MODE
 
PIO1_10_PULLUP


	)

551 
	#PIO1_10_HYSDISABLE
 0

	)

552 
	#PIO1_10_HYSENABLE
 1

	)

554 
	#PIO1_10_HYS
 
PIO1_10_HYSDISABLE


	)

556 
	#PIO1_10_ANALOG
 0

	)

557 
	#PIO1_10_DIGITAL
 1

	)

559 
	#PIO1_10_ADMODE
 
PIO1_10_DIGITAL


	)

561 
	#PIO1_10_CON
 (
FUNC_PIO1_10
 | (
PIO1_10_MODE
 << 3) | \

562 (
PIO1_10_HYS
 << 5Ë| (
PIO1_10_ADMODE
 << 7))

	)

566 
	#PIO1_11_GPIO
 0x00

	)

567 
	#PIO1_11_AD7
 0x01

	)

569 
	#FUNC_PIO1_11
 
PIO1_11_GPIO


	)

571 
	#PIO1_11_INACTIVE
 0x00

	)

572 
	#PIO1_11_PULLDOWN
 0x01

	)

573 
	#PIO1_11_PULLUP
 0x10

	)

574 
	#PIO1_11_REPEATER
 0x11

	)

576 
	#PIO1_11_MODE
 
PIO1_0_PULLUP


	)

578 
	#PIO1_11_HYSDISABLE
 0

	)

579 
	#PIO1_11_HYSENABLE
 1

	)

581 
	#PIO1_11_HYS
 
PIO1_11_HYSDISABLE


	)

583 
	#PIO1_11_ANALOG
 0

	)

584 
	#PIO1_11_DIGITAL
 1

	)

586 
	#PIO1_11_ADMODE
 
PIO1_11_DIGITAL


	)

588 
	#PIO1_11_CON
 (
FUNC_PIO1_1
 | (
PIO1_1_MODE
 << 3) | \

589 (
PIO1_1_HYS
 << 5Ë| (
PIO1_11_ADMODE
 << 7))

	)

593 
	#PIO2_0_GPIO
 0x00

	)

594 
	#PIO2_0_DTR
 0x01

	)

595 
	#PIO2_0_SSEL1
 0x02

	)

597 
	#FUNC_PIO2_0
 
PIO2_0_GPIO


	)

599 
	#PIO2_0_INACTIVE
 0x00

	)

600 
	#PIO2_0_PULLDOWN
 0x01

	)

601 
	#PIO2_0_PULLUP
 0x10

	)

602 
	#PIO2_0_REPEATER
 0x11

	)

604 
	#PIO2_0_MODE
 
PIO2_0_PULLUP


	)

606 
	#PIO2_0_HYSDISABLE
 0

	)

607 
	#PIO2_0_HYSENABLE
 1

	)

609 
	#PIO2_0_HYS
 
PIO2_0_HYSDISABLE


	)

611 
	#PIO2_0_CON
 (
FUNC_PIO2_0
 | (
PIO2_0_MODE
 << 3Ë| (
PIO2_0_HYS
 << 5))

	)

616 
	#PIO2_1_GPIO
 0x00

	)

617 
	#PIO2_1_DSR
 0x01

	)

618 
	#PIO2_1_SCK1
 0x02

	)

620 
	#FUNC_PIO2_1
 
PIO2_1_GPIO


	)

622 
	#PIO2_1_INACTIVE
 0x00

	)

623 
	#PIO2_1_PULLDOWN
 0x01

	)

624 
	#PIO2_1_PULLUP
 0x10

	)

625 
	#PIO2_1_REPEATER
 0x11

	)

627 
	#PIO2_1_MODE
 
PIO2_1_PULLUP


	)

629 
	#PIO2_1_HYSDISABLE
 0

	)

630 
	#PIO2_1_HYSENABLE
 1

	)

632 
	#PIO2_1_HYS
 
PIO2_1_HYSDISABLE


	)

634 
	#PIO2_1_CON
 (
FUNC_PIO2_1
 | (
PIO2_1_MODE
 << 3Ë| (
PIO2_1_HYS
 << 5))

	)

639 
	#PIO2_2_GPIO
 0x00

	)

640 
	#PIO2_2_DCD
 0x01

	)

641 
	#PIO2_2_MISO1
 0x02

	)

643 
	#FUNC_PIO2_2
 
PIO2_2_GPIO


	)

645 
	#PIO2_2_INACTIVE
 0x00

	)

646 
	#PIO2_2_PULLDOWN
 0x01

	)

647 
	#PIO2_2_PULLUP
 0x10

	)

648 
	#PIO2_2_REPEATER
 0x11

	)

650 
	#PIO2_2_MODE
 
PIO2_2_PULLUP


	)

652 
	#PIO2_2_HYSDISABLE
 0

	)

653 
	#PIO2_2_HYSENABLE
 1

	)

655 
	#PIO2_2_HYS
 
PIO2_2_HYSDISABLE


	)

657 
	#PIO2_2_CON
 (
FUNC_PIO2_2
 | (
PIO2_2_MODE
 << 3Ë| (
PIO2_2_HYS
 << 5))

	)

662 
	#PIO2_3_GPIO
 0x00

	)

663 
	#PIO2_3_RI
 0x01

	)

664 
	#PIO2_3_MOSI1
 0x02

	)

666 
	#FUNC_PIO2_3
 
PIO2_3_GPIO


	)

668 
	#PIO2_3_INACTIVE
 0x00

	)

669 
	#PIO2_3_PULLDOWN
 0x01

	)

670 
	#PIO2_3_PULLUP
 0x10

	)

671 
	#PIO2_3_REPEATER
 0x11

	)

673 
	#PIO2_3_MODE
 
PIO2_3_PULLUP


	)

675 
	#PIO2_3_HYSDISABLE
 0

	)

676 
	#PIO2_3_HYSENABLE
 1

	)

678 
	#PIO2_3_HYS
 
PIO2_3_HYSDISABLE


	)

680 
	#PIO2_3_CON
 (
FUNC_PIO2_3
 | (
PIO2_3_MODE
 << 3Ë| (
PIO2_3_HYS
 << 5))

	)

685 
	#PIO2_4_GPIO
 0x00

	)

687 
	#FUNC_PIO2_4
 
PIO2_4_GPIO


	)

689 
	#PIO2_4_INACTIVE
 0x00

	)

690 
	#PIO2_4_PULLDOWN
 0x01

	)

691 
	#PIO2_4_PULLUP
 0x10

	)

692 
	#PIO2_4_REPEATER
 0x11

	)

694 
	#PIO2_4_MODE
 
PIO2_4_PULLUP


	)

696 
	#PIO2_4_HYSDISABLE
 0

	)

697 
	#PIO2_4_HYSENABLE
 1

	)

699 
	#PIO2_4_HYS
 
PIO2_4_HYSDISABLE


	)

701 
	#PIO2_4_CON
 (
FUNC_PIO2_4
 | (
PIO2_4_MODE
 << 3Ë| (
PIO2_4_HYS
 << 5))

	)

706 
	#PIO2_5_GPIO
 0x00

	)

708 
	#FUNC_PIO2_5
 
PIO2_5_GPIO


	)

710 
	#PIO2_5_INACTIVE
 0x00

	)

711 
	#PIO2_5_PULLDOWN
 0x01

	)

712 
	#PIO2_5_PULLUP
 0x10

	)

713 
	#PIO2_5_REPEATER
 0x11

	)

715 
	#PIO2_5_MODE
 
PIO2_5_PULLUP


	)

717 
	#PIO2_5_HYSDISABLE
 0

	)

718 
	#PIO2_5_HYSENABLE
 1

	)

720 
	#PIO2_5_HYS
 
PIO2_5_HYSDISABLE


	)

722 
	#PIO2_5_CON
 (
FUNC_PIO2_5
 | (
PIO2_5_MODE
 << 3Ë| (
PIO2_5_HYS
 << 5))

	)

727 
	#PIO2_6_GPIO
 0x00

	)

729 
	#FUNC_PIO2_6
 
PIO2_6_GPIO


	)

731 
	#PIO2_6_INACTIVE
 0x00

	)

732 
	#PIO2_6_PULLDOWN
 0x01

	)

733 
	#PIO2_6_PULLUP
 0x10

	)

734 
	#PIO2_6_REPEATER
 0x11

	)

736 
	#PIO2_6_MODE
 
PIO2_6_PULLUP


	)

738 
	#PIO2_6_HYSDISABLE
 0

	)

739 
	#PIO2_6_HYSENABLE
 1

	)

741 
	#PIO2_6_HYS
 
PIO2_6_HYSDISABLE


	)

743 
	#PIO2_6_CON
 (
FUNC_PIO2_6
 | (
PIO2_6_MODE
 << 3Ë| (
PIO2_6_HYS
 << 5))

	)

748 
	#PIO2_7_GPIO
 0x00

	)

750 
	#FUNC_PIO2_7
 
PIO2_7_GPIO


	)

752 
	#PIO2_7_INACTIVE
 0x00

	)

753 
	#PIO2_7_PULLDOWN
 0x01

	)

754 
	#PIO2_7_PULLUP
 0x10

	)

755 
	#PIO2_7_REPEATER
 0x11

	)

757 
	#PIO2_7_MODE
 
PIO2_7_PULLUP


	)

759 
	#PIO2_7_HYSDISABLE
 0

	)

760 
	#PIO2_7_HYSENABLE
 1

	)

762 
	#PIO2_7_HYS
 
PIO2_7_HYSDISABLE


	)

764 
	#PIO2_7_CON
 (
FUNC_PIO2_7
 | (
PIO2_7_MODE
 << 3Ë| (
PIO2_7_HYS
 << 5))

	)

769 
	#PIO2_8_GPIO
 0x00

	)

771 
	#FUNC_PIO2_8
 
PIO2_8_GPIO


	)

773 
	#PIO2_8_INACTIVE
 0x00

	)

774 
	#PIO2_8_PULLDOWN
 0x01

	)

775 
	#PIO2_8_PULLUP
 0x10

	)

776 
	#PIO2_8_REPEATER
 0x11

	)

778 
	#PIO2_8_MODE
 
PIO2_8_PULLUP


	)

780 
	#PIO2_8_HYSDISABLE
 0

	)

781 
	#PIO2_8_HYSENABLE
 1

	)

783 
	#PIO2_8_HYS
 
PIO2_8_HYSDISABLE


	)

785 
	#PIO2_8_CON
 (
FUNC_PIO2_8
 | (
PIO2_8_MODE
 << 3Ë| (
PIO2_8_HYS
 << 5))

	)

790 
	#PIO2_9_GPIO
 0x00

	)

792 
	#FUNC_PIO2_9
 
PIO2_9_GPIO


	)

794 
	#PIO2_9_INACTIVE
 0x00

	)

795 
	#PIO2_9_PULLDOWN
 0x01

	)

796 
	#PIO2_9_PULLUP
 0x10

	)

797 
	#PIO2_9_REPEATER
 0x11

	)

799 
	#PIO2_9_MODE
 
PIO2_9_PULLUP


	)

801 
	#PIO2_9_HYSDISABLE
 0

	)

802 
	#PIO2_9_HYSENABLE
 1

	)

804 
	#PIO2_9_HYS
 
PIO2_9_HYSDISABLE


	)

806 
	#PIO2_9_CON
 (
FUNC_PIO2_9
 | (
PIO2_9_MODE
 << 3Ë| (
PIO2_9_HYS
 << 5))

	)

811 
	#PIO2_10_GPIO
 0x00

	)

813 
	#FUNC_PIO2_10
 
PIO2_10_GPIO


	)

815 
	#PIO2_10_INACTIVE
 0x00

	)

816 
	#PIO2_10_PULLDOWN
 0x01

	)

817 
	#PIO2_10_PULLUP
 0x10

	)

818 
	#PIO2_10_REPEATER
 0x11

	)

820 
	#PIO2_10_MODE
 
PIO2_10_PULLUP


	)

822 
	#PIO2_10_HYSDISABLE
 0

	)

823 
	#PIO2_10_HYSENABLE
 1

	)

825 
	#PIO2_10_HYS
 
PIO2_10_HYSDISABLE


	)

827 
	#PIO2_10_CON
 (
FUNC_PIO2_10
 | (
PIO2_10_MODE
 << 3Ë| (
PIO2_10_HYS
 << 5))

	)

832 
	#PIO2_11_GPIO
 0x00

	)

833 
	#PIO2_11_SCK0
 0x01

	)

835 
	#FUNC_PIO2_11
 
PIO2_11_GPIO


	)

837 
	#PIO2_11_INACTIVE
 0x00

	)

838 
	#PIO2_11_PULLDOWN
 0x01

	)

839 
	#PIO2_11_PULLUP
 0x10

	)

840 
	#PIO2_11_REPEATER
 0x11

	)

842 
	#PIO2_11_MODE
 
PIO2_11_PULLUP


	)

844 
	#PIO2_11_HYSDISABLE
 0

	)

845 
	#PIO2_11_HYSENABLE
 1

	)

847 
	#PIO2_11_HYS
 
PIO2_11_HYSDISABLE


	)

849 
	#PIO2_11_CON
 (
FUNC_PIO2_11
 | (
PIO2_11_MODE
 << 3Ë| (
PIO2_11_HYS
 << 5))

	)

854 
	#PIO3_0_GPIO
 0x00

	)

855 
	#PIO3_0_DTR
 0x01

	)

857 
	#FUNC_PIO3_0
 
PIO3_0_GPIO


	)

859 
	#PIO3_0_INACTIVE
 0x00

	)

860 
	#PIO3_0_PULLDOWN
 0x01

	)

861 
	#PIO3_0_PULLUP
 0x10

	)

862 
	#PIO3_0_REPEATER
 0x11

	)

864 
	#PIO3_0_MODE
 
PIO3_0_PULLUP


	)

866 
	#PIO3_0_HYSDISABLE
 0

	)

867 
	#PIO3_0_HYSENABLE
 1

	)

869 
	#PIO3_0_HYS
 
PIO3_0_HYSDISABLE


	)

871 
	#PIO3_0_CON
 (
FUNC_PIO3_0
 | (
PIO3_0_MODE
 << 3Ë| (
PIO3_0_HYS
 << 5))

	)

876 
	#PIO3_1_GPIO
 0x00

	)

877 
	#PIO3_1_DSR
 0x01

	)

879 
	#FUNC_PIO3_1
 
PIO3_1_GPIO


	)

881 
	#PIO3_1_INACTIVE
 0x00

	)

882 
	#PIO3_1_PULLDOWN
 0x01

	)

883 
	#PIO3_1_PULLUP
 0x10

	)

884 
	#PIO3_1_REPEATER
 0x11

	)

886 
	#PIO3_1_MODE
 
PIO3_1_PULLUP


	)

888 
	#PIO3_1_HYSDISABLE
 0

	)

889 
	#PIO3_1_HYSENABLE
 1

	)

891 
	#PIO3_1_HYS
 
PIO3_1_HYSDISABLE


	)

893 
	#PIO3_1_CON
 (
FUNC_PIO3_1
 | (
PIO3_1_MODE
 << 3Ë| (
PIO3_1_HYS
 << 5))

	)

898 
	#PIO3_2_GPIO
 0x00

	)

899 
	#PIO3_2_DCD
 0x01

	)

901 
	#FUNC_PIO3_2
 
PIO3_2_GPIO


	)

903 
	#PIO3_2_INACTIVE
 0x00

	)

904 
	#PIO3_2_PULLDOWN
 0x01

	)

905 
	#PIO3_2_PULLUP
 0x10

	)

906 
	#PIO3_2_REPEATER
 0x11

	)

908 
	#PIO3_2_MODE
 
PIO3_2_PULLUP


	)

910 
	#PIO3_2_HYSDISABLE
 0

	)

911 
	#PIO3_2_HYSENABLE
 1

	)

913 
	#PIO3_2_HYS
 
PIO3_2_HYSDISABLE


	)

915 
	#PIO3_2_CON
 (
FUNC_PIO3_2
 | (
PIO3_2_MODE
 << 3Ë| (
PIO3_2_HYS
 << 5))

	)

920 
	#PIO3_3_GPIO
 0x00

	)

921 
	#PIO3_3_RI
 0x01

	)

923 
	#FUNC_PIO3_3
 
PIO3_3_GPIO


	)

925 
	#PIO3_3_INACTIVE
 0x00

	)

926 
	#PIO3_3_PULLDOWN
 0x01

	)

927 
	#PIO3_3_PULLUP
 0x10

	)

928 
	#PIO3_3_REPEATER
 0x11

	)

930 
	#PIO3_3_MODE
 
PIO3_3_PULLUP


	)

932 
	#PIO3_3_HYSDISABLE
 0

	)

933 
	#PIO3_3_HYSENABLE
 1

	)

935 
	#PIO3_3_HYS
 
PIO3_3_HYSDISABLE


	)

937 
	#PIO3_3_CON
 (
FUNC_PIO3_3
 | (
PIO3_3_MODE
 << 3Ë| (
PIO3_3_HYS
 << 5))

	)

941 
	#PIO3_4_GPIO
 0x00

	)

943 
	#FUNC_PIO3_4
 
PIO3_4_GPIO


	)

945 
	#PIO3_4_INACTIVE
 0x00

	)

946 
	#PIO3_4_PULLDOWN
 0x01

	)

947 
	#PIO3_4_PULLUP
 0x10

	)

948 
	#PIO3_4_REPEATER
 0x11

	)

950 
	#PIO3_4_MODE
 
PIO3_4_PULLUP


	)

952 
	#PIO3_4_HYSDISABLE
 0

	)

953 
	#PIO3_4_HYSENABLE
 1

	)

955 
	#PIO3_4_HYS
 
PIO3_4_HYSDISABLE


	)

957 
	#PIO3_4_CON
 (
FUNC_PIO3_4
 | (
PIO3_4_MODE
 << 3Ë| (
PIO3_4_HYS
 << 5))

	)

961 
	#PIO3_5_GPIO
 0x00

	)

963 
	#FUNC_PIO3_5
 
PIO3_5_GPIO


	)

965 
	#PIO3_5_INACTIVE
 0x00

	)

966 
	#PIO3_5_PULLDOWN
 0x01

	)

967 
	#PIO3_5_PULLUP
 0x10

	)

968 
	#PIO3_5_REPEATER
 0x11

	)

970 
	#PIO3_5_MODE
 
PIO3_5_PULLUP


	)

972 
	#PIO3_5_HYSDISABLE
 0

	)

973 
	#PIO3_5_HYSENABLE
 1

	)

975 
	#PIO3_5_HYS
 
PIO3_5_HYSDISABLE


	)

977 
	#PIO3_5_CON
 (
FUNC_PIO3_5
 | (
PIO3_5_MODE
 << 3Ë| (
PIO3_5_HYS
 << 5))

	)

985 
	#AHBCLK_SYS
 0

	)

986 
	#AHBCLK_ROM
 1

	)

987 
	#AHBCLK_RAM
 2

	)

988 
	#AHBCLK_FLASHREG
 3

	)

989 
	#AHBCLK_FLASHARRAY
 4

	)

990 
	#AHBCLK_I2C
 5

	)

991 
	#AHBCLK_GPIO
 6

	)

992 
	#AHBCLK_CT16B0
 7

	)

993 
	#AHBCLK_CT16B1
 8

	)

994 
	#AHBCLK_CT32B0
 9

	)

995 
	#AHBCLK_CT32B1
 10

	)

996 
	#AHBCLK_SSP0
 11

	)

997 
	#AHBCLK_UART
 12

	)

998 
	#AHBCLK_ADC
 13

	)

999 
	#AHBCLK_NC0
 14

	)

1000 
	#AHBCLK_WDT
 15

	)

1001 
	#AHBCLK_IOCON
 16

	)

1002 
	#AHBCLK_CAN
 17

	)

1003 
	#AHBCLK_SSP1
 18

	)

	@app/LPC1700PinCfg.h

23 #i‚de‡
__LPC1700PINCFG_H


24 
	#__LPC1700PINCFG_H


	)

33 
	#P0_0_GPIO
 0x00

	)

34 
	#P0_0_RD1
 0x01

	)

35 
	#P0_0_TXD3
 0x02

	)

36 
	#P0_0_SDA1
 0x03

	)

38 
	#P0_0_FNUC
 
P0_0_RD1


	)

43 
	#P0_1_GPIO
 0x00

	)

44 
	#P0_1_TD1
 0x01

	)

45 
	#P0_1_RXD3
 0x02

	)

46 
	#P0_1_SCL1
 0x03

	)

48 
	#P0_1_FNUC
 
P0_1_TD1


	)

53 
	#P0_2_GPIO
 0x00

	)

54 
	#P0_2_TXD0
 0x01

	)

55 
	#P0_2_AD07
 0x02

	)

58 
	#P0_2_FNUC
 
P0_2_TXD0


	)

63 
	#P0_3_GPIO
 0x00

	)

64 
	#P0_3_RXD0
 0x01

	)

65 
	#P0_3_AD06
 0x02

	)

68 
	#P0_3_FNUC
 
P0_3_RXD0


	)

73 
	#P0_4_GPIO
 0x00

	)

74 
	#P0_4_I2SRX_CLK
 0x01

	)

75 
	#P0_4_RD2
 0x02

	)

76 
	#P0_4_CAP20
 0x03

	)

78 
	#P0_4_FNUC
 
P0_4_RD2


	)

83 
	#P0_5_GPIO
 0x00

	)

84 
	#P0_5_I2SRX_WS
 0x01

	)

85 
	#P0_5_TD2
 0x02

	)

86 
	#P0_5_CAP21
 0x03

	)

88 
	#P0_5_FNUC
 
P0_5_TD2


	)

93 
	#P0_6_GPIO
 0x00

	)

94 
	#P0_6_I2SRX_SDA
 0x01

	)

95 
	#P0_6_SSEL1
 0x02

	)

96 
	#P0_6_MAT20
 0x03

	)

98 
	#P0_6_FNUC
 
P0_6_GPIO


	)

103 
	#P0_7_GPIO
 0x00

	)

104 
	#P0_7_I2STX_CLK
 0x01

	)

105 
	#P0_7_SSCK1
 0x02

	)

106 
	#P0_7_MAT21
 0x03

	)

108 
	#P0_7_FNUC
 
P0_7_SSCK1


	)

113 
	#P0_8_GPIO
 0x00

	)

114 
	#P0_8_I2STX_WS
 0x01

	)

115 
	#P0_8_SMISO1
 0x02

	)

116 
	#P0_8_MAT22
 0x03

	)

118 
	#P0_8_FNUC
 
P0_8_SMISO1


	)

123 
	#P0_9_GPIO
 0x00

	)

124 
	#P0_9_I2STX_SDA
 0x01

	)

125 
	#P0_9_SMOSI1
 0x02

	)

126 
	#P0_9_MAT23
 0x03

	)

128 
	#P0_9_FNUC
 
P0_9_SMOSI1


	)

133 
	#P0_10_GPIO
 0x00

	)

134 
	#P0_10_TXD2
 0x01

	)

135 
	#P0_10_SDA2
 0x02

	)

136 
	#P0_10_MAT30
 0x03

	)

138 
	#P0_10_FNUC
 
P0_10_GPIO


	)

143 
	#P0_11_GPIO
 0x00

	)

144 
	#P0_11_RXD2
 0x01

	)

145 
	#P0_11_SCL2
 0x02

	)

146 
	#P0_11_MAT31
 0x03

	)

148 
	#P0_11_FNUC
 
P0_11_GPIO


	)

153 
	#P0_15_GPIO
 0x00

	)

154 
	#P0_15_TXD1
 0x01

	)

155 
	#P0_15_SCK0
 0x02

	)

156 
	#P0_15_SCK
 0x03

	)

158 
	#P0_15_FNUC
 
P0_15_TXD1


	)

163 
	#P0_16_GPIO
 0x00

	)

164 
	#P0_16_RXD1
 0x01

	)

165 
	#P0_16_SSEL0
 0x02

	)

166 
	#P0_16_SSEL
 0x03

	)

168 
	#P0_16_FNUC
 
P0_16_RXD1


	)

173 
	#P0_17_GPIO
 0x00

	)

174 
	#P0_17_CTS1
 0x01

	)

175 
	#P0_17_MISO0
 0x02

	)

176 
	#P0_17_MISO
 0x03

	)

178 
	#P0_17_FNUC
 
P0_17_GPIO


	)

183 
	#P0_18_GPIO
 0x00

	)

184 
	#P0_18_DCD1
 0x01

	)

185 
	#P0_18_MOSI0
 0x02

	)

186 
	#P0_18_MOSI
 0x03

	)

188 
	#P0_18_FNUC
 
P0_18_GPIO


	)

193 
	#P0_19_GPIO
 0x00

	)

194 
	#P0_19_DSR1
 0x01

	)

196 
	#P0_19_SDA1
 0x03

	)

198 
	#P0_19_FNUC
 
P0_19_GPIO


	)

203 
	#P0_20_GPIO
 0x00

	)

204 
	#P0_20_DTR1
 0x01

	)

206 
	#P0_20_SCL1
 0x03

	)

208 
	#P0_20_FNUC
 
P0_20_GPIO


	)

213 
	#P0_21_GPIO
 0x00

	)

214 
	#P0_21_RI1
 0x01

	)

216 
	#P0_21_RD1
 0x03

	)

218 
	#P0_21_FNUC
 
P0_21_GPIO


	)

223 
	#P0_22_GPIO
 0x00

	)

224 
	#P0_22_RTS1
 0x01

	)

226 
	#P0_22_TD1
 0x03

	)

228 
	#P0_22_FNUC
 
P0_22_GPIO


	)

233 
	#P0_23_GPIO
 0x00

	)

234 
	#P0_23_AD00
 0x01

	)

235 
	#P0_23_I2SRX_CLK
 0x02

	)

236 
	#P0_23_CAP30
 0x03

	)

238 
	#P0_23_FNUC
 
P0_23_GPIO


	)

243 
	#P0_24_GPIO
 0x00

	)

244 
	#P0_24_AD01
 0x01

	)

245 
	#P0_24_I2SRX_WS
 0x02

	)

246 
	#P0_24_CAP31
 0x03

	)

248 
	#P0_24_FNUC
 
P0_24_GPIO


	)

253 
	#P0_25_GPIO
 0x00

	)

254 
	#P0_25_AD02
 0x01

	)

255 
	#P0_25_I2SRX_SDA
 0x02

	)

256 
	#P0_25_TXD3
 0x03

	)

258 
	#P0_25_FNUC
 
P0_25_GPIO


	)

263 
	#P0_26_GPIO
 0x00

	)

264 
	#P0_26_AD03
 0x01

	)

265 
	#P0_26_AOUT
 0x02

	)

266 
	#P0_26_RXD3
 0x03

	)

268 
	#P0_26_FNUC
 
P0_26_GPIO


	)

273 
	#P0_27_GPIO
 0x00

	)

274 
	#P0_27_SDA0
 0x01

	)

275 
	#P0_27_USB_SDA
 0x02

	)

278 
	#P0_27_FNUC
 
P0_27_SDA0


	)

283 
	#P0_28_GPIO
 0x00

	)

284 
	#P0_28_SCL0
 0x01

	)

285 
	#P0_28_USB_SCL
 0x02

	)

288 
	#P0_28_FNUC
 
P0_28_SCL0


	)

293 
	#P0_29_GPIO
 0x00

	)

294 
	#P0_29_USB_DD
 0x01

	)

298 
	#P0_29_FNUC
 
P0_29_GPIO


	)

303 
	#P0_30_GPIO
 0x00

	)

304 
	#P0_30_USB_DS
 0x01

	)

308 
	#P0_30_FNUC
 
P0_30_GPIO


	)

317 
	#P1_0_GPIO
 0x00

	)

318 
	#P1_0_ENET_TXD0
 0x01

	)

322 
	#P1_0_FNUC
 
P1_0_GPIO


	)

327 
	#P1_1_GPIO
 0x00

	)

328 
	#P1_1_ENET_TX_EN
 0x01

	)

332 
	#P1_1_FNUC
 
P1_1_GPIO


	)

337 
	#P1_4_GPIO
 0x00

	)

338 
	#P1_4_ENET_TX_EN
 0x01

	)

342 
	#P1_4_FNUC
 
P1_4_GPIO


	)

347 
	#P1_8_GPIO
 0x00

	)

348 
	#P1_8_ENET_CRS
 0x01

	)

352 
	#P1_8_FNUC
 
P1_8_GPIO


	)

357 
	#P1_9_GPIO
 0x00

	)

358 
	#P1_9_ENET_RXD0
 0x01

	)

362 
	#P1_9_FNUC
 
P1_9_GPIO


	)

367 
	#P1_10_GPIO
 0x00

	)

368 
	#P1_10_ENET_RXD1
 0x01

	)

372 
	#P1_10_FNUC
 
P1_10_GPIO


	)

377 
	#P1_14_GPIO
 0x00

	)

378 
	#P1_14_ENET_RX_ER
 0x01

	)

382 
	#P1_14_FNUC
 
P1_14_GPIO


	)

387 
	#P1_15_GPIO
 0x00

	)

388 
	#P1_15_ENET_REF_CLK
 0x01

	)

392 
	#P1_15_FNUC
 
P1_15_GPIO


	)

397 
	#P1_16_GPIO
 0x00

	)

398 
	#P1_16_ENET_MDC
 0x01

	)

402 
	#P1_16_FNUC
 
P1_16_GPIO


	)

407 
	#P1_17_GPIO
 0x00

	)

408 
	#P1_17_ENET_MDIO
 0x01

	)

412 
	#P1_17_FNUC
 
P1_17_GPIO


	)

417 
	#P1_18_GPIO
 0x00

	)

418 
	#P1_18_USB_UP_LED
 0x01

	)

419 
	#P1_18_PWM11
 0x02

	)

420 
	#P1_18_CAP10
 0x03

	)

422 
	#P1_18_FNUC
 
P1_18_GPIO


	)

427 
	#P1_19_GPIO
 0x00

	)

428 
	#P1_19_MCO0A
 0x01

	)

429 
	#P1_19_USB_PPWR
 0x02

	)

430 
	#P1_19_CAP11
 0x03

	)

432 
	#P1_19_FNUC
 
P1_19_GPIO


	)

437 
	#P1_20_GPIO
 0x00

	)

438 
	#P1_20_MCFB0
 0x01

	)

439 
	#P1_20_PWM12
 0x02

	)

440 
	#P1_20_SCK0
 0x03

	)

442 
	#P1_20_FNUC
 
P1_20_GPIO


	)

447 
	#P1_21_GPIO
 0x00

	)

448 
	#P1_21_MCABORT
 0x01

	)

449 
	#P1_21_PWM13
 0x02

	)

450 
	#P1_21_SSEL0
 0x03

	)

452 
	#P1_21_FNUC
 
P1_21_GPIO


	)

457 
	#P1_22_GPIO
 0x00

	)

458 
	#P1_22_MC0B
 0x01

	)

459 
	#P1_22_USB_PWRD
 0x02

	)

460 
	#P1_22_MAT10
 0x03

	)

462 
	#P1_22_FNUC
 
P1_22_GPIO


	)

467 
	#P1_23_GPIO
 0x00

	)

468 
	#P1_23_MCFB1
 0x01

	)

469 
	#P1_23_PWM14
 0x02

	)

470 
	#P1_23_MISO0
 0x03

	)

472 
	#P1_23_FNUC
 
P1_23_GPIO


	)

477 
	#P1_24_GPIO
 0x00

	)

478 
	#P1_24_MCFB2
 0x01

	)

479 
	#P1_24_PWM15
 0x02

	)

480 
	#P1_24_MOSI0
 0x03

	)

482 
	#P1_24_FNUC
 
P1_24_GPIO


	)

487 
	#P1_25_GPIO
 0x00

	)

488 
	#P1_25_MC1A
 0x01

	)

489 
	#P1_25_CLKOUT
 0x02

	)

490 
	#P1_25_MAT11
 0x03

	)

492 
	#P1_25_FNUC
 
P1_25_GPIO


	)

497 
	#P1_26_GPIO
 0x00

	)

498 
	#P1_26_MC1B
 0x01

	)

499 
	#P1_26_PWM16
 0x02

	)

500 
	#P1_26_CAP00
 0x03

	)

502 
	#P1_26_FNUC
 
P1_26_GPIO


	)

507 
	#P1_27_GPIO
 0x00

	)

508 
	#P1_27_CLKOUT
 0x01

	)

509 
	#P1_27_USB_OVRCR
 0x02

	)

510 
	#P1_27_CAP01
 0x03

	)

512 
	#P1_27_FNUC
 
P1_27_GPIO


	)

517 
	#P1_28_GPIO
 0x00

	)

518 
	#P1_28_MC2A
 0x01

	)

519 
	#P1_28_PCAP10
 0x02

	)

520 
	#P1_28_MAT00
 0x03

	)

522 
	#P1_28_FNUC
 
P1_28_GPIO


	)

527 
	#P1_29_GPIO
 0x00

	)

528 
	#P1_29_MC2B
 0x01

	)

529 
	#P1_29_PCAP11
 0x02

	)

530 
	#P1_29_MAT01
 0x03

	)

532 
	#P1_29_FNUC
 
P1_29_GPIO


	)

537 
	#P1_30_GPIO
 0x00

	)

539 
	#P1_30_VBUS
 0x02

	)

540 
	#P1_30_AD04
 0x03

	)

542 
	#P1_30_FNUC
 
P1_30_GPIO


	)

547 
	#P1_31_GPIO
 0x00

	)

549 
	#P1_31_SSCK1
 0x02

	)

550 
	#P1_31_AD05
 0x03

	)

552 
	#P1_31_FNUC
 
P1_31_GPIO


	)

561 
	#P2_0_GPIO
 0x00

	)

562 
	#P2_0_PWM11
 0x01

	)

563 
	#P2_0_TXD1
 0x02

	)

566 
	#P2_0_FNUC
 
P2_0_GPIO


	)

571 
	#P2_1_GPIO
 0x00

	)

572 
	#P2_1_PWM12
 0x01

	)

573 
	#P2_1_RXD1
 0x02

	)

576 
	#P2_1_FNUC
 
P2_1_GPIO


	)

581 
	#P2_2_GPIO
 0x00

	)

582 
	#P2_2_PWM13
 0x01

	)

583 
	#P2_2_CTS1
 0x02

	)

586 
	#P2_2_FNUC
 
P2_2_GPIO


	)

591 
	#P2_3_GPIO
 0x00

	)

592 
	#P2_3_PWM14
 0x01

	)

593 
	#P2_3_DCD1
 0x02

	)

596 
	#P2_3_FNUC
 
P2_3_GPIO


	)

601 
	#P2_4_GPIO
 0x00

	)

602 
	#P2_4_PWM15
 0x01

	)

603 
	#P2_4_DSR1
 0x02

	)

606 
	#P2_4_FNUC
 
P2_4_GPIO


	)

611 
	#P2_5_GPIO
 0x00

	)

612 
	#P2_5_PWM16
 0x01

	)

613 
	#P2_5_DTR1
 0x02

	)

616 
	#P2_5_FNUC
 
P2_5_GPIO


	)

621 
	#P2_6_GPIO
 0x00

	)

622 
	#P2_6_PCAP10
 0x01

	)

623 
	#P2_6_RI1
 0x02

	)

626 
	#P2_6_FNUC
 
P2_6_GPIO


	)

631 
	#P2_7_GPIO
 0x00

	)

632 
	#P2_7_RD2
 0x01

	)

633 
	#P2_7_RTS1
 0x02

	)

637 
	#P2_7_FNUC
 
P2_7_RTS1


	)

642 
	#P2_8_GPIO
 0x00

	)

643 
	#P2_8_TD2
 0x01

	)

644 
	#P2_8_TXD2
 0x02

	)

645 
	#P2_8_ENET_MDC
 0x03

	)

647 
	#P2_8_FNUC
 
P2_8_GPIO


	)

652 
	#P2_9_GPIO
 0x00

	)

653 
	#P2_9_U1CONNECT
 0x01

	)

654 
	#P2_9_RXD2
 0x02

	)

655 
	#P2_9_ENET_MDIO
 0x03

	)

657 
	#P2_9_FNUC
 
P2_9_GPIO


	)

662 
	#P2_10_GPIO
 0x00

	)

663 
	#P2_10_EINT0
 0x01

	)

664 
	#P2_10_NMI
 0x02

	)

667 
	#P2_10_FNUC
 
P2_10_EINT0


	)

672 
	#P2_11_GPIO
 0x00

	)

673 
	#P2_11_EINT1
 0x01

	)

675 
	#P2_11_I2STX_CLK
 0x03

	)

677 
	#P2_11_FNUC
 
P2_11_GPIO


	)

682 
	#P2_12_GPIO
 0x00

	)

683 
	#P2_12_EINT2
 0x01

	)

685 
	#P2_12_I2STX_WS
 0x03

	)

687 
	#P2_12_FNUC
 
P2_12_GPIO


	)

692 
	#P2_13_GPIO
 0x00

	)

693 
	#P2_13_EINT3
 0x01

	)

695 
	#P2_13_I2STX_SDA
 0x03

	)

697 
	#P2_13_FNUC
 
P2_13_GPIO


	)

706 
	#P3_25_GPIO
 0x00

	)

708 
	#P3_25_MAT00
 0x02

	)

709 
	#P3_25_PWM12
 0x03

	)

711 
	#P3_25_FNUC
 
P3_25_GPIO


	)

716 
	#P3_26_GPIO
 0x00

	)

717 
	#P3_26_STCLK
 0x01

	)

718 
	#P3_26_MAT01
 0x02

	)

719 
	#P3_26_PWM13
 0x03

	)

721 
	#P3_26_FNUC
 
P3_26_GPIO


	)

730 
	#P4_28_GPIO
 0x00

	)

731 
	#P4_28_RX_MCLK
 0x01

	)

732 
	#P4_28_MAT20
 0x02

	)

733 
	#P4_28_TXD3
 0x03

	)

735 
	#P4_28_FNUC
 
P4_28_TXD3


	)

740 
	#P4_29_GPIO
 0x00

	)

741 
	#P4_29_TX_MCLK
 0x01

	)

742 
	#P4_29_MAT21
 0x02

	)

743 
	#P4_29_RXD3
 0x03

	)

745 
	#P4_29_FNUC
 
P4_29_RXD3


	)

755 
	#TPIU_DißbÀ
 0x00

	)

756 
	#TPIU_E«bÀ
 0x01

	)

758 
	#P10_3_FNUC
 
TPIU_DißbÀ


	)

763 
	#PIN_PULL_UP
 0x00

	)

764 
	#PIN_REPEATER
 0x01

	)

765 
	#PIN_NO_PULL
 0x02

	)

766 
	#PIN_PULL_DOWN
 0x03

	)

771 
	#P0_0_MODE
 
PIN_PULL_UP


	)

772 
	#P0_1_MODE
 
PIN_PULL_UP


	)

773 
	#P0_2_MODE
 
PIN_PULL_UP


	)

774 
	#P0_3_MODE
 
PIN_PULL_UP


	)

775 
	#P0_4_MODE
 
PIN_PULL_UP


	)

776 
	#P0_5_MODE
 
PIN_PULL_UP


	)

777 
	#P0_6_MODE
 
PIN_PULL_UP


	)

778 
	#P0_7_MODE
 
PIN_PULL_UP


	)

779 
	#P0_8_MODE
 
PIN_PULL_UP


	)

780 
	#P0_9_MODE
 
PIN_PULL_UP


	)

781 
	#P0_10_MODE
 
PIN_PULL_UP


	)

782 
	#P0_11_MODE
 
PIN_PULL_UP


	)

783 
	#P0_12_MODE
 
PIN_PULL_UP


	)

784 
	#P0_13_MODE
 
PIN_PULL_UP


	)

785 
	#P0_14_MODE
 
PIN_PULL_UP


	)

786 
	#P0_15_MODE
 
PIN_PULL_UP


	)

788 
	#P0_16_MODE
 
PIN_PULL_UP


	)

789 
	#P0_17_MODE
 
PIN_PULL_UP


	)

790 
	#P0_18_MODE
 
PIN_PULL_UP


	)

791 
	#P0_19_MODE
 
PIN_PULL_UP


	)

792 
	#P0_20_MODE
 
PIN_PULL_UP


	)

793 
	#P0_21_MODE
 
PIN_PULL_UP


	)

794 
	#P0_22_MODE
 
PIN_PULL_UP


	)

795 
	#P0_23_MODE
 
PIN_PULL_UP


	)

796 
	#P0_24_MODE
 
PIN_PULL_UP


	)

797 
	#P0_25_MODE
 
PIN_PULL_UP


	)

798 
	#P0_26_MODE
 
PIN_PULL_UP


	)

799 
	#P0_27_MODE
 
PIN_PULL_UP


	)

800 
	#P0_28_MODE
 
PIN_PULL_UP


	)

801 
	#P0_29_MODE
 
PIN_PULL_UP


	)

802 
	#P0_30_MODE
 
PIN_PULL_UP


	)

803 
	#P0_31_MODE
 
PIN_PULL_UP


	)

808 
	#P1_0_MODE
 
PIN_PULL_UP


	)

809 
	#P1_1_MODE
 
PIN_PULL_UP


	)

810 
	#P1_2_MODE
 
PIN_PULL_UP


	)

811 
	#P1_3_MODE
 
PIN_PULL_UP


	)

812 
	#P1_4_MODE
 
PIN_PULL_UP


	)

813 
	#P1_5_MODE
 
PIN_PULL_UP


	)

814 
	#P1_6_MODE
 
PIN_PULL_UP


	)

815 
	#P1_7_MODE
 
PIN_PULL_UP


	)

816 
	#P1_8_MODE
 
PIN_PULL_UP


	)

817 
	#P1_9_MODE
 
PIN_PULL_UP


	)

818 
	#P1_10_MODE
 
PIN_PULL_UP


	)

819 
	#P1_11_MODE
 
PIN_PULL_UP


	)

820 
	#P1_12_MODE
 
PIN_PULL_UP


	)

821 
	#P1_13_MODE
 
PIN_PULL_UP


	)

822 
	#P1_14_MODE
 
PIN_PULL_UP


	)

823 
	#P1_15_MODE
 
PIN_PULL_UP


	)

824 
	#P1_16_MODE
 
PIN_PULL_UP


	)

825 
	#P1_17_MODE
 
PIN_PULL_UP


	)

826 
	#P1_18_MODE
 
PIN_PULL_UP


	)

827 
	#P1_19_MODE
 
PIN_PULL_UP


	)

828 
	#P1_20_MODE
 
PIN_PULL_UP


	)

829 
	#P1_21_MODE
 
PIN_PULL_UP


	)

830 
	#P1_22_MODE
 
PIN_PULL_UP


	)

831 
	#P1_23_MODE
 
PIN_PULL_UP


	)

832 
	#P1_24_MODE
 
PIN_PULL_UP


	)

833 
	#P1_25_MODE
 
PIN_PULL_UP


	)

834 
	#P1_26_MODE
 
PIN_PULL_UP


	)

835 
	#P1_27_MODE
 
PIN_PULL_UP


	)

836 
	#P1_28_MODE
 
PIN_PULL_UP


	)

837 
	#P1_29_MODE
 
PIN_PULL_UP


	)

838 
	#P1_30_MODE
 
PIN_PULL_UP


	)

839 
	#P1_31_MODE
 
PIN_PULL_UP


	)

844 
	#P2_0_MODE
 
PIN_PULL_UP


	)

845 
	#P2_1_MODE
 
PIN_PULL_UP


	)

846 
	#P2_2_MODE
 
PIN_PULL_UP


	)

847 
	#P2_3_MODE
 
PIN_PULL_UP


	)

848 
	#P2_4_MODE
 
PIN_PULL_UP


	)

849 
	#P2_5_MODE
 
PIN_PULL_UP


	)

850 
	#P2_6_MODE
 
PIN_PULL_UP


	)

851 
	#P2_7_MODE
 
PIN_PULL_UP


	)

852 
	#P2_8_MODE
 
PIN_PULL_UP


	)

853 
	#P2_9_MODE
 
PIN_PULL_UP


	)

854 
	#P2_10_MODE
 
PIN_PULL_UP


	)

855 
	#P2_11_MODE
 
PIN_PULL_UP


	)

856 
	#P2_12_MODE
 
PIN_PULL_UP


	)

857 
	#P2_13_MODE
 
PIN_PULL_UP


	)

858 
	#P2_14_MODE
 
PIN_PULL_UP


	)

859 
	#P2_15_MODE
 
PIN_PULL_UP


	)

864 
	#P3_25_MODE
 
PIN_PULL_UP


	)

865 
	#P3_26_MODE
 
PIN_PULL_UP


	)

870 
	#P4_28_MODE
 
PIN_PULL_UP


	)

871 
	#P4_29_MODE
 
PIN_PULL_UP


	)

876 
	#PCTIM0_E«bÀ
 1

	)

877 
	#PCTIM0_DißbÀ
 0

	)

878 
	#PCTIM0_FUNC
 
PCTIM0_E«bÀ


	)

880 
	#PCTIM1_E«bÀ
 1

	)

881 
	#PCTIM1_DißbÀ
 0

	)

882 
	#PCTIM1_FUNC
 
PCTIM1_E«bÀ


	)

884 
	#PCUART0_E«bÀ
 1

	)

885 
	#PCUART0_DißbÀ
 0

	)

886 
	#PCUART0_FUNC
 
PCUART0_E«bÀ


	)

888 
	#PCUART1_E«bÀ
 1

	)

889 
	#PCUART1_DißbÀ
 0

	)

890 
	#PCUART1_FUNC
 
PCUART1_E«bÀ


	)

892 
	#PWM1_E«bÀ
 1

	)

893 
	#PWM1_DißbÀ
 0

	)

894 
	#PWM1_FUNC
 
PWM1_E«bÀ


	)

896 
	#PCI2C0_E«bÀ
 1

	)

897 
	#PCI2C0_DißbÀ
 0

	)

898 
	#PCI2C0_FUNC
 
PCI2C0_E«bÀ


	)

900 
	#PCSPI_E«bÀ
 1

	)

901 
	#PCSPI_DißbÀ
 0

	)

902 
	#PCSPI_FUNC
 
PCSPI_E«bÀ


	)

904 
	#PCRTC_E«bÀ
 1

	)

905 
	#PCRTC_DißbÀ
 0

	)

906 
	#PCRTC_FUNC
 
PCRTC_E«bÀ


	)

908 
	#PCSSP1_E«bÀ
 1

	)

909 
	#PCSSP1_DißbÀ
 0

	)

910 
	#PCSSP1_FUNC
 
PCSSP1_E«bÀ


	)

912 
	#PCAD_E«bÀ
 1

	)

913 
	#PCAD_DißbÀ
 0

	)

914 
	#PCAD_FUNC
 
PCAD_DißbÀ


	)

916 
	#PCCAN1_E«bÀ
 1

	)

917 
	#PCCAN1_DißbÀ
 0

	)

918 
	#PCCAN1_FUNC
 
PCCAN1_DißbÀ


	)

920 
	#PCCAN2_E«bÀ
 1

	)

921 
	#PCCAN2_DißbÀ
 0

	)

922 
	#PCCAN2_FUNC
 
PCCAN2_DißbÀ


	)

924 
	#PCGPIO_E«bÀ
 1

	)

925 
	#PCGPIO_DißbÀ
 0

	)

926 
	#PCGPIO_FUNC
 
PCGPIO_E«bÀ


	)

928 
	#PCRIT_E«bÀ
 1

	)

930 
	#PCRIT_DißbÀ
 0

	)

932 
	#PCRIT_FUNC
 
PCRIT_DißbÀ


	)

934 
	#PCMC_E«bÀ
 1

	)

935 
	#PCMC_DißbÀ
 0

	)

936 
	#PCMC_FUNC
 
PCMC_DißbÀ


	)

938 
	#PCQEI_E«bÀ
 1

	)

940 
	#PCQEI_DißbÀ
 0

	)

942 
	#PCQEI_FUNC
 
PCQEI_DißbÀ


	)

944 
	#PCI2C1_E«bÀ
 1

	)

945 
	#PCI2C1_DißbÀ
 0

	)

946 
	#PCI2C1_FUNC
 
PCI2C1_E«bÀ


	)

948 
	#PCSSP0_E«bÀ
 1

	)

949 
	#PCSSP0_DißbÀ
 0

	)

950 
	#PCSSP0_FUNC
 
PCSSP0_E«bÀ


	)

952 
	#PCTIM2_E«bÀ
 1

	)

953 
	#PCTIM2_DißbÀ
 0

	)

954 
	#PCTIM2_FUNC
 
PCTIM2_DißbÀ


	)

956 
	#PCTIM3_E«bÀ
 1

	)

957 
	#PCTIM3_DißbÀ
 0

	)

958 
	#PCTIM3_FUNC
 
PCTIM3_DißbÀ


	)

960 
	#PCUART2_E«bÀ
 1

	)

961 
	#PCUART2_DißbÀ
 0

	)

962 
	#PCUART2_FUNC
 
PCUART2_E«bÀ


	)

964 
	#PCUART3_E«bÀ
 1

	)

965 
	#PCUART3_DißbÀ
 0

	)

966 
	#PCUART3_FUNC
 
PCUART3_DißbÀ


	)

968 
	#PCI2C2_E«bÀ
 1

	)

969 
	#PCI2C2_DißbÀ
 0

	)

970 
	#PCI2C2_FUNC
 
PCI2C2_E«bÀ


	)

972 
	#PCI2S_E«bÀ
 1

	)

973 
	#PCI2S_DißbÀ
 0

	)

974 
	#PCI2S_FUNC
 
PCI2S_DißbÀ


	)

976 
	#PCGPDMA_E«bÀ
 1

	)

977 
	#PCGPDMA_DißbÀ
 0

	)

978 
	#PCGPDMA_FUNC
 
PCGPDMA_DißbÀ


	)

980 
	#PCENET_E«bÀ
 1

	)

981 
	#PCENET_DißbÀ
 0

	)

982 
	#PCENET_FUNC
 
PCENET_DißbÀ


	)

984 
	#PCUSB_E«bÀ
 1

	)

985 
	#PCUSB_DißbÀ
 0

	)

986 
	#PCUSB_FUNC
 
PCUSB_DißbÀ


	)

	@app/Protocol3.h

6 #i‚de‡
__PROTOCOL3_H__


7 
	#__PROTOCOL3_H__


	)

18 
	#RCOM_CMD_DATA
 0xA0

19 
	#RCOM_CMD_SY
 0xA1

20 
	#RCOM_CMD_TYPE
 0xA2

21 
	#RCOM_CMD_RESET
 0xA3

22 
	#RCOM_CMD_GETADDR
 0xA4

23 
	#RCOM_CMD_TK
 0xA5

24 
	#RCOM_CMD_CLOSE
 0xA6

25 
	#RCOM_CMD_OPEN
 0xA7

26 
	#RCOM_CMD_SETCNT
 0xA8

27 
	#RCOM_CMD_TRANSTYPE
 0xA9

28 
	#RCOM_CMD_JZL
 0xAA

29 
	#RCOM_CMD_JZH
 0xAB

30 
	#RCOM_CMD_SETADDR
 0xAC

31 
	#RCOM_CMD_SETWANING
 0xAD

32 
	#RCOM_CMD_SETTK
 0xAE

33 
	#RCOM_CMD_VERSION
 0xAF

34 

	)

37 
	#RCOM_ENTER
 0xAB

	)

38 
	#RCOM_ERROR
 0xAA

	)

39 
	#RCOM_ERR_BUS
 0x01

40 
	#RCOM_ERR_SETCNT
 0x02

41 
	#RCOM_ERR_NOTCMD
 0x03

42 

	)

79 
	#TK_STATE_FAIL
 (1<<0)

	)

80 
	#TK_STATE_WARNING
 (1<<1)

	)

81 
	#TK_STATE_POWERCUT
 (1<<2)

	)

84 
	#TT_STATE_FAIL
 0x00

85 
	#TT_STATE_NOMAL
 0x01

86 
	#TT_STATE_WARNING
 0x02

87 
	#TT_STATE_POWERCUT
 0x03

88 
	#TT_STATE_TEST
 0x04

89 
	#TT_STATE_ADDR
 0x05

90 
	#TT_STATE_TYPE
 0x07

91 

	)

92 
	#TT_FAIL_SYCG
 0x55

93 
	#TT_FAIL_SYSB
 0xAA

94 
	#TT_FAIL_DD
 0xAB

95 
	#TT_FAIL_TK
 0xAC

96 

	)

98 
	#TT_STATE_TESTCG
 0x10

99 
	#TT_STATE_TESTSB
 0x11

100 
	#TT_STATE_TK
 0x12

101 
	#TT_STATE_DD
 0x13

102 

	)

143 
	#CODE_NOMAL
 0x00

	)

145 
	#CODE_SY
 0x01

	)

147 
	#CODE_TK
 0x02

	)

149 
	#CODE_WJZL
 0x05

	)

150 
	#CODE_WJZH
 0x06

	)

151 
	#CODE_DJZ
 0x07

	)

153 
	#CODE_SETEN
 0x08

	)

155 
	#CODE_SETCNT
 0x09

	)

157 
	#CODE_SET_ADDR
 0x0A

	)

158 
	#CODE_RESET
 0x0B

159 

	)

161 
	#CODE_READ_TYPE
 0x0C

	)

163 
	#CODE_GET_ADDR
 0x0D

	)

166 
	#CODE_SET_WARNING
 0x0E

	)

168 
	#CODE_SET_WARNING_W
 0x0F

	)

	@app/app_cfg.h

2 #i‚de‡
__APP_CFG_H__


3 
	#__APP_CFG_H__


	)

5 
	~"myty≥.h
"

6 
	~"¥ötk.h
"

9 
	#DEF_BIT_NONE
 0x00

	)

11 
	#DEF_BIT_00
 0x01

	)

12 
	#DEF_BIT_01
 0x02

	)

13 
	#DEF_BIT_02
 0x04

	)

14 
	#DEF_BIT_03
 0x08

	)

15 
	#DEF_BIT_04
 0x10

	)

16 
	#DEF_BIT_05
 0x20

	)

17 
	#DEF_BIT_06
 0x40

	)

18 
	#DEF_BIT_07
 0x80

	)

20 
	#DEF_BIT_08
 0x0100

	)

21 
	#DEF_BIT_09
 0x0200

	)

22 
	#DEF_BIT_10
 0x0400

	)

23 
	#DEF_BIT_11
 0x0800

	)

24 
	#DEF_BIT_12
 0x1000

	)

25 
	#DEF_BIT_13
 0x2000

	)

26 
	#DEF_BIT_14
 0x4000

	)

27 
	#DEF_BIT_15
 0x8000

	)

29 
	#DEF_BIT_16
 0x00010000

	)

30 
	#DEF_BIT_17
 0x00020000

	)

31 
	#DEF_BIT_18
 0x00040000

	)

32 
	#DEF_BIT_19
 0x00080000

	)

33 
	#DEF_BIT_20
 0x00100000

	)

34 
	#DEF_BIT_21
 0x00200000

	)

35 
	#DEF_BIT_22
 0x00400000

	)

36 
	#DEF_BIT_23
 0x00800000

	)

38 
	#DEF_BIT_24
 0x01000000

	)

39 
	#DEF_BIT_25
 0x02000000

	)

40 
	#DEF_BIT_26
 0x04000000

	)

41 
	#DEF_BIT_27
 0x08000000

	)

42 
	#DEF_BIT_28
 0x10000000

	)

43 
	#DEF_BIT_29
 0x20000000

	)

44 
	#DEF_BIT_30
 0x40000000

	)

45 
	#DEF_BIT_31
 0x80000000

	)

48 
uöt32
 
debug_í
;

49 
	#DEBUG_PRINT
 
¥ötk


	)

51 
	#DEBUG0
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_00
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

52 
	#DEBUG1
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_01
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

53 
	#DEBUG2
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_02
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

54 
	#DEBUG3
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_03
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

55 
	#DEBUG4
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_04
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

56 
	#DEBUG5
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_05
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

57 
	#DEBUG6
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_06
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

58 
	#DEBUG7
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_07
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

59 
	#DEBUG8
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_08
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

60 
	#DEBUG9
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_09
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

61 
	#DEBUG10
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_10
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

62 
	#DEBUG11
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_11
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

63 
	#DEBUG12
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_12
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

64 
	#DEBUG13
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_13
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

65 
	#DEBUG14
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_14
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

66 
	#DEBUG15
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_15
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

67 
	#DEBUG16
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_16
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

68 
	#DEBUG17
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_17
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

69 
	#DEBUG18
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_18
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

70 
	#DEBUG19
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_19
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

71 
	#DEBUG20
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_20
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

72 
	#DEBUG21
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_21
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

73 
	#DEBUG22
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_22
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

74 
	#DEBUG23
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_23
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

75 
	#DEBUG24
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_24
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

76 
	#DEBUG25
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_25
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

77 
	#DEBUG26
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_26
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

78 
	#DEBUG27
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_27
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

79 
	#DEBUG28
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_28
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

80 
	#DEBUG29
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_29
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

81 
	#DEBUG30
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_30
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

82 
	#DEBUG31
(
fmt
, 
¨gs
...Ëdo{if–
debug_í
 & 
DEF_BIT_31
 ) 
	`DEBUG_PRINT
(fmt, ##árgs);}0);

	)

85 
	#SHELL_CMD_TIME
 1

	)

86 
	#SHELL_CMD_STK
 1

	)

87 
	#SHELL_CMD_FILE
 1

	)

88 
	#SHELL_CMD_USER
 1

	)

89 
	#SHELL_CMD_CAN
 1

	)

90 
	#SHELL_CMD_IAP
 0

	)

91 
	#SHELL_CMD_KEY
 1

	)

92 
	#SHELL_CMD_BJ
 1

	)

93 
	#SHELL_CMD_LIST_TEST
 0

	)

94 
	#SHELL_CMD_TCAN
 1

	)

96 
	#FLASH_DEBUG
 1

	)

99 
	#UART_BPS
 115200

	)

100 
	#MAX_SVC_SIZE
 128

	)

102 
	#MAX_CAN_RX_SIZE
 32

	)

	@app/debug.c

3 
	~"myty≥.h
"

4 
	~"pcomm™d.h
"

5 
	~"¥ötk.h
"

6 
	~"Mi¸oOS.h
"

7 
	~"OS°rög.h
"

8 
	~"b•.h
"

11 
uöt32
 
	gdebug_í
 = 3;

14 
	$debug_cmd
–
¨gs
, **
¨gv
 )

16 if–
¨gs
 > 2 )

18 
num
 = 
	`©oi
–
¨gv
[2] );

19 if(!
	`°rcmp
(
¨gv
[1], "en"))

21 if–
num
 > 31 )

22 
num
 = 31;

23 
debug_í
 |(1<<
num
);

24 }if(!
	`°rcmp
(
¨gv
[1], "dis"))

26 if–
num
 > 31 )

27 
num
 = 31;

28 
debug_í
 &~(1<<
num
);

29 }if(!
	`°rcmp
(
¨gv
[1], "set"))

31 
debug_í
 = 
num
;

35 
	`¥ötk
("debug [í|dis|£t]Çum 0x%08x\n", 
debug_í
);

38 
	}
}

39 
PSHELL_CMD
–
debug
, 
debug_cmd
, "debug [en|dis|set]Çumb");

41 
OS_cmd
( );

42 
	$OS_cmd
( )

44 
i
, 
j
;

45 
	`¥ötk
("CPU Clk %ld\n", 
FPCLK
 );

46 
	`¥ötk
("tbl:\t%04x\n", 
OSRdyTbl
);

47 
	`¥ötk
("tick:\t%d\n", 
OSTimeTickSize
);

49 
	`¥ötk
("√˚≥∆\tID∫≈\tø’∂—’ª\t∂—’ª◊‹ ˝\t‘À––¥Œ ˝\n");

50 
i
 = 0; i <
OS_TASKS
; i++) {

51 
	`¥ötk
("%-5s\t%-4d\t", 
OS_TCBTbl
[
i
].
«me
, OS_TCBTbl[i].
ID
);

53 
OS_STK
 *
°k
 = 
OS_TCBTbl
[
i
].
OSTaskSèckEnd
;

54 
size
 = 
OS_TCBTbl
[
i
].
StkSize
;

56 
j
 = 0; j < 
size
; j++) {

57 i‡(*
°k
++ != 0)

60 
	`¥ötk
("%-5d\t%-5d\t%-5d\n",

61 
j
, 
size
, 
OS_TCBTbl
[
i
].
TaskSchedC¡
 );

63 
	}
}

64 
PSHELL_CMD
–
os
, 
OS_cmd
, "os");

66 
	$OSTaskSwHook
()

68 
OS_TCBCur
->
TaskSchedC¡
++;

69 
	}
}

86 #i‚de‡
BFSR


87 
	#BFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED29)

	)

88 
	#UFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED2A)

	)

89 
	#HFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED2C)

	)

90 
	#DFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED30)

	)

91 
	#AFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED3C)

	)

94 
H¨dFau…H™dÀ_c
–
uöt32
 *
h¨dÁu…_¨gs
, uöt32 
i
);

95 
	$H¨dFau…H™dÀ_c
–
uöt32
 *
h¨dÁu…_¨gs
, uöt32 
i
)

97  
i
)

100 
	`¥_debug
("Handle hard fault ISR\n");

103 
	`¥_debug
("Handle memory fault ISR\n");

106 
	`¥_debug
("handle bus fault ISR\n");

109 
	`¥_debug
( "Handle usage fault ISR\n");

112 
	`¥_debug
("Handle spurious interrupt\n");

115 
	`¥_debug
("R0 = 0x%08x\n", 
h¨dÁu…_¨gs
[0]);

116 
	`¥_debug
("R1 = 0x%08x\n", 
h¨dÁu…_¨gs
[1]);

117 
	`¥_debug
("R2 = 0x%08x\n", 
h¨dÁu…_¨gs
[2]);

118 
	`¥_debug
("R3 = 0x%08x\n", 
h¨dÁu…_¨gs
[3]);

119 
	`¥_debug
("R120x%08x\n", 
h¨dÁu…_¨gs
[4]);

120 
	`¥_debug
("LR = 0x%08x\n", 
h¨dÁu…_¨gs
[5]);

121 
	`¥_debug
("PC = 0x%08x\n", 
h¨dÁu…_¨gs
[6]);

122 
	`¥_debug
("PSR0x%08x\n", 
h¨dÁu…_¨gs
[7]);

123 
	`¥_debug
("BFAR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED38)));

124 
	`¥_debug
("CFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED28)));

125 
	`¥_debug
("HFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED2C)));

126 
	`¥_debug
("DFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED30)));

127 
	`¥_debug
("AFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED3C)));

129 
	}
}

132 
__AFTER__


133 
H¨dFau…_H™dÀr
();

134 
	$H¨dFau…_H™dÀr
()

136 
uöt32
 *
h¨dÁu…_¨gs
;

138 
asm
 vﬁ©ûe–"mr†%0, MSP\n\t" :"Ù"(
h¨dÁu…_¨gs
) );

139 if–
h¨dÁu…_¨gs
 == 0 )

140 
asm
 vﬁ©ûe–"mr†%0, PSP\n\t":"Ù"(
h¨dÁu…_¨gs
) );

142 
	`¥_debug
("R0 = 0x%08x\n", 
h¨dÁu…_¨gs
[0]);

143 
	`¥_debug
("R1 = 0x%08x\n", 
h¨dÁu…_¨gs
[1]);

144 
	`¥_debug
("R2 = 0x%08x\n", 
h¨dÁu…_¨gs
[2]);

145 
	`¥_debug
("R3 = 0x%08x\n", 
h¨dÁu…_¨gs
[3]);

146 
	`¥_debug
("R120x%08x\n", 
h¨dÁu…_¨gs
[4]);

147 
	`¥_debug
("LR = 0x%08x\n", 
h¨dÁu…_¨gs
[5]);

148 
	`¥_debug
("PC = 0x%08x\n", 
h¨dÁu…_¨gs
[6]);

149 
	`¥_debug
("PSR0x%08x\n", 
h¨dÁu…_¨gs
[7]);

150 
	`¥_debug
("BFAR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED38)));

151 
	`¥_debug
("CFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED28)));

152 
	`¥_debug
("HFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED2C)));

153 
	`¥_debug
("DFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED30)));

154 
	`¥_debug
("AFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED3C)));

156 
	}
}

	@app/global.h

3 #i‚de‡
GLOBAL_H_


4 
	#GLOBAL_H_


	)

6 
	~"¥ötk.h
"

9 
	#HBTK_NAME
 
	`__°rögify
(
HNAME
)

	)

11 
	#CAN_ENABLE
 (1<<0)

	)

12 
	#SOUND_ENABLE
 (1<<1)

	)

14 
	#MAX_POINT_COUNT
 
MAXPOINT


15 
	#MAX_DELAY
 30

	)

20 #ifde‡
__˝lu•lus


27 #ifde‡
__˝lu•lus


	@app/gui_config.h

3 #i‚de‡
__GUI_CONFIG_H__


4 
	#__GUI_CONFIG_H__


	)

6 
	~"myty≥.h
"

7 
	~"p‹écd.h
"

8 
	~"maö_mac.h
"

9 
	~"h¨dw¨e.h
"

12 
	#GUI_OS
 0

	)

13 
	#GUI_MAXTASK
 (4)

	)

15 
	#ASCII
 2

	)

17 
	#FONT5_7_EN
 0

	)

18 
	#FONT6_8_EN
 1

	)

19 
	#FONT8_8_EN
 0

	)

20 
	#FONT6_12_EN
 0

	)

21 
	#FONT8_16_EN
 1

	)

23 
	#HZJ_EN
 1

	)

24 
	#HZ_EN
 0

	)

25 
	#HZJ16x16_EN
 1

	)

29 
	#FONT_CN_WIDTH
 12

	)

30 
	#FONG_CN_HEIGHT
 12

	)

32 
	#GUI_LCD_XMAX
 128

	)

33 
	#GUI_LCD_YMAX
 32

	)

35 
	#GUI_Y
 0

	)

36 
	#GUI_X
 0

	)

37 
	#GUI_YMAX
 (
GUI_LCD_YMAX
)

	)

38 
	#GUI_XMAX
 (
GUI_LCD_XMAX
)

	)

39 
	#DEFAULT_ASCIIFONT
 
ASCII8x16


	)

40 
	#DEFAULT_HZFONT
 
HZJ16x16


	)

42 
	#GUI_DøwSå_EN
 0

	)

43 
	#GUI_LINE_EN
 0

	)

44 
	#GUI_FONTHEIGHT_EN
 0

	)

45 
	#GUI_Re˘DøwSåög_EN
 0

	)

48 
	#PROGRESSBAR_EN
 0

	)

49 
	#SCROLL_EN
 1

	)

50 
	#MENU_EN
 1

	)

54 
	#MMENU_CH_SIZE
 4

	)

55 
	#MENU_RECT_EN
 1

	)

56 
	#MMENU_SIZE
 5

	)

57 
	#SMENU_SIZE
 20

	)

58 
	#MENU_FONT
 
HZJ16x16


	)

59 
	#MENU_CHAR_height
 
MENU_FONT
.
height


	)

63 #i‚de‡
KEY_OK


64 
	#KEY_OK
 13

	)

67 #i‚de‡
KEY_CANCEL


68 
	#KEY_CANCEL
 3

	)

71 #i‚de‡
KEY_INC


72 
	#KEY_INC
 1

	)

75 #i‚de‡
KEY_DEC


76 
	#KEY_DEC
 2

	)

79 #i‡
GUI_OS
 > 0

80 
	#GUI_LOCK
(Ë
	`GUI_X_Lock
()

	)

81 
	#GUI_UNLOCK
(Ë
	`GUI_X_UnLock
()

	)

82 
	#GUI_OSINIT
(Ë
	`GUI_X_InôOS
()

	)

84 
	#GUI_LOCK
()

	)

85 
	#GUI_UNLOCK
()

	)

86 
	#GUI_OSINIT
()

	)

91 
	~"OSgui.h
"

	@app/main.c

25 
	~"Mi¸oOS.h
"

26 
	~"≠p_cfg.h
"

27 
	~"b•.h
"

28 
	~"u¨t.h
"

29 
	~"gui_c⁄fig.h
"

30 
	~"ˇn.h
"

31 
	~"wdt.h
"

32 
	~"¥Ÿocﬁ.h
"

33 
	~"u£r.h
"

34 
	~"d©a.h
"

36 
	~"drcom.h
"

38 
	~"i2c.h
"

39 
	~"adc.h
"

40 
	~"timî32.h
"

41 
	~"h¨dw¨e.h
"

43 
	~"öãrÁ˚.h
"

44 
	~"rcom.h
"

51 
	#LCD_PRO
 7

	)

52 
	#SHELL_PRO
 6

	)

53 
	#DIS_PRO
 5

	)

54 
	#CANTRANS_PRO
 4

	)

55 
	#BJ_PRO
 3

	)

56 
	#GET_PRO
 2

	)

57 
	#FILE_PRO
 1

	)

58 
	#KEY_PRO
 0

	)

61 
OSTASK_STK
–
Dis
, 192 );

62 
OSTASK_STK
–
C™
, 128 );

63 
OSTASK_STK
–
BJ
, 96 );

64 
OSTASK_STK
–
Key
, 64 );

68 
OS_EVENT
 *
	gKey_Mbox
;

69 
OS_EVENT
 *
	gPro˚ssögMbox
;

72 
	grcomEº_å™s
;

73 
uöt16
 
__NOINIT__
 
	gMemSèπ
;

74 
uöt8
 
__NOINIT__
 
	gSound
;

75 
	gFúe_E«bÀ
;

76 
	gFúeC¡
;

77 vﬁ©ûê
	gADC_Lock
;

79 
	#VERSION_STR
 
	`__°rögify
(
HNAME
Ë" " __°rögify(
VERSION
Ë"." __°rögify–
PATCHLEVEL
 )

	)

82 
Inô_Devi˚s
();

83 
GŸoISP
();

85 
	$¥ötk_put
–
ch
, 
FILE
 * 
p_fûe
)

87 if–
ch
 == '\n' )

88 
	`U¨t_SídByã
( '\r' );

89 
	`U¨t_SídByã
–
ch
 );

91 
	}
}

94 
	$maö
 ()

96 
	`GŸoISP
();

97 
	`OSInô
();

98 
	`OSTASK_CREATE
–
Dis
, 4 );

99 
	`OSSèπ
();

101 
	}
}

106 
shñl
();

107 
	#LCDLED_DLY
 (30*2Ë

	)

108 
	$Dis_Task
()

110 
ªt
;

111 
uöt8
 
key
 = 0;

112 
uöt8
 
£nd
 = 
KEY_SY
;

113 
uöt8
 
îr
;

114 
uöt8
 *
pd
;

115 
dñay
;

117 
	`Inô_Devi˚s
();

119 
	`drcom_öô
();

121 
Fúe_E«bÀ
 = 0;

122 
FúeC¡
 = 0;

124 
ªt
 = 
LPC_SYSCON
->
SYSRSTSTAT
;

125 
	`¥ötk
("sysSèã %04x\n", 
ªt
 );

126 
LPC_SYSCON
->
SYSRSTSTAT
 = 0x1F;

129 
Pro˚ssögMbox
 = 
	`OSMboxCª©e
(
NULL
);

130 
Key_Mbox
 = 
	`OSMboxCª©e
(
NULL
);

132 if(
MemSèπ
 != 0x55AA)

134 
MemSèπ
 = 0x55AA;

135 
	`OSMboxPo°
–
Pro˚ssögMbox
, &
£nd
);

136 
Sound
 = 0;

138 
ADC_Lock
 = 0;

140 
	`GUI_Inô
();

143 
	`GUI_SëF⁄t
–&
GUIF⁄t16
 );

144 
	`Míu_Inô
();

145 
LCD_LED_ON
;

147 
ªt
 = 
	`OSTASK_CREATE
–
C™
, 1 );

148 
	`ASSERT
(
ªt
 =
OS_NO_ERR
);

149 
ªt
 = 
	`OSTASK_CREATE
–
BJ
, 3 );

150 
	`ASSERT
(
ªt
 =
OS_NO_ERR
);

151 
ªt
 = 
	`OSTASK_CREATE
–
Key
, 0 );

152 
	`ASSERT
–
ªt
 =
OS_NO_ERR
 );

154 
dñay
 = 6;

157 
key
 = 0;

158 
pd
 = 
	`OSMboxPíd
(
Key_Mbox
,
HZ
/2,&
îr
);

159 if–
îr
 =
OS_NO_ERR
 )

161 if–
LCD_LED_IN
 )

162 
key
 = *
pd
;

163 
LCD_LED_ON
;

164 
dñay
 = 
LCDLED_DLY
;

165 
Sound
 = 0;

166 }if–
LCD_LED_IN
 && 
dñay
)

168 
dñay
--;

169 if–
dñay
 == 0 )

171 if–
	`GŸo_MaöMíu
() )

173 
LCD_LED_OFF
;

176 
dñay
 = 
LCDLED_DLY
;

180 
	`Míu_Key
–
key
 );

181 
	`wdt_ª£t
();

183 
	}
}

185 
	#BJ_SECOND
 6

	)

186 
COMtime
;

187 
	$BJ_Task
()

189 
îrC¡
 = 0;

190 
busyC¡
 = 0;

191 
˛o£C¡
 = 0;

193 
rcomEº_å™s
 = 0;

194 
	`rcom_öô
();

195 
	`rcom_å™s
(0, 0, 1 );

196 
	`OSTimeDly
(
HZ
);

198 
	`rcom_gëwaô
()){

199 
RCOM_STATE_NOMAL
:

201 
RCOM_STATE_BUSY
:

202 
busyC¡
++;

204 
RCOM_STATE_ERROR
:

205 
îrC¡
++;

206 
busyC¡
 = 0;

208 
RCOM_STATE_CLOSE
:

209 
˛o£C¡
++;

213 if–
busyC¡
 > 
HZ
 )

215 
busyC¡
 = 0;

216 
îrC¡
 = 0;

217 
˛o£C¡
 = 0;

218 if–
	`PBI
–
rcomEº_å™s
, 0 ) )

221 if–
	`djPro_Tøns
–
DJ_CMD_SIGN_NOZXDL
, 
pU§Cfg
->
addªss
, 0, 0) )

222 
	`CBI
–
rcomEº_å™s
, 0 );

226 if–
˛o£C¡
 > 
HZ
 * 20 )

228 
˛o£C¡
 = 0;

229 
	`rcom_öô
();

230 
	`rcom_å™s
( 0, 0, 1 );

233 if–
îrC¡
 > 
HZ
*5 )

235 
˛o£C¡
 = 0;

236 
îrC¡
 = 0;

238 
	`rcom_˛o£
();

239 }if–
îrC¡
 > 
HZ
 )

241 if–!
	`PBI
–
rcomEº_å™s
, 0 ) )

244 if–
	`djPro_Tøns
–
DJ_CMD_SIGN_ZXDL
, 
pU§Cfg
->
addªss
, 0, 0) )

245 
	`SBI
–
rcomEº_å™s
, 0 );

249 
	`drcom_¥o˚ss
();

250 
	`OSTimeDly
(1);

252 
	}
}

254 
	$Key_Task
( )

256 
uöt8
 
key
=0;

257 
uöt8
 
tmp
;

258 
dñay
;

259 
	`OSTimeDly
(
HZ
);

262 
	`OSTimeDly
( 1 );

263 
tmp
 = 
KEY_IN
;

264 if–
tmp
 != 0 )

266 
	`OSTimeDly
–
HZ
/50 );

267 if–
tmp
 =
KEY_IN
 )

269  
tmp
 )

272 
key
 = 
KEY_CANCEL
;

275 
key
 = 
KEY_UP
;

278 
key
 = 
KEY_DOWN
;

281 
key
 = 
KEY_OK
;

284 
key
 = 
KEY_NULL
;

287 
	`OSMboxPo°
–
Key_Mbox
, &
key
 );

288 
dñay
 = 0;

289  
KEY_IN
 )

291 
	`OSTimeDly
( 1 );

292 
dñay
++;

293 if–
dñay
 >
HZ
*2 )

295 if–(
dñay
 % (
HZ
/4)) == 0 )

297 
key
 = 0;

298  
tmp
 )

301 
key
 = 
KEY_LEFT
;

304 
key
 = 
KEY_RIDTH
;

307 if–
key
 )

308 
	`OSMboxPo°
–
Key_Mbox
, &
key
 );

315 
	}
}

318 
	$C™_Task
()

320 
CAN_msg
 
msg
;

321 
CAN_msg
 
TxMsg
;

322 
dly
 = 10;

323 
td©a
 = 
HZ
;

324 
	`OSTimeDly
(
HZ
);

326 
	`¥ötk
( "\n" \

327 
VERSION_STR
 \

330 
TxMsg
.
Àn
 = 0;

333 if–
TxMsg
.
Àn
 == 0 )

335 
	`djPro_Gë
–&
TxMsg
 );

338 if–
	`CAN_wrMSG
–&
TxMsg
 ))

340 
TxMsg
.
Àn
 = 0;

343 
	`shñl
–
	`U¨t_GëCh¨_nb
() );

344 
	`CAN_GëEº
( 0 );

346  
	`CAN_rdMSG
(&
msg
) )

349 
	`djPro_Pro˚ssög
–&
msg
 );

351 
	`OSTimeDly
(1);

352 if–
dly
 )

354 
dly
--;

355 if–
dly
 == 0 )

357 
dly
 = 
HZ
 * 5;

358 
	`djPro_AutoTøns
();

362 if–--
td©a
 == 0 )

364 
td©a
 = 
HZ
;

365 
	`do‹Eº‹Timeöc
();

366 if–
AutoProc_time
 )

368 
AutoProc_time
--;

369 if–
AutoProc_time
 == 0 )

371 
	`d©a_autoProc
();

376 
	}
}

381 
	$Inô_Devi˚s
()

383 
OS_SREG_VAR
;

385 
	`OS_ENTER_CRITICAL
();

386 
	`BSP_Inô
();

388 
	`Sy°emC‹eClockUpd©e
();

389 
	`OS_CPU_SysTickInô
–
FCCLK
/
HZ
 );

390 
	`OS_EXIT_CRITICAL
();

392 
	`IO_Inô
();

394 
	`U¨t_Inô
( 115200 );

395 
	`¥ötk_£t
–
¥ötk_put
, 
NULL
 );

398 
	`i2c_öô
–
I2C_100K
 );

400 
	`wdt_öô
();

402 
	`U£rInô
();

404 
	`¥ötk
("add∏%d\n", 
pU§Cfg
->
addªss
);

405 
	`CAN_Inô
–
pU§Cfg
->
addªss
 , 5000 );

406 
	}
}

408 
	~"pcomm™d.h
"

413 #i‡
OS_TASK_HOOK_EN
 > 0

414 
	$OS_TaskIdÀ_Hook
()

416 
	`__WFI
();

417 
	}
}

421 
ª£t_cmd
();

422 
	$ª£t_cmd
()

424 
	`wdt_ª£t
();

425 
MemSèπ
 = 0;

426 
	`BSP_Re£t
();

428 
	}
}

429 
PSHELL_CMD
(
ª£t
, 
ª£t_cmd
, "reset");

	@app/main_mac.h

3 #i‚de‡
__MAIN_MAC_H__


4 
	#__MAIN_MAC_H__


	)

8 
	#KEY_NULL
 0

	)

9 
	#KEY_OK
 1

	)

10 
	#KEY_CANCEL
 2

	)

11 
	#KEY_DEC
 3

	)

12 
	#KEY_INC
 4

	)

13 
	#KEY_RELAY
 5

	)

15 
	#KEY_UP
 
KEY_INC


	)

16 
	#KEY_DOWN
 
KEY_DEC


	)

18 
	#KEY_BACK
 6

	)

19 
	#KEY_RESET
 7

	)

20 
	#KEY_SETADDR
 8

	)

21 
	#KEY_GET
 9

	)

22 
	#KEY_OUT
 10

	)

23 
	#KEY_COM
 11

	)

24 
	#KEY_REBOOT
 12

	)

25 
	#KEY_JZL
 13

	)

26 
	#KEY_JZH
 14

	)

27 
	#KEY_SETLD
 15

	)

28 
	#KEY_SET
 16

	)

29 
	#KEY_SY
 17

	)

32 
	#KEY_0
 '0'

	)

33 
	#KEY_1
 '1'

	)

34 
	#KEY_2
 '2'

	)

35 
	#KEY_3
 '3'

	)

36 
	#KEY_4
 '4'

	)

37 
	#KEY_5
 '5'

	)

38 
	#KEY_6
 '6'

	)

39 
	#KEY_7
 '7'

	)

40 
	#KEY_8
 '8'

	)

41 
	#KEY_9
 '9'

	)

43 
	#KEY_LEFT
 0xAA

	)

44 
	#KEY_RIDTH
 0xAB

	)

46 
	#KEY_MAIN
 0xAC

	)

47 
	#KEY_BJ
 0xAD

	)

48 
	#KEY_GZ
 0xAE

	)

49 
	#KEY_ERROR
 0xAF

	)

51 
	#KEY_GETTYPE
 0xB0

	)

	@app/os_cfg.h

20 #i‚de‡
__OSCFG_H__


21 
	#__OSCFG_H__


	)

23 
	#OS_TASKS
 5

25 

	)

26 
	#OS_TIME_PRO
 
OS_TASKS
-1

	)

27 
	#OS_TIME_STK_SIZE
 64

	)

29 
	#OS_TASK_HOOK_EN
 1

	)

30 
	#OS_TASK_IDLE_STK_SIZE
 32

	)

32 
	#OS_TICKS_PER_SEC
 200

	)

33 
	#HZ
 
OS_TICKS_PER_SEC


	)

35 
	#OS_EVENT_SIZE
 8

	)

37 
	#OS_ARG_CHK_EN
 0

	)

39 
	#OS_SEM_EN
 1

	)

40 
	#OS_MBOX_EN
 1

	)

42 
	#OS_Q_EN
 0

	)

43 
	#OS_Q_BUFFER_SIZE
 32

	)

44 
	#OS_Q_SIZE
 1

	)

45 
	#OS_Q_EXT_EN
 0

	)

47 
	#OS_MEM_EN
 0

	)

48 
	#OS_MAX_MEM_PART
 3

	)

51 
	#OS_TIME_EN
 0

	)

52 
	#OS_TIME_SIZE
 8

	)

55 
	#OSMAP_INFLASH
 0

	)

57 #i‡
OS_TASKS
 > 16

	@app/shell.c

2 
	#COMMAND_GLOBAL


	)

3 
	~"myty≥.h
"

4 
	~"pcomm™d.h
"

5 
	~<°rög.h
>

6 
	~"¥ötk.h
"

7 
	~"mi¸oOS.h
"

8 
	~"b•.h
"

12 
	#NUL
 0x00

13 
	#SOH
 0x01

14 
	#STX
 0x02

15 
	#ETX
 0x03

16 
	#EOT
 0x04

17 
	#ENQ
 0x05

18 
	#ACK
 0x06

19 
	#BEL
 0x07

20 
	#BS
 0x08

21 
	#HT
 0x09

22 
	#FF
 0x0C

23 
	#CR
 0x0D

24 
	#SO
 0x0E

25 
	#SI
 0x0F

26 
	#DLE
 0x10

27 
	#X_ON
 0x11

32 
	#X_OFF
 0x13

33 
	#NAK
 0x15

34 
	#SYN
 0x16

35 
	#ETB
 0x17

36 
	#CAN
 0x18

37 
	#ESC
 0x1B

38 
	#DEL
 0x7F

39 

	)

40 
	#EXIT_SHELL
 0xFFAA

41 

	)

42 
	#SHELL_EN


	)

45 #ifde‡
SHELL_EN


47 
	g°r
[64] ;

48 
	g˙t
 = 0;

51 
shñl
();

54 
uöt8
 
	$GëKey
–
öt16
 
d©
 )

56 if–
d©
 < 0 )  
FALSE
;

57 if–
˙t
 < (
°r
) )

59 
ãmp
 = 
d©
;

60 
ãmp
)

65 
GëKey_íd
;

66 
BS
:

67 if(
˙t
)

69 
˙t
--;

70 
	`PutCh¨
(
ãmp
);

71 
	`PutCh¨
(' ');

72 
	`PutCh¨
(
ãmp
);

76 if(
ãmp
 >= ' ')

78 
°r
[
˙t
++] = 
ãmp
;

79 
	`PutCh¨
(
ãmp
);

85 
GëKey_íd
:

86 
°r
[
˙t
] = '\0';

87 
	`PutCh¨
('\n');

88 
˙t
 = 0;

89 (
TRUE
);

91 (
FALSE
);

92 
	}
}

94 
	$shñl
(
ch
)

96 if(
	`GëKey
(
ch
))

98 
	`PCMD_°rög
(
°r
);

99 
	`¥ötk
("cmd>");

101 
	}
}

	@bsp/LPC11xx.h

21 #i‚de‡
__LPC11xx_H__


22 
	#__LPC11xx_H__


	)

24 #ifde‡
__˝lu•lus


49 
	#AHBCLK_SYS
 0

	)

50 
	#AHBCLK_ROM
 1

	)

51 
	#AHBCLK_RAM
 2

	)

52 
	#AHBCLK_FLASHREG
 3

	)

53 
	#AHBCLK_FLASHARRAY
 4

	)

54 
	#AHBCLK_I2C
 5

	)

55 
	#AHBCLK_GPIO
 6

	)

56 
	#AHBCLK_CT16B0
 7

	)

57 
	#AHBCLK_CT16B1
 8

	)

58 
	#AHBCLK_CT32B0
 9

	)

59 
	#AHBCLK_CT32B1
 10

	)

60 
	#AHBCLK_SSP0
 11

	)

61 
	#AHBCLK_UART
 12

	)

62 
	#AHBCLK_ADC
 13

	)

63 
	#AHBCLK_NC0
 14

	)

64 
	#AHBCLK_WDT
 15

	)

65 
	#AHBCLK_IOCON
 16

	)

66 
	#AHBCLK_CAN
 17

	)

67 
	#AHBCLK_SSP1
 18

	)

74 
	eIRQn


77 
N⁄MaskabÀI¡_IRQn
 = -14,

78 
H¨dFau…_IRQn
 = -13,

79 
SVCÆl_IRQn
 = -5,

80 
PídSV_IRQn
 = -2,

81 
SysTick_IRQn
 = -1,

84 
WAKEUP0_IRQn
 = 0,

85 
WAKEUP1_IRQn
 = 1,

86 
WAKEUP2_IRQn
 = 2,

87 
WAKEUP3_IRQn
 = 3,

88 
WAKEUP4_IRQn
 = 4,

89 
WAKEUP5_IRQn
 = 5,

90 
WAKEUP6_IRQn
 = 6,

91 
WAKEUP7_IRQn
 = 7,

92 
WAKEUP8_IRQn
 = 8,

93 
WAKEUP9_IRQn
 = 9,

94 
WAKEUP10_IRQn
 = 10,

95 
WAKEUP11_IRQn
 = 11,

96 
WAKEUP12_IRQn
 = 12,

97 
CAN_IRQn
 = 13,

98 
SSP1_IRQn
 = 14,

99 
I2C_IRQn
 = 15,

100 
TIMER_16_0_IRQn
 = 16,

101 
TIMER_16_1_IRQn
 = 17,

102 
TIMER_32_0_IRQn
 = 18,

103 
TIMER_32_1_IRQn
 = 19,

104 
SSP0_IRQn
 = 20,

105 
UART_IRQn
 = 21,

106 
Re£rved0_IRQn
 = 22,

107 
Re£rved1_IRQn
 = 23,

108 
ADC_IRQn
 = 24,

109 
WDT_IRQn
 = 25,

110 
BOD_IRQn
 = 26,

111 
FMC_IRQn
 = 27,

112 
EINT3_IRQn
 = 28,

113 
EINT2_IRQn
 = 29,

114 
EINT1_IRQn
 = 30,

115 
EINT0_IRQn
 = 31,

116 } 
	tIRQn_Ty≥
;

125 
	#__MPU_PRESENT
 0

	)

126 
	#__NVIC_PRIO_BITS
 2

	)

127 
	#__Víd‹_SysTickC⁄fig
 0

	)

132 
	~"c‹e_cm0.h
"

140 #i‡
deföed
 ( 
__CC_ARM
 )

141 #¥agm®
™⁄_uni⁄s


150 
__IO
 
uöt32_t
 
SYSMEMREMAP
;

151 
__IO
 
uöt32_t
 
PRESETCTRL
;

152 
__IO
 
uöt32_t
 
SYSPLLCTRL
;

153 
__IO
 
uöt32_t
 
SYSPLLSTAT
;

154 
uöt32_t
 
RESERVED0
[4];

156 
__IO
 
uöt32_t
 
SYSOSCCTRL
;

157 
__IO
 
uöt32_t
 
WDTOSCCTRL
;

158 
__IO
 
uöt32_t
 
IRCCTRL
;

159 
uöt32_t
 
RESERVED1
[1];

160 
__IO
 
uöt32_t
 
SYSRSTSTAT
;

161 
uöt32_t
 
RESERVED2
[3];

162 
__IO
 
uöt32_t
 
SYSPLLCLKSEL
;

163 
__IO
 
uöt32_t
 
SYSPLLCLKUEN
;

164 
uöt32_t
 
RESERVED3
[10];

166 
__IO
 
uöt32_t
 
MAINCLKSEL
;

167 
__IO
 
uöt32_t
 
MAINCLKUEN
;

168 
__IO
 
uöt32_t
 
SYSAHBCLKDIV
;

169 
uöt32_t
 
RESERVED4
[1];

171 
__IO
 
uöt32_t
 
SYSAHBCLKCTRL
;

172 
uöt32_t
 
RESERVED5
[4];

173 
__IO
 
uöt32_t
 
SSP0CLKDIV
;

174 
__IO
 
uöt32_t
 
UARTCLKDIV
;

175 
__IO
 
uöt32_t
 
SSP1CLKDIV
;

176 
uöt32_t
 
RESERVED6
[4];

178 
__IO
 
uöt32_t
 
SYSTICKCLKDIV
;

179 
uöt32_t
 
RESERVED7
[7];

181 
__IO
 
uöt32_t
 
WDTCLKSEL
;

182 
__IO
 
uöt32_t
 
WDTCLKUEN
;

183 
__IO
 
uöt32_t
 
WDTCLKDIV
;

184 
uöt32_t
 
RESERVED8
[1];

185 
__IO
 
uöt32_t
 
CLKOUTCLKSEL
;

186 
__IO
 
uöt32_t
 
CLKOUTUEN
;

187 
__IO
 
uöt32_t
 
CLKOUTDIV
;

188 
uöt32_t
 
RESERVED9
[5];

190 
__IO
 
uöt32_t
 
PIOPORCAP0
;

191 
__IO
 
uöt32_t
 
PIOPORCAP1
;

192 
uöt32_t
 
RESERVED10
[18];

193 
__IO
 
uöt32_t
 
BODCTRL
;

194 
__IO
 
uöt32_t
 
SYSTCKCAL
;

195 
uöt32_t
 
RESERVED12
[2];

196 
__IO
 
uöt32_t
 
MAINREGVOUT0CFG
;

197 
__IO
 
uöt32_t
 
MAINREGVOUT1CFG
;

198 
uöt32_t
 
RESERVED13
[38];

200 
__IO
 
uöt32_t
 
STARTAPRP0
;

201 
__IO
 
uöt32_t
 
STARTERP0
;

202 
__O
 
uöt32_t
 
STARTRSRP0CLR
;

203 
__IO
 
uöt32_t
 
STARTSRP0
;

204 
__IO
 
uöt32_t
 
STARTAPRP1
;

205 
__IO
 
uöt32_t
 
STARTERP1
;

206 
__O
 
uöt32_t
 
STARTRSRP1CLR
;

207 
__IO
 
uöt32_t
 
STARTSRP1
;

208 
uöt32_t
 
RESERVED17
[4];

210 
__IO
 
uöt32_t
 
PDSLEEPCFG
;

211 
__IO
 
uöt32_t
 
PDAWAKECFG
;

212 
__IO
 
uöt32_t
 
PDRUNCFG
;

213 
uöt32_t
 
RESERVED15
[101];

214 
__O
 
uöt32_t
 
VOUTCFGPROT
;

215 
uöt32_t
 
RESERVED16
[8];

216 
__I
 
uöt32_t
 
DEVICE_ID
;

217 } 
	tLPC_SYSCON_Ty≥Def
;

227 
__IO
 
uöt32_t
 
PIO2_6
;

228 
uöt32_t
 
RESERVED0
[1];

229 
__IO
 
uöt32_t
 
PIO2_0
;

230 
__IO
 
uöt32_t
 
RESET_PIO0_0
;

231 
__IO
 
uöt32_t
 
PIO0_1
;

232 
__IO
 
uöt32_t
 
PIO1_8
;

233 
uöt32_t
 
RESERVED1
[1];

234 
__IO
 
uöt32_t
 
PIO0_2
;

236 
__IO
 
uöt32_t
 
PIO2_7
;

237 
__IO
 
uöt32_t
 
PIO2_8
;

238 
__IO
 
uöt32_t
 
PIO2_1
;

239 
__IO
 
uöt32_t
 
PIO0_3
;

240 
__IO
 
uöt32_t
 
PIO0_4
;

241 
__IO
 
uöt32_t
 
PIO0_5
;

242 
__IO
 
uöt32_t
 
PIO1_9
;

243 
__IO
 
uöt32_t
 
PIO3_4
;

245 
__IO
 
uöt32_t
 
PIO2_4
;

246 
__IO
 
uöt32_t
 
PIO2_5
;

247 
__IO
 
uöt32_t
 
PIO3_5
;

248 
__IO
 
uöt32_t
 
PIO0_6
;

249 
__IO
 
uöt32_t
 
PIO0_7
;

250 
__IO
 
uöt32_t
 
PIO2_9
;

251 
__IO
 
uöt32_t
 
PIO2_10
;

252 
__IO
 
uöt32_t
 
PIO2_2
;

254 
__IO
 
uöt32_t
 
PIO0_8
;

255 
__IO
 
uöt32_t
 
PIO0_9
;

256 
__IO
 
uöt32_t
 
SWCLK_PIO0_10
;

257 
__IO
 
uöt32_t
 
PIO1_10
;

258 
__IO
 
uöt32_t
 
PIO2_11
;

259 
__IO
 
uöt32_t
 
R_PIO0_11
;

260 
__IO
 
uöt32_t
 
R_PIO1_0
;

261 
__IO
 
uöt32_t
 
R_PIO1_1
;

263 
__IO
 
uöt32_t
 
R_PIO1_2
;

264 
__IO
 
uöt32_t
 
PIO3_0
;

265 
__IO
 
uöt32_t
 
PIO3_1
;

266 
__IO
 
uöt32_t
 
PIO2_3
;

267 
__IO
 
uöt32_t
 
SWDIO_PIO1_3
;

268 
__IO
 
uöt32_t
 
PIO1_4
;

269 
__IO
 
uöt32_t
 
PIO1_11
;

270 
__IO
 
uöt32_t
 
PIO3_2
;

272 
__IO
 
uöt32_t
 
PIO1_5
;

273 
__IO
 
uöt32_t
 
PIO1_6
;

274 
__IO
 
uöt32_t
 
PIO1_7
;

275 
__IO
 
uöt32_t
 
PIO3_3
;

276 
__IO
 
uöt32_t
 
SCK_LOC
;

277 
__IO
 
uöt32_t
 
DSR_LOC
;

278 
__IO
 
uöt32_t
 
DCD_LOC
;

279 
__IO
 
uöt32_t
 
RI_LOC
;

280 } 
	tLPC_IOCON_Ty≥Def
;

290 
__IO
 
uöt32_t
 
PCON
;

291 
__IO
 
uöt32_t
 
GPREG0
;

292 
__IO
 
uöt32_t
 
GPREG1
;

293 
__IO
 
uöt32_t
 
GPREG2
;

294 
__IO
 
uöt32_t
 
GPREG3
;

295 
__IO
 
uöt32_t
 
GPREG4
;

296 } 
	tLPC_PMU_Ty≥Def
;

306 
__IO
 
uöt32_t
 
MASKED_ACCESS
[4096];

308 
uöt32_t
 
RESERVED0
[4095];

309 
__IO
 
uöt32_t
 
DATA
;

312 
uöt32_t
 
RESERVED1
[4096];

313 
__IO
 
uöt32_t
 
DIR
;

314 
__IO
 
uöt32_t
 
IS
;

315 
__IO
 
uöt32_t
 
IBE
;

316 
__IO
 
uöt32_t
 
IEV
;

317 
__IO
 
uöt32_t
 
IE
;

318 
__IO
 
uöt32_t
 
RIS
;

319 
__IO
 
uöt32_t
 
MIS
;

320 
__IO
 
uöt32_t
 
IC
;

321 } 
	tLPC_GPIO_Ty≥Def
;

330 
__IO
 
uöt32_t
 
IR
;

331 
__IO
 
uöt32_t
 
TCR
;

332 
__IO
 
uöt32_t
 
TC
;

333 
__IO
 
uöt32_t
 
PR
;

334 
__IO
 
uöt32_t
 
PC
;

335 
__IO
 
uöt32_t
 
MCR
;

336 
__IO
 
uöt32_t
 
MR0
;

337 
__IO
 
uöt32_t
 
MR1
;

338 
__IO
 
uöt32_t
 
MR2
;

339 
__IO
 
uöt32_t
 
MR3
;

340 
__IO
 
uöt32_t
 
CCR
;

341 
__I
 
uöt32_t
 
CR0
;

342 
uöt32_t
 
RESERVED1
[3];

343 
__IO
 
uöt32_t
 
EMR
;

344 
uöt32_t
 
RESERVED2
[12];

345 
__IO
 
uöt32_t
 
CTCR
;

346 
__IO
 
uöt32_t
 
PWMC
;

347 } 
	tLPC_TMR_Ty≥Def
;

358 
__I
 
uöt32_t
 
RBR
;

359 
__O
 
uöt32_t
 
THR
;

360 
__IO
 
uöt32_t
 
DLL
;

363 
__IO
 
uöt32_t
 
DLM
;

364 
__IO
 
uöt32_t
 
IER
;

367 
__I
 
uöt32_t
 
IIR
;

368 
__O
 
uöt32_t
 
FCR
;

370 
__IO
 
uöt32_t
 
LCR
;

371 
__IO
 
uöt32_t
 
MCR
;

372 
__I
 
uöt32_t
 
LSR
;

373 
__I
 
uöt32_t
 
MSR
;

374 
__IO
 
uöt32_t
 
SCR
;

375 
__IO
 
uöt32_t
 
ACR
;

376 
uöt32_t
 
RESERVED0
;

377 
__IO
 
uöt32_t
 
FDR
;

378 
uöt32_t
 
RESERVED1
;

379 
__IO
 
uöt32_t
 
TER
;

380 
uöt32_t
 
RESERVED2
[6];

381 
__IO
 
uöt32_t
 
RS485CTRL
;

382 
__IO
 
uöt32_t
 
ADRMATCH
;

383 
__IO
 
uöt32_t
 
RS485DLY
;

384 
__I
 
uöt32_t
 
FIFOLVL
;

385 } 
	tLPC_UART_Ty≥Def
;

395 
__IO
 
uöt32_t
 
CR0
;

396 
__IO
 
uöt32_t
 
CR1
;

397 
__IO
 
uöt32_t
 
DR
;

398 
__I
 
uöt32_t
 
SR
;

399 
__IO
 
uöt32_t
 
CPSR
;

400 
__IO
 
uöt32_t
 
IMSC
;

401 
__IO
 
uöt32_t
 
RIS
;

402 
__IO
 
uöt32_t
 
MIS
;

403 
__IO
 
uöt32_t
 
ICR
;

404 } 
	tLPC_SSP_Ty≥Def
;

414 
__IO
 
uöt32_t
 
CONSET
;

415 
__I
 
uöt32_t
 
STAT
;

416 
__IO
 
uöt32_t
 
DAT
;

417 
__IO
 
uöt32_t
 
ADR0
;

418 
__IO
 
uöt32_t
 
SCLH
;

419 
__IO
 
uöt32_t
 
SCLL
;

420 
__O
 
uöt32_t
 
CONCLR
;

421 
__IO
 
uöt32_t
 
MMCTRL
;

422 
__IO
 
uöt32_t
 
ADR1
;

423 
__IO
 
uöt32_t
 
ADR2
;

424 
__IO
 
uöt32_t
 
ADR3
;

425 
__I
 
uöt32_t
 
DATA_BUFFER
;

426 
__IO
 
uöt32_t
 
MASK0
;

427 
__IO
 
uöt32_t
 
MASK1
;

428 
__IO
 
uöt32_t
 
MASK2
;

429 
__IO
 
uöt32_t
 
MASK3
;

430 } 
	tLPC_I2C_Ty≥Def
;

440 
__IO
 
uöt32_t
 
MOD
;

441 
__IO
 
uöt32_t
 
TC
;

442 
__O
 
uöt32_t
 
FEED
;

443 
__I
 
uöt32_t
 
TV
;

444 
uöt32_t
 
RESERVED0
;

445 
__IO
 
uöt32_t
 
WARNINT
;

446 
__IO
 
uöt32_t
 
WINDOW
;

447 } 
	tLPC_WDT_Ty≥Def
;

457 
__IO
 
uöt32_t
 
CR
;

458 
__IO
 
uöt32_t
 
GDR
;

459 
uöt32_t
 
RESERVED0
;

460 
__IO
 
uöt32_t
 
INTEN
;

461 
__IO
 
uöt32_t
 
DR
[8];

462 
__I
 
uöt32_t
 
STAT
;

463 } 
	tLPC_ADC_Ty≥Def
;

473 
__IO
 
uöt32_t
 
CNTL
;

474 
__IO
 
uöt32_t
 
STAT
;

475 
__IO
 
uöt32_t
 
EC
;

476 
__IO
 
uöt32_t
 
BT
;

477 
__IO
 
uöt32_t
 
INT
;

478 
__IO
 
uöt32_t
 
TEST
;

479 
__IO
 
uöt32_t
 
BRPE
;

480 
uöt32_t
 
RESERVED0
;

481 
__IO
 
uöt32_t
 
IF1_CMDREQ
;

482 
__IO
 
uöt32_t
 
IF1_CMDMSK
;

483 
__IO
 
uöt32_t
 
IF1_MSK1
;

484 
__IO
 
uöt32_t
 
IF1_MSK2
;

485 
__IO
 
uöt32_t
 
IF1_ARB1
;

486 
__IO
 
uöt32_t
 
IF1_ARB2
;

487 
__IO
 
uöt32_t
 
IF1_MCTRL
;

488 
__IO
 
uöt32_t
 
IF1_DA1
;

489 
__IO
 
uöt32_t
 
IF1_DA2
;

490 
__IO
 
uöt32_t
 
IF1_DB1
;

491 
__IO
 
uöt32_t
 
IF1_DB2
;

492 
uöt32_t
 
RESERVED1
[13];

493 
__IO
 
uöt32_t
 
IF2_CMDREQ
;

494 
__IO
 
uöt32_t
 
IF2_CMDMSK
;

495 
__IO
 
uöt32_t
 
IF2_MSK1
;

496 
__IO
 
uöt32_t
 
IF2_MSK2
;

497 
__IO
 
uöt32_t
 
IF2_ARB1
;

498 
__IO
 
uöt32_t
 
IF2_ARB2
;

499 
__IO
 
uöt32_t
 
IF2_MCTRL
;

500 
__IO
 
uöt32_t
 
IF2_DA1
;

501 
__IO
 
uöt32_t
 
IF2_DA2
;

502 
__IO
 
uöt32_t
 
IF2_DB1
;

503 
__IO
 
uöt32_t
 
IF2_DB2
;

504 
uöt32_t
 
RESERVED2
[21];

505 
__I
 
uöt32_t
 
TXREQ1
;

506 
__I
 
uöt32_t
 
TXREQ2
;

507 
uöt32_t
 
RESERVED3
[6];

508 
__I
 
uöt32_t
 
ND1
;

509 
__I
 
uöt32_t
 
ND2
;

510 
uöt32_t
 
RESERVED4
[6];

511 
__I
 
uöt32_t
 
IR1
;

512 
__I
 
uöt32_t
 
IR2
;

513 
uöt32_t
 
RESERVED5
[6];

514 
__I
 
uöt32_t
 
MSGV1
;

515 
__I
 
uöt32_t
 
MSGV2
;

516 
uöt32_t
 
RESERVED6
[6];

517 
__IO
 
uöt32_t
 
CLKDIV
;

518 } 
	tLPC_CAN_Ty≥Def
;

521 #i‡
deföed
 ( 
__CC_ARM
 )

522 #¥agm®
no_™⁄_uni⁄s


529 
	#LPC_FLASH_BASE
 (0x00000000UL)

	)

530 
	#LPC_RAM_BASE
 (0x10000000UL)

	)

531 
	#LPC_APB0_BASE
 (0x40000000UL)

	)

532 
	#LPC_AHB_BASE
 (0x50000000UL)

	)

535 
	#LPC_I2C_BASE
 (
LPC_APB0_BASE
 + 0x00000)

	)

536 
	#LPC_WDT_BASE
 (
LPC_APB0_BASE
 + 0x04000)

	)

537 
	#LPC_UART_BASE
 (
LPC_APB0_BASE
 + 0x08000)

	)

538 
	#LPC_CT16B0_BASE
 (
LPC_APB0_BASE
 + 0x0C000)

	)

539 
	#LPC_CT16B1_BASE
 (
LPC_APB0_BASE
 + 0x10000)

	)

540 
	#LPC_CT32B0_BASE
 (
LPC_APB0_BASE
 + 0x14000)

	)

541 
	#LPC_CT32B1_BASE
 (
LPC_APB0_BASE
 + 0x18000)

	)

542 
	#LPC_ADC_BASE
 (
LPC_APB0_BASE
 + 0x1C000)

	)

543 
	#LPC_PMU_BASE
 (
LPC_APB0_BASE
 + 0x38000)

	)

544 
	#LPC_SSP0_BASE
 (
LPC_APB0_BASE
 + 0x40000)

	)

545 
	#LPC_IOCON_BASE
 (
LPC_APB0_BASE
 + 0x44000)

	)

546 
	#LPC_SYSCON_BASE
 (
LPC_APB0_BASE
 + 0x48000)

	)

547 
	#LPC_CAN_BASE
 (
LPC_APB0_BASE
 + 0x50000)

	)

548 
	#LPC_SSP1_BASE
 (
LPC_APB0_BASE
 + 0x58000)

	)

551 
	#LPC_GPIO_BASE
 (
LPC_AHB_BASE
 + 0x00000)

	)

552 
	#LPC_GPIO0_BASE
 (
LPC_AHB_BASE
 + 0x00000)

	)

553 
	#LPC_GPIO1_BASE
 (
LPC_AHB_BASE
 + 0x10000)

	)

554 
	#LPC_GPIO2_BASE
 (
LPC_AHB_BASE
 + 0x20000)

	)

555 
	#LPC_GPIO3_BASE
 (
LPC_AHB_BASE
 + 0x30000)

	)

560 
	#LPC_I2C
 ((
LPC_I2C_Ty≥Def
 *Ë
LPC_I2C_BASE
 )

	)

561 
	#LPC_WDT
 ((
LPC_WDT_Ty≥Def
 *Ë
LPC_WDT_BASE
 )

	)

562 
	#LPC_UART
 ((
LPC_UART_Ty≥Def
 *Ë
LPC_UART_BASE
 )

	)

563 
	#LPC_TMR16B0
 ((
LPC_TMR_Ty≥Def
 *Ë
LPC_CT16B0_BASE
)

	)

564 
	#LPC_TMR16B1
 ((
LPC_TMR_Ty≥Def
 *Ë
LPC_CT16B1_BASE
)

	)

565 
	#LPC_TMR32B0
 ((
LPC_TMR_Ty≥Def
 *Ë
LPC_CT32B0_BASE
)

	)

566 
	#LPC_TMR32B1
 ((
LPC_TMR_Ty≥Def
 *Ë
LPC_CT32B1_BASE
)

	)

567 
	#LPC_ADC
 ((
LPC_ADC_Ty≥Def
 *Ë
LPC_ADC_BASE
 )

	)

568 
	#LPC_PMU
 ((
LPC_PMU_Ty≥Def
 *Ë
LPC_PMU_BASE
 )

	)

569 
	#LPC_SSP0
 ((
LPC_SSP_Ty≥Def
 *Ë
LPC_SSP0_BASE
 )

	)

570 
	#LPC_SSP1
 ((
LPC_SSP_Ty≥Def
 *Ë
LPC_SSP1_BASE
 )

	)

571 
	#LPC_CAN
 ((
LPC_CAN_Ty≥Def
 *Ë
LPC_CAN_BASE
 )

	)

572 
	#LPC_IOCON
 ((
LPC_IOCON_Ty≥Def
 *Ë
LPC_IOCON_BASE
 )

	)

573 
	#LPC_SYSCON
 ((
LPC_SYSCON_Ty≥Def
 *Ë
LPC_SYSCON_BASE
)

	)

574 
	#LPC_GPIO0
 ((
LPC_GPIO_Ty≥Def
 *Ë
LPC_GPIO0_BASE
 )

	)

575 
	#LPC_GPIO1
 ((
LPC_GPIO_Ty≥Def
 *Ë
LPC_GPIO1_BASE
 )

	)

576 
	#LPC_GPIO2
 ((
LPC_GPIO_Ty≥Def
 *Ë
LPC_GPIO2_BASE
 )

	)

577 
	#LPC_GPIO3
 ((
LPC_GPIO_Ty≥Def
 *Ë
LPC_GPIO3_BASE
 )

	)

579 #ifde‡
__˝lu•lus


	@bsp/LPC11xx_mac.h

3 #i‚de‡
__LPC11XX_MAC_H__


4 
	#__LPC11XX_MAC_H__


	)

6 
	~"LPC11xx.h
"

7 
	~"myty≥.h
"

12 #i‚de‡
BIT


13 
	#BIT
(
a
Ë(1<<◊))

	)

16 #i‚de‡
SBI


17 
	#SBI
(
p‹t
, 
bô
Ë(’‹tË|(1 << (bô)))

	)

20 #i‚de‡
CBI


21 
	#CBI
(
p‹t
, 
bô
Ë(’‹tË&~(1 << (bô)))

	)

24 #i‚de‡
PBI


25 
	#PBI
(
pö
, 
bô
Ë((’öË& (1 << (bô))))

	)

28 #i‚de‡
NBI


29 
	#NBI
(
p‹t
, 
bô
Ë(’‹tË^(1 << (bô)))

	)

37 #i‚de‡
MYLIB_CONCAT


38 
	#MYLIB_CONCAT
(
a
, 
b
Ë®## 
	)
b

39 
	#MYLIB_CONCAT_EXPANDED
(
a
, 
b
Ë
	`MYLIB_CONCAT
◊, b)

	)

42 #i‚de‡
SBI_P


43 
	#DATA_PORT
(
«me
Ë
	`MYLIB_CONCAT
(
LPC_GPIO
,Çame)->
DATA


	)

44 
	#DDRP
(
«me
Ë
	`MYLIB_CONCAT
(
LPC_GPIO
,Çame)->
DIR


	)

45 
	#DDRPORT
–
«me
 ) 
	`DDRP
–«mê)

	)

47 
	#PIN
(
«me
 ) 
	`DATA_PORT
“ame)

	)

48 
	#PORT
–
«me
 ) 
	`DATA_PORT
–«mê)

	)

50 
	#PORT_IN
–
pö
, 
bô
 ) 
	`CBI
–
	`DDRP
–pö ), bô)

	)

51 
	#PORT_OUT
–
pö
, 
bô
Ë
	`SBI
–
	`DDRP
–pö ), bô)

	)

52 
	#PBI_P
(
pö
, 
bô
Ë
	`PBI
–
	`PIN
–pö ), bô)

	)

53 
	#NBI_P
(
pö
, 
bô
Ëif(
	`PBI_P
’ö,bô)Ë{ 
	`CBI_P
’ö,bô); } { 
	`SBI_P
’ö,bô); }

	)

54 
	#SBI_P
(
pö
, 
bô
Ë
	`SBI
–
	`DATA_PORT
’ö), bô )

	)

55 
	#CBI_P
(
pö
, 
bô
Ë
	`CBI
–
	`DATA_PORT
’ö), bô )

	)

58 
	#SETPORT
–
pö
, 
bô
 ) 
	`SBI_P
–pö, bô )

	)

59 
	#CLRPORT
–
pö
, 
bô
 ) 
	`CBI_P
–pö, bô )

	)

66 
	#SYSAHBCLKCTRL_SET
–
bô
 ) 
	`SBI
–
LPC_SYSCON
->
SYSAHBCLKCTRL
, bô )

	)

67 
	#SYSAHBCLKCTRL_CLR
–
bô
 ) 
	`CBI
–
LPC_SYSCON
->
SYSAHBCLKCTRL
, bô )

	)

69 
	#AHBCLK_SYS
 0

	)

70 
	#AHBCLK_ROM
 1

	)

71 
	#AHBCLK_RAM
 2

	)

72 
	#AHBCLK_FLASH1
 3

	)

73 
	#AHBCLK_FLASH2
 4

	)

74 
	#AHBCLK_I2C
 5

	)

75 
	#AHBCLK_GPIO
 6

	)

76 
	#AHBCLK_CT16B0
 7

	)

77 
	#AHBCLK_CT16B1
 8

	)

78 
	#AHBCLK_CT32B0
 9

	)

79 
	#AHBCLK_CT32B1
 10

	)

80 
	#AHBCLK_SSP0
 11

	)

81 
	#AHBCLK_UART
 12

	)

82 
	#AHBCLK_ADC
 13

	)

83 
	#AHBCLK_USB_RGG
 14

	)

84 
	#AHBCLK_WDT
 15

	)

85 
	#AHBCLK_IOCON
 16

	)

86 
	#AHBCLK_SSP1
 18

	)

92 #i‚de‡
PRIO_ZERO


93 
	#PRIO_ZERO
 (0x00Ë

	)

94 
	#PRIO_ONE
 (0x01 << 5Ë

	)

95 
	#PRIO_TWO
 (0x02 << 5Ë

	)

96 
	#PRIO_THREE
 (0x03 << 5Ë

	)

97 
	#PRIO_FOUR
 (0x04 << 5Ë

	)

98 
	#PRIO_FIVE
 (0x05 << 5Ë

	)

99 
	#PRIO_SIX
 (0x06 << 5Ë

	)

100 
	#PRIO_SEVEN
 (0x07 << 5Ë

	)

	@bsp/bsp.c

4 
	#BS_GLOBAL


	)

5 
	~"myty≥.h
"

6 
	~"b•.h
"

7 
	~"b•_öt.h
"

9 
	~"≠p_cfg.h
"

10 
	~"rom_≠i.h
"

11 
	~"sy°em_LPC11xx.h
"

15 *
__GpvVe˘‹TabÀ
[];

17 
	$BSP_Inô
()

20 vﬁ©ûê
uöt32
 
i
, 
uiRegVÆ
;

22 
LPC_SYSCON
->
SYSMEMREMAP
 = 0x02;

23 
LPC_SYSCON
->
SYSOSCCTRL
 = 0x00;

25 
LPC_SYSCON
->
PDRUNCFG
 &= ~(0x1ul << 5);

26  
i
 = 0; i < 0x100; i++ ) {

28 
LPC_SYSCON
->
SYSPLLCLKSEL
 = 
MAIN_CLKSRCSEL_VALUE
;

29 
LPC_SYSCON
->
SYSPLLCLKUEN
 = 0x00;

30 
LPC_SYSCON
->
SYSPLLCLKUEN
 = 0x01;

31 !(
LPC_SYSCON
->
SYSPLLCLKUEN
 & 0x01)) {

33 
uiRegVÆ
 = 
LPC_SYSCON
->
SYSPLLCTRL
;

34 
uiRegVÆ
 &= ~0x1FF;

35 
LPC_SYSCON
->
SYSPLLCTRL
 = (
uiRegVÆ
 | (
PLL_PVALUE
 << 5Ë| 
PLL_MVALUE
);

36 
LPC_SYSCON
->
PDRUNCFG
 &= ~(0x01ul << 7);

37 !(
LPC_SYSCON
->
SYSPLLSTAT
 & 0x01)){

39 
LPC_SYSCON
->
MAINCLKSEL
 = 0x03;

40 
LPC_SYSCON
->
MAINCLKUEN
 = 0x01;

41 
LPC_SYSCON
->
MAINCLKUEN
 = 0x00;

42 
LPC_SYSCON
->
MAINCLKUEN
 = 0x01;

43 !(
LPC_SYSCON
->
MAINCLKUEN
 & 0x01)) {

45 
LPC_SYSCON
->
SYSAHBCLKDIV
 = 
SYS_AHB_DIV_VALUE
;

49 
	`Sy°emInô
();

52 
uöt32
 
cmd
[4], 
ªsu…
[2];

54 
cmd
[0] = 12000;

55 
cmd
[1] = 48000;

56 
cmd
[2] = 
CPU_FREQ_EQU
;

57 
cmd
[3] = 0;

58 
PROM
->
pWRD
->
	`£t_∂l
–
cmd
, 
ªsu…
 );

62 
LPC_SYSCON
->
SYSAHBCLKCTRL
 |= (1ul << 16)

68 
	}
}

71 
	$pöInô
 ()

73 
LPC_GPIO3
->
DIR
 = 0;

74 
LPC_GPIO2
->
DIR
 = 0;

75 
LPC_GPIO1
->
DIR
 = 0;

76 
LPC_GPIO0
->
DIR
 = 0;

78 
LPC_GPIO0
->
DATA
 = 0x3FF;

79 
LPC_GPIO1
->
DATA
 = 0x3FF;

80 
LPC_GPIO2
->
DATA
 = 0x3FF;

81 
LPC_GPIO0
->
DATA
 = 0x3FF;

83 
LPC_IOCON
->
RESET_PIO0_0
 = 
PIO0_0_CON
;

84 
LPC_IOCON
->
PIO0_1
 = 
PIO0_1_CON
;

85 
LPC_IOCON
->
PIO0_2
 = 
PIO0_2_CON
;

86 
LPC_IOCON
->
PIO0_3
 = 
PIO0_3_CON
;

87 
LPC_IOCON
->
PIO0_4
 = 
PIO0_4_CON
;

88 
LPC_IOCON
->
PIO0_5
 = 
PIO0_5_CON
;

89 
LPC_IOCON
->
PIO0_6
 = 
PIO0_6_CON
;

90 
LPC_IOCON
->
PIO0_7
 = 
PIO0_7_CON
;

91 
LPC_IOCON
->
PIO0_8
 = 
PIO0_8_CON
;

92 
LPC_IOCON
->
PIO0_9
 = 
PIO0_9_CON
;

93 
LPC_IOCON
->
SWCLK_PIO0_10
 = 
PIO0_10_CON
;

94 
LPC_IOCON
->
R_PIO0_11
 = 
PIO0_11_CON
;

96 
LPC_IOCON
->
R_PIO1_0
 = 
PIO1_0_CON
;

97 
LPC_IOCON
->
R_PIO1_1
 = 
PIO1_1_CON
;

98 
LPC_IOCON
->
R_PIO1_2
 = 
PIO1_2_CON
;

99 
LPC_IOCON
->
SWDIO_PIO1_3
 = 
PIO1_3_CON
;

100 
LPC_IOCON
->
PIO1_4
 = 
PIO1_4_CON
;

101 
LPC_IOCON
->
PIO1_5
 = 
PIO1_5_CON
;

102 
LPC_IOCON
->
PIO1_6
 = 
PIO1_6_CON
;

103 
LPC_IOCON
->
PIO1_7
 = 
PIO1_7_CON
;

104 
LPC_IOCON
->
PIO1_8
 = 
PIO1_8_CON
;

105 
LPC_IOCON
->
PIO1_9
 = 
PIO1_9_CON
;

106 
LPC_IOCON
->
PIO1_10
 = 
PIO1_10_CON
;

107 
LPC_IOCON
->
PIO1_11
 = 
PIO1_11_CON
;

109 
LPC_IOCON
->
PIO2_0
 = 
PIO2_0_CON
;

110 
LPC_IOCON
->
PIO2_1
 = 
PIO2_1_CON
;

111 
LPC_IOCON
->
PIO2_2
 = 
PIO2_2_CON
;

112 
LPC_IOCON
->
PIO2_3
 = 
PIO2_3_CON
;

113 
LPC_IOCON
->
PIO2_4
 = 
PIO2_4_CON
;

114 
LPC_IOCON
->
PIO2_5
 = 
PIO2_5_CON
;

115 
LPC_IOCON
->
PIO2_6
 = 
PIO2_6_CON
;

116 
LPC_IOCON
->
PIO2_7
 = 
PIO2_7_CON
;

117 
LPC_IOCON
->
PIO2_8
 = 
PIO2_8_CON
;

118 
LPC_IOCON
->
PIO2_9
 = 
PIO2_9_CON
;

119 
LPC_IOCON
->
PIO2_10
 = 
PIO2_10_CON
;

120 
LPC_IOCON
->
PIO2_11
 = 
PIO2_11_CON
;

122 
LPC_IOCON
->
PIO3_0
 = 
PIO3_0_CON
;

123 
LPC_IOCON
->
PIO3_1
 = 
PIO3_1_CON
;

124 
LPC_IOCON
->
PIO3_2
 = 
PIO3_2_CON
;

125 
LPC_IOCON
->
PIO3_3
 = 
PIO3_3_CON
;

126 
LPC_IOCON
->
PIO3_4
 = 
PIO3_4_CON
;

127 
LPC_IOCON
->
PIO3_5
 = 
PIO3_5_CON
;

128 
	}
}

134 
	$BSP_Re£t
 ()

136 
	`NVIC_Sy°emRe£t
();

137 
	}
}

	@bsp/bsp.h

4 #i‚de‡
__BSP_H__


5 
	#__BSP_H__


	)

7 
	~"LPC11xx.h
"

8 
	~"LPC11xx_mac.h
"

10 
	~"sy°em_LPC11xx.h
"

15 
	#MAIN_CLKSRCSEL_VALUE
 1

	)

19 
	#FOSC
 12000000

	)

21 
	#FCCLK
 
Sy°emC‹eClock


	)

22 
	#SYS_AHB_DIV_VALUE
 1

	)

23 
	#FAHBCLK
 (
FCCLK
 / 
SYS_AHB_DIV_VALUE
Ë

	)

24 
	#FPCLK
 
Sy°emC‹eClock


	)

27 
	#SÀï
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("WFI")

	)

28 
	#NOP
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("n›")

	)

29 
	#n›
(Ë
	`NOP
()

	)

31 
BSP_Inô
 ();

32 
BSP_Re£t
 ();

33 
	#ª£tMCU
 
BSP_Re£t


	)

	@bsp/bsp_int.c

2 
	~"myty≥.h
"

3 
	~"≠p_cfg.h
"

5 
	$uöt32
 (*
	tTsvc_func
)(
	tuöt32
, uint32, uint32, uint32);

7 
__WEAK__


8 c⁄° * 
svc_fun˘i⁄
[
MAX_SVC_SIZE
]={
NULL
};

17 
uöt32
 
svc_h™dÀr_exp‹t
–uöt32 * 
pwdSF
);

18 
uöt32
 
	$svc_h™dÀr_exp‹t
–
uöt32
 * 
pwdSF
)

20 
Tsvc_func
 
svc_func
 = 
NULL
;

21 
uöt32
 
svc_numbî
;

32 
svc_numbî
 = ((*Ë
pwdSF
[6])[-2];

35 if–
svc_numbî
 < 
MAX_SVC_SIZE
 )

36 
svc_func
 = 
svc_fun˘i⁄
[
svc_numbî
];

38 if–
svc_func
 !
NULL
)

39 
pwdSF
[0] = 
	`svc_func
(ÖwdSF[0],ÖwdSF[1],ÖwdSF[2],ÖwdSF[3]);

41 
pwdSF
[0] = 0;

44 
	}
}

62 #i‚de‡
BFSR


63 
	#BFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED29)

	)

64 
	#UFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED2A)

	)

65 
	#HFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED2C)

	)

66 
	#DFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED30)

	)

67 
	#AFSR
 ((vﬁ©ûê
uöt32
 *Ë0xE000ED3C)

	)

69 
H¨dFau…H™dÀ_c
–
uöt32
 *
h¨dÁu…_¨gs
, uöt32 
i
);

70 
	$H¨dFau…H™dÀ_c
–
uöt32
 *
h¨dÁu…_¨gs
, uöt32 
i
)

72  
i
)

75 
	`¥_debug
("Handle hard fault ISR\n");

78 
	`¥_debug
("Handle memory fault ISR\n");

81 
	`¥_debug
("handle bus fault ISR\n");

84 
	`¥_debug
( "Handle usage fault ISR\n");

87 
	`¥_debug
("Handle spurious interrupt\n");

90 
	`¥_debug
("R0 = 0x%08x\n", 
h¨dÁu…_¨gs
[0]);

91 
	`¥_debug
("R1 = 0x%08x\n", 
h¨dÁu…_¨gs
[1]);

92 
	`¥_debug
("R2 = 0x%08x\n", 
h¨dÁu…_¨gs
[2]);

93 
	`¥_debug
("R3 = 0x%08x\n", 
h¨dÁu…_¨gs
[3]);

94 
	`¥_debug
("R120x%08x\n", 
h¨dÁu…_¨gs
[4]);

95 
	`¥_debug
("LR = 0x%08x\n", 
h¨dÁu…_¨gs
[5]);

96 
	`¥_debug
("PC = 0x%08x\n", 
h¨dÁu…_¨gs
[6]);

97 
	`¥_debug
("PSR0x%08x\n", 
h¨dÁu…_¨gs
[7]);

98 
	`¥_debug
("BFAR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED38)));

99 
	`¥_debug
("CFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED28)));

100 
	`¥_debug
("HFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED2C)));

101 
	`¥_debug
("DFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED30)));

102 
	`¥_debug
("AFSR0x%08x\n", (*((vﬁ©ûê
uöt32
 *) 0xE000ED3C)));

104 
	}
}

	@bsp/bsp_int.h

2 #i‚de‡
__BSP_INT_H__


3 
	#__BSP_INT_H__


	)

5 
	#__SVC_FUNC
–
func
, 
SVC_˙t
 ) \

6 
	`func
(); \

7 
	`func
() { \

8 
asm
 vﬁ©ûê("SVC " 
	`__°rögify
(
SVC_˙t
Ë"\n"); }

	)

	@bsp/core_cm0.h

26 #i‚de‡
__CM0_CORE_H__


27 
	#__CM0_CORE_H__


	)

47 #ifde‡
__˝lu•lus


51 
	#__CM0_CMSIS_VERSION_MAIN
 (0x01Ë

	)

52 
	#__CM0_CMSIS_VERSION_SUB
 (0x30Ë

	)

53 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM0_CMSIS_VERSION_SUB
Ë

	)

55 
	#__CORTEX_M
 (0x00Ë

	)

57 
	~<°döt.h
>

59 #i‡
deföed
 (
__ICCARM__
)

60 
	~<öåösics.h
>

64 #i‚de‡
__NVIC_PRIO_BITS


65 
	#__NVIC_PRIO_BITS
 2

	)

77 #ifde‡
__˝lu•lus


78 
	#__I
 vﬁ©ûê

	)

80 
	#__I
 vﬁ©ûêc⁄°

	)

82 
	#__O
 vﬁ©ûê

	)

83 
	#__IO
 vﬁ©ûê

	)

101 
__IO
 
uöt32_t
 
ISER
[1];

102 
uöt32_t
 
RESERVED0
[31];

103 
__IO
 
uöt32_t
 
ICER
[1];

104 
uöt32_t
 
RSERVED1
[31];

105 
__IO
 
uöt32_t
 
ISPR
[1];

106 
uöt32_t
 
RESERVED2
[31];

107 
__IO
 
uöt32_t
 
ICPR
[1];

108 
uöt32_t
 
RESERVED3
[31];

109 
uöt32_t
 
RESERVED4
[64];

110 
__IO
 
uöt32_t
 
IPR
[8];

111 } 
	tNVIC_Ty≥
;

121 
__I
 
uöt32_t
 
CPUID
;

122 
__IO
 
uöt32_t
 
ICSR
;

123 
uöt32_t
 
RESERVED0
;

124 
__IO
 
uöt32_t
 
AIRCR
;

125 
__IO
 
uöt32_t
 
SCR
;

126 
__IO
 
uöt32_t
 
CCR
;

127 
uöt32_t
 
RESERVED1
;

128 
__IO
 
uöt32_t
 
SHP
[2];

129 
__IO
 
uöt32_t
 
SHCSR
;

130 
uöt32_t
 
RESERVED2
[2];

131 
__IO
 
uöt32_t
 
DFSR
;

132 } 
	tSCB_Ty≥
;

135 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

136 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFu»<< 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

138 
	#SCB_CPUID_VARIANT_Pos
 20

	)

139 
	#SCB_CPUID_VARIANT_Msk
 (0xFu»<< 
SCB_CPUID_VARIANT_Pos
Ë

	)

141 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

142 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFu»<< 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

144 
	#SCB_CPUID_PARTNO_Pos
 4

	)

145 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFu»<< 
SCB_CPUID_PARTNO_Pos
Ë

	)

147 
	#SCB_CPUID_REVISION_Pos
 0

	)

148 
	#SCB_CPUID_REVISION_Msk
 (0xFu»<< 
SCB_CPUID_REVISION_Pos
Ë

	)

151 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

152 
	#SCB_ICSR_NMIPENDSET_Msk
 (1u»<< 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

154 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

155 
	#SCB_ICSR_PENDSVSET_Msk
 (1u»<< 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

157 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

158 
	#SCB_ICSR_PENDSVCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

160 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

161 
	#SCB_ICSR_PENDSTSET_Msk
 (1u»<< 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

163 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

164 
	#SCB_ICSR_PENDSTCLR_Msk
 (1u»<< 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

166 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

167 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1u»<< 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

169 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

170 
	#SCB_ICSR_ISRPENDING_Msk
 (1u»<< 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

172 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

173 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

175 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

176 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFu»<< 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

179 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

180 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

182 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

183 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFu»<< 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

185 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

186 
	#SCB_AIRCR_ENDIANESS_Msk
 (1u»<< 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

188 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

189 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1u»<< 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

191 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

192 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1u»<< 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

195 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

196 
	#SCB_SCR_SEVONPEND_Msk
 (1u»<< 
SCB_SCR_SEVONPEND_Pos
Ë

	)

198 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

199 
	#SCB_SCR_SLEEPDEEP_Msk
 (1u»<< 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

201 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

202 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1u»<< 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

205 
	#SCB_CCR_STKALIGN_Pos
 9

	)

206 
	#SCB_CCR_STKALIGN_Msk
 (1u»<< 
SCB_CCR_STKALIGN_Pos
Ë

	)

208 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

209 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1u»<< 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

212 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

213 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1u»<< 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

216 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

217 
	#SCB_DFSR_EXTERNAL_Msk
 (1u»<< 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

219 
	#SCB_DFSR_VCATCH_Pos
 3

	)

220 
	#SCB_DFSR_VCATCH_Msk
 (1u»<< 
SCB_DFSR_VCATCH_Pos
Ë

	)

222 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

223 
	#SCB_DFSR_DWTTRAP_Msk
 (1u»<< 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

225 
	#SCB_DFSR_BKPT_Pos
 1

	)

226 
	#SCB_DFSR_BKPT_Msk
 (1u»<< 
SCB_DFSR_BKPT_Pos
Ë

	)

228 
	#SCB_DFSR_HALTED_Pos
 0

	)

229 
	#SCB_DFSR_HALTED_Msk
 (1u»<< 
SCB_DFSR_HALTED_Pos
Ë

	)

239 
__IO
 
uöt32_t
 
CTRL
;

240 
__IO
 
uöt32_t
 
LOAD
;

241 
__IO
 
uöt32_t
 
VAL
;

242 
__I
 
uöt32_t
 
CALIB
;

243 } 
	tSysTick_Ty≥
;

246 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

247 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1u»<< 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

249 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

250 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1u»<< 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

252 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

253 
	#SysTick_CTRL_TICKINT_Msk
 (1u»<< 
SysTick_CTRL_TICKINT_Pos
Ë

	)

255 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

256 
	#SysTick_CTRL_ENABLE_Msk
 (1u»<< 
SysTick_CTRL_ENABLE_Pos
Ë

	)

259 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

260 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFu»<< 
SysTick_LOAD_RELOAD_Pos
Ë

	)

263 
	#SysTick_VAL_CURRENT_Pos
 0

	)

264 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

267 
	#SysTick_CALIB_NOREF_Pos
 31

	)

268 
	#SysTick_CALIB_NOREF_Msk
 (1u»<< 
SysTick_CALIB_NOREF_Pos
Ë

	)

270 
	#SysTick_CALIB_SKEW_Pos
 30

	)

271 
	#SysTick_CALIB_SKEW_Msk
 (1u»<< 
SysTick_CALIB_SKEW_Pos
Ë

	)

273 
	#SysTick_CALIB_TENMS_Pos
 0

	)

274 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFu»<< 
SysTick_VAL_CURRENT_Pos
Ë

	)

284 
__IO
 
uöt32_t
 
DHCSR
;

285 
__O
 
uöt32_t
 
DCRSR
;

286 
__IO
 
uöt32_t
 
DCRDR
;

287 
__IO
 
uöt32_t
 
DEMCR
;

288 } 
	tC‹eDebug_Ty≥
;

291 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

292 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFu»<< 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

294 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

295 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

297 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

298 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

300 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

301 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

303 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

304 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

306 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

307 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

309 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

310 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1u»<< 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

312 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

313 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

315 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

316 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

318 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

319 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

321 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

322 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1u»<< 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

325 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

326 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1u»<< 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

328 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

329 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1Fu»<< 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

332 
	#C‹eDebug_DEMCR_DWTENA_Pos
 24

	)

333 
	#C‹eDebug_DEMCR_DWTENA_Msk
 (1u»<< 
C‹eDebug_DEMCR_DWTENA_Pos
Ë

	)

335 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

336 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

338 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

339 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1u»<< 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

344 
	#SCS_BASE
 (0xE000E000Ë

	)

345 
	#C‹eDebug_BASE
 (0xE000EDF0Ë

	)

346 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010Ë

	)

347 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100Ë

	)

348 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00Ë

	)

350 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
Ë

	)

351 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
Ë

	)

352 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
Ë

	)

353 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

362 #i‡
deföed
 ( 
__CC_ARM
 )

363 
	#__ASM
 
__asm


	)

364 
	#__INLINE
 
__ölöe


	)

366 #ñi‡
deföed
 ( 
__ICCARM__
 )

367 
	#__ASM
 
__asm


	)

368 
	#__INLINE
 
ölöe


	)

370 #ñi‡
deföed
 ( 
__GNUC__
 )

371 
	#__ASM
 
__asm


	)

372 
	#__INLINE
 
ölöe


	)

374 #ñi‡
deföed
 ( 
__TASKING__
 )

375 
	#__ASM
 
__asm


	)

376 
	#__INLINE
 
ölöe


	)

383 #i‡
deföed
 ( 
__CC_ARM
 )

386 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

387 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

389 
	#__NOP
 
__n›


	)

390 
	#__WFI
 
__wfi


	)

391 
	#__WFE
 
__w„


	)

392 
	#__SEV
 
__£v


	)

393 
	#__ISB
(Ë
	`__isb
(0)

	)

394 
	#__DSB
(Ë
	`__dsb
(0)

	)

395 
	#__DMB
(Ë
	`__dmb
(0)

	)

396 
	#__REV
 
__ªv


	)

410 
uöt32_t
 
__gë_PSP
();

420 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

430 
uöt32_t
 
__gë_MSP
();

440 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

450 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

460 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

463 #i‡(
__ARMCC_VERSION
 < 400000)

472 
uöt32_t
 
__gë_PRIMASK
();

481 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

490 
uöt32_t
 
__gë_CONTROL
();

499 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

511 
__INLINE
 
uöt32_t
 
__gë_PRIMASK
()

513 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

514 (
	g__ªgPriMask
);

524 
__INLINE
 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

526 
uöt32_t
 
__ªgPriMask
 
__ASM
("primask");

527 
	g__ªgPriMask
 = (
¥iMask
);

537 
__INLINE
 
uöt32_t
 
__gë_CONTROL
()

539 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

540 (
	g__ªgC⁄åﬁ
);

550 
__INLINE
 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

552 
uöt32_t
 
__ªgC⁄åﬁ
 
__ASM
("control");

553 
	g__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

560 #ñi‡(
deföed
 (
__ICCARM__
))

563 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

564 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

566 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsie f"); }

567 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 ("cpsid f"); }

569 
	#__NOP
 
__no_›î©i⁄


	)

570 
__INLINE
 
__WFI
(Ë{ 
__ASM
 ("wfi"); }

571 
__INLINE
 
__WFE
(Ë{ 
__ASM
 ("wfe"); }

572 
__INLINE
 
__SEV
(Ë{ 
__ASM
 ("sev"); }

592 
uöt32_t
 
__gë_PSP
();

602 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

612 
uöt32_t
 
__gë_MSP
();

622 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

632 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

638 #ñi‡(
deföed
 (
__GNUC__
))

641 
__INLINE
 
__íabÀ_úq
(Ë{ 
__ASM
 volatile ("cpsie i"); }

642 
__INLINE
 
__dißbÀ_úq
(Ë{ 
__ASM
 volatile ("cpsid i"); }

644 
__INLINE
 
__íabÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsie f"); }

645 
__INLINE
 
__dißbÀ_Áu…_úq
(Ë{ 
__ASM
 volatile ("cpsid f"); }

647 
__INLINE
 
__NOP
(Ë{ 
__ASM
 volatile ("nop"); }

648 
__INLINE
 
__WFI
(Ë{ 
__ASM
 volatile ("wfi"); }

649 
__INLINE
 
__WFE
(Ë{ 
__ASM
 volatile ("wfe"); }

650 
__INLINE
 
__SEV
(Ë{ 
__ASM
 volatile ("sev"); }

651 
__INLINE
 
__ISB
(Ë{ 
__ASM
 volatile ("isb"); }

652 
__INLINE
 
__DSB
(Ë{ 
__ASM
 volatile ("dsb"); }

653 
__INLINE
 
__DMB
(Ë{ 
__ASM
 volatile ("dmb"); }

663 
uöt32_t
 
__gë_PSP
();

673 
__£t_PSP
(
uöt32_t
 
t›OfProcSèck
);

683 
uöt32_t
 
__gë_MSP
();

693 
__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
);

702 
uöt32_t
 
__gë_PRIMASK
();

711 
__£t_PRIMASK
(
uöt32_t
 
¥iMask
);

720 
uöt32_t
 
__gë_CONTROL
();

729 
__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
);

739 
uöt32_t
 
__REV
(uöt32_à
vÆue
);

749 
uöt32_t
 
__REV16
(
uöt16_t
 
vÆue
);

759 
öt32_t
 
__REVSH
(
öt16_t
 
vÆue
);

762 #ñi‡(
deföed
 (
__TASKING__
))

786 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

787 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

788 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

799 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

801 
	gNVIC
->
	gISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

812 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

814 
	gNVIC
->
	gICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

826 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

828 ((
	guöt32_t
Ë((
	gNVIC
->
	gISPR
[0] & (1 << ((uöt32_t)(
	gIRQn
) & 0x1F)))?1:0));

839 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

841 
	gNVIC
->
	gISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

852 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

854 
	gNVIC
->
	gICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

869 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

871 if(
	gIRQn
 < 0) {

872 
	gSCB
->
	gSHP
[
_SHP_IDX
(
IRQn
)] = (
SCB
->
SHP
[_SHP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

873 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

875 
	gNVIC
->
	gIPR
[
_IP_IDX
(
IRQn
)] = (
NVIC
->
IPR
[_IP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

876 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

894 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

897 if(
	gIRQn
 < 0) {

898 ((
	guöt32_t
)((
	gSCB
->
	gSHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË>> (8 - 
	g__NVIC_PRIO_BITS
))); }

900 ((
	guöt32_t
)((
	gNVIC
->
	gIPR
[
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË>> (8 - 
	g__NVIC_PRIO_BITS
))); }

907 #i‡(!
deföed
 (
__Víd‹_SysTickC⁄fig
)) || (__Vendor_SysTickConfig == 0)

919 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

921 i‡(
	gticks
 > 
	gSysTick_LOAD_RELOAD_Msk
)  (1);

923 
	gSysTick
->
	gLOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

924 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

925 
	gSysTick
->
	gVAL
 = 0;

926 
	gSysTick
->
	gCTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

927 
SysTick_CTRL_TICKINT_Msk
 |

928 
SysTick_CTRL_ENABLE_Msk
;

944 
__INLINE
 
NVIC_Sy°emRe£t
()

946 
	gSCB
->
	gAIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

947 
SCB_AIRCR_SYSRESETREQ_Msk
);

948 
__DSB
();

954 #ifde‡
__˝lu•lus


	@bsp/cr_startup_lpc11.c

28 #i‡
deföed
 (
__˝lu•lus
)

29 #ifde‡
__REDLIB__


30 #îr‹ 
Redlib
 
d€s
 
nŸ
 
suµ‹t
 
C
++

38 
__libc_öô_¨øy
();

43 
	#WEAK
 
	`__©åibuã__
 ((
wók
))

	)

44 
	#ALIAS
(
f
Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
 (#f)))

	)

46 
	~"≠p_cfg.h
"

47 
	~"b•.h
"

49 #i‡
deföed
 (
__˝lu•lus
)

60 
Re£tISR
();

61 
WEAK
 
NMI_H™dÀr
();

62 
WEAK
 
H¨dFau…_H™dÀr
();

63 
WEAK
 
SVCÆl_H™dÀr
();

64 
WEAK
 
PídSV_H™dÀr
();

65 
WEAK
 
SysTick_H™dÀr
();

66 
WEAK
 
I¡DeÁu…H™dÀr
();

76 
CAN_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

77 
SSP1_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

78 
I2C_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

79 
TIMER16_0_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

80 
TIMER16_1_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

81 
TIMER32_0_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

82 
TIMER32_1_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

83 
SSP0_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

84 
UART_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

85 
ADC_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

86 
WDT_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

87 
BOD_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

88 
PIOINT3_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

89 
PIOINT2_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

90 
PIOINT1_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

91 
PIOINT0_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

92 
WAKEUP_IRQH™dÀr
 (Ë
ALIAS
(
I¡DeÁu…H™dÀr
);

107 #i‡
deföed
 (
__REDLIB__
)

108 
__maö
();

110 
maö
();

117 #i‚de‡
STACK_SIZE


118 
	#STACK_SIZE
 128

	)

120 
__©åibuã__
 ((
£˘i⁄
(".stack")))

121 
	gpulMaöSèck
[
STACK_SIZE
];

126 
__©åibuã__
 ((
£˘i⁄
(".crp")))

127 c⁄° 
	gÊash_¸p
 =

128 #i‡
EN_CRP
 == 1

130 #ñi‡
EN_CRP
 == 2

132 #ñi‡
EN_CRP
 == 3

139 #i‡
deföed
 (
__˝lu•lus
)

148 (* c⁄° 
g_p‚Ve˘‹s
[])();

149 
	`__©åibuã__
 ((
	`£˘i⁄
(".isr_vector")))

150 (* c⁄° 
g_p‚Ve˘‹s
[])() = {

151 (*)&
pulMaöSèck
[
STACK_SIZE
],

152 
Re£tISR
,

153 
NMI_H™dÀr
,

154 
H¨dFau…_H™dÀr
,

162 
SVCÆl_H™dÀr
,

165 
PídSV_H™dÀr
,

166 
SysTick_H™dÀr
,

171 
WAKEUP_IRQH™dÀr
,

172 
WAKEUP_IRQH™dÀr
,

173 
WAKEUP_IRQH™dÀr
,

174 
WAKEUP_IRQH™dÀr
,

175 
WAKEUP_IRQH™dÀr
,

176 
WAKEUP_IRQH™dÀr
,

177 
WAKEUP_IRQH™dÀr
,

178 
WAKEUP_IRQH™dÀr
,

179 
WAKEUP_IRQH™dÀr
,

180 
WAKEUP_IRQH™dÀr
,

181 
WAKEUP_IRQH™dÀr
,

182 
WAKEUP_IRQH™dÀr
,

183 
WAKEUP_IRQH™dÀr
,

185 
CAN_IRQH™dÀr
,

186 
SSP1_IRQH™dÀr
,

187 
I2C_IRQH™dÀr
,

188 
TIMER16_0_IRQH™dÀr
,

189 
TIMER16_1_IRQH™dÀr
,

190 
TIMER32_0_IRQH™dÀr
,

191 
TIMER32_1_IRQH™dÀr
,

192 
SSP0_IRQH™dÀr
,

193 
UART_IRQH™dÀr
,

198 
ADC_IRQH™dÀr
,

199 
WDT_IRQH™dÀr
,

200 
BOD_IRQH™dÀr
,

202 
PIOINT3_IRQH™dÀr
,

203 
PIOINT2_IRQH™dÀr
,

204 
PIOINT1_IRQH™dÀr
,

205 
PIOINT0_IRQH™dÀr
,

206 
	}
};

215 
_ëext
;

216 
_d©a
;

217 
_ed©a
;

218 
_bss
;

219 
_ebss
;

231 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

232 
	$Re£tISR
()

235 *
pulSrc
, *
pulDe°
;

240 
pulSrc
 = &
_ëext
;

241 
pulDe°
 = &
_d©a
;ÖulDe° < &
_ed©a
; )

243 *
pulDe°
++ = *
pulSrc
++;

249 
pulDe°
 = &
_bss
;ÖulDe° < &
_ebss
; )

251 *
pulDe°
++ = 0;

254 
	`Sy°emInô
();

258 
	`maö
();

260 
	}
}

269 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

270 
	$NMI_H™dÀr
()

275 
	`¥_debug
("NMI_Handler\n");

279 
	}
}

288 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

289 
	$H¨dFau…_H™dÀr
()

294 
	`¥_debug
("HardFault_Handler\n");

298 
	}
}

300 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

301 
	$SVCÆl_H™dÀr
()

306 
	}
}

308 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

309 
	$PídSV_H™dÀr
()

314 
	}
}

316 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

317 
	$SysTick_H™dÀr
()

322 
	}
}

330 
__©åibuã__
 ((
£˘i⁄
(".after_vectors")))

331 
	$I¡DeÁu…H™dÀr
()

333 
	`¥_debug
("IntDefaultHandler\n");

337 
	}
}

	@bsp/mytype.h

3 #i‚de‡
__MY_TYPE_H__


4 
	#__MY_TYPE_H__


	)

6 
	~<°döt.h
>

9 #i‚de‡
TRUE


10 
	#TRUE
 1

	)

13 #i‚de‡
FALSE


14 
	#FALSE
 0

	)

17 #i‚de‡
NULL


18 
	#NULL
 (*)0

	)

21 
	tuöt8
;

22 sig√d 
	töt8
;

23 
	tuöt16
;

24 sig√d 
	töt16
;

25 
	tuöt32
;

26 sig√d 
	töt32
;

27 
	tÂ32
;

28 
	tÂ64
;

29 
	tBOOL
;

31 
	#boﬁ
 
BOOL


	)

37 
	tINT
;

38 
	tUINT
;

41 sig√d 
	tCHAR
;

42 
	tUCHAR
;

43 
	tBYTE
;

46 
	tSHORT
;

47 
	tUSHORT
;

48 
	tWORD
;

49 
	tWCHAR
;

52 
	tLONG
;

53 
	tULONG
;

54 
	tDWORD
;

59 
	t_öt
;

60 
uöt32
 
	tsize_t
;

62 
	#CONST_UINT8
 c⁄° 

	)

63 
	#CONST_UINT16
 c⁄° 
uöt16


	)

65 (*
	tFUNC
) ();

66 
	$uöt8
 (*
	tDRIVE_WRITE
)(
	tuöt32
,
	tuöt16
,
	tuöt8
*,uint16);

67 (*
	tDRIVE_READ
 )(
	tuöt32
,
	tuöt16
,
	tuöt8
*,uint16);

68 (*
	tPUT
Ë(
	tuöt8
);

70 
	#ARRAY_SIZE
(
x
Ë(((x))/((x)[0]))

	)

71 
	#ZERO_BUFF
(
x
Ë(
	`mem£t
((x),0,(x)))

	)

74 #i‚de‡
PSTR


75 
	#pgm_ªad_byã
(
a
Ë((
CONST_UINT8
*Ô)[0]

	)

76 
	#pgm_ªad_w‹d
(
a
Ë((
uöt16
)((
CONST_UINT8
*Ô)[0] + (((CONST_UINT8*Ô)[1]<<8))

	)

77 
	#PSTR
(
a
Ë(
CONST_UINT8
*)◊)

	)

78 
	#FSTR
(
a
Ë(
CONST_UINT8
*)◊)

	)

79 
	#PROGMEM


	)

82 
	#GET_PVOID
(
a
Ë(*◊))

	)

85 
	#Re£tMCU
(Ë(
SCB
->
AIRCR
 = (0x05Á << 16Ë+ 4)

	)

87 
	#__UDATA__
 
	`__©åibuã__
((
	`£˘i⁄
(".ud©a")))

	)

88 
	#__NDATA__
 
	`__©åibuã__
((
	`£˘i⁄
(".nd©a")))

	)

89 
	#__NOINIT__
 
	`__©åibuã__
((
	`£˘i⁄
(".noöô")))

	)

90 
	#__AFTER__
 
	`__©åibuã__
 ((
	`£˘i⁄
(".a·î_ve˘‹s")))

	)

91 
	#__ROM_DATA__
 
	`__©åibuã__
 ((
	`£˘i⁄
(".rom_d©a")))

	)

93 
	#WEAK
 
	`__©åibuã__
 ((
wók
)Ë

	)

94 
	#ALIAS
(
f
Ë
	`__©åibuã__
 ((
wók
, 
	`Æüs
 (#f))Ë

	)

95 
	#__PACKED__
 
	`__©åibuã__
 ((
∑cked
)Ë

	)

96 
	#__WEAK__
 
WEAK


	)

98 
	#OSTASK
(
_sig«me
) \

99 
	`_sig«me
 (Ë
	`__©åibuã__
 ((
n‹ëu∫
))

	)

105 #i‚de‡
__°rögify


106 
	#__°rögify_1
(
x
Ë#x

	)

107 
	#__°rögify
(
x
Ë
	`__°rögify_1
(x)

	)

111 #i‚de‡
__PRINTF


112 
	#__PRINTF
(
a
,
b
Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
,◊),(b))))

	)

115 #i‚de‡
MIN


116 
	#MIN
(
a
,
b
Ë◊)<(b)?◊):(b)

	)

119 #i‚de‡
MAX


120 
	#MAX
(
a
,
b
Ë◊)>(b)?◊):(b)

	)

123 #i‚de‡
BIT


124 
	#BIT
(
a
Ë(1<<◊))

	)

127 #i‚de‡
SBI


128 
	#SBI
(
p‹t
, 
bô
Ë(’‹tË|(1 << (bô)))

	)

131 #i‚de‡
CBI


132 
	#CBI
(
p‹t
, 
bô
Ë(’‹tË&~(1 << (bô)))

	)

135 #i‚de‡
PBI


136 
	#PBI
(
pö
, 
bô
Ë((’öË& (1 << (bô))))

	)

139 #i‚de‡
NBI


140 
	#NBI
(
p‹t
, 
bô
Ë(’‹tË^(1 << (bô)))

	)

144 #i‚de‡
off£t_of


145 
	#off£t_of
(
_ty≥
, 
_memb
Ë(()(&((_ty≥ *)0)->_memb))

	)

148 #i‚de‡
c⁄èöî_of


149 
	#c⁄èöî_of
(
_obj
, 
_ty≥
, 
_memb
Ë((_ty≥ *)(((*)_objË- 
	`off£t_of
(_ty≥, _memb)))

	)

153 #i‚de‡
__PRINT__


154 
	#__PRINT__
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)))

	)

158 #i‡
_íd
 > 
__°ack_íd__


163 
	#DEF_DISABLED
 0

	)

164 
	#DEF_ENABLED
 1

	)

166 
	#DEF_FALSE
 0

	)

167 
	#DEF_TRUE
 1

	)

169 
	#DEF_NO
 0

	)

170 
	#DEF_YES
 1

	)

172 
	#DEF_OFF
 0

	)

173 
	#DEF_ON
 1

	)

175 
	#DEF_CLR
 0

	)

176 
	#DEF_SET
 1

	)

178 
	#DEF_ACTIVE
 0

	)

179 
	#DEF_INACTIVE
 1

	)

181 
	#DEF_FAIL
 0

	)

182 
	#DEF_OK
 1

	)

186 
	#DEF_BIT_NONE
 0x00

	)

188 
	#DEF_BIT_00
 0x01

	)

189 
	#DEF_BIT_01
 0x02

	)

190 
	#DEF_BIT_02
 0x04

	)

191 
	#DEF_BIT_03
 0x08

	)

192 
	#DEF_BIT_04
 0x10

	)

193 
	#DEF_BIT_05
 0x20

	)

194 
	#DEF_BIT_06
 0x40

	)

195 
	#DEF_BIT_07
 0x80

	)

197 
	#DEF_BIT_08
 0x0100

	)

198 
	#DEF_BIT_09
 0x0200

	)

199 
	#DEF_BIT_10
 0x0400

	)

200 
	#DEF_BIT_11
 0x0800

	)

201 
	#DEF_BIT_12
 0x1000

	)

202 
	#DEF_BIT_13
 0x2000

	)

203 
	#DEF_BIT_14
 0x4000

	)

204 
	#DEF_BIT_15
 0x8000

	)

206 
	#DEF_BIT_16
 0x00010000

	)

207 
	#DEF_BIT_17
 0x00020000

	)

208 
	#DEF_BIT_18
 0x00040000

	)

209 
	#DEF_BIT_19
 0x00080000

	)

210 
	#DEF_BIT_20
 0x00100000

	)

211 
	#DEF_BIT_21
 0x00200000

	)

212 
	#DEF_BIT_22
 0x00400000

	)

213 
	#DEF_BIT_23
 0x00800000

	)

215 
	#DEF_BIT_24
 0x01000000

	)

216 
	#DEF_BIT_25
 0x02000000

	)

217 
	#DEF_BIT_26
 0x04000000

	)

218 
	#DEF_BIT_27
 0x08000000

	)

219 
	#DEF_BIT_28
 0x10000000

	)

220 
	#DEF_BIT_29
 0x20000000

	)

221 
	#DEF_BIT_30
 0x40000000

	)

222 
	#DEF_BIT_31
 0x80000000

	)

	@bsp/rom_api.h

3 #i‚de‡
__ROM_API_H__


4 
	#__ROM_API_H__


	)

6 
	~"myty≥.h
"

9 
	#CPU_FREQ_EQU
 0

	)

10 
	#CPU_FREQ_LTE
 1

	)

11 
	#CPU_FREQ_GTE
 2

	)

12 
	#CPU_FREQ_APPROX
 3

	)

14 
	#PLL_CMD_SUCCESS
 0

	)

15 
	#PLL_INVALID_FREQ
 1

	)

16 
	#PLL_INVALID_MODE
 2

	)

17 
	#PLL_FREQ_NOT_FOUND
 3

	)

18 
	#PLL_NOT_LOCKED
 4

	)

20 
	s_PWRD
 {

21 (*
	m£t_∂l
)(
	mcmd
[], 
	mª•
[]);

22 (*
	m£t_powî
)(
	mcmd
[], 
	mª•
[]);

23 } 
	tPWRD
;

29 
	#CAN_MSGOBJ_STD
 0x00000000UL

	)

30 
	#CAN_MSGOBJ_EXT
 0x20000000UL

	)

31 
	#CAN_MSGOBJ_DAT
 0x00000000UL

	)

32 
	#CAN_MSGOBJ_RTR
 0x40000000UL

	)

35 
	#CAN_ERROR_NONE
 0x00000000UL

	)

36 
	#CAN_ERROR_PASS
 0x00000001UL

	)

37 
	#CAN_ERROR_WARN
 0x00000002UL

	)

38 
	#CAN_ERROR_BOFF
 0x00000004UL

	)

39 
	#CAN_ERROR_STUF
 0x00000008UL

	)

40 
	#CAN_ERROR_FORM
 0x00000010UL

	)

41 
	#CAN_ERROR_ACK
 0x00000020UL

	)

42 
	#CAN_ERROR_BIT1
 0x00000040UL

	)

43 
	#CAN_ERROR_BIT0
 0x00000080UL

	)

44 
	#CAN_ERROR_CRC
 0x00000100UL

	)

50 
	s_CAN_MSG_OBJ
 {

52 
uöt32
 
	mmode_id
;

53 
uöt32
 
	mid
;

55 
uöt32
 
	mIDTK
 :11;

56 
uöt32
 
	mIDTT
 :8;

57 
uöt32
 
	mIDcmd
 :8;

58 
uöt32
 
	mID°©e
 :2;

62 
uöt32
 
	mIDty≥
 : 5;

63 
uöt32
 
	mIDRaddr
 : 8;

64 
uöt32
 
	mIDSaddr
 : 8;

65 
uöt32
 
	mIDmod
 : 8;

66 
uöt32
 
	mIDnc
 : 3;

69 
uöt32
 
	mmask
;

72 
	s__PACKED__


74 
uöt8
 
	mDJsign
;

75 
uöt8
 
	mDJlo›
;

76 
uöt8
 
	mDJaddr
;

77 
uöt8
 
	mDJty≥
;

78 
uöt8
 
	mDJncBuff
[4];

80 
	s__PACKED__


82 
uöt32
 
	mD©aA
;

83 
uöt32
 
	mD©aB
;

85 
	s__PACKED__


87 
uöt8
 
	mcmd
;

88 
uöt16
 
	maddr
;

89 
uöt8
 
	mTTaddr
;

90 
uöt16
 
	mvÆue
;

91 
uöt8
 
	mty≥
;

92 
uöt8
 
	m°©e
;

95 
uöt16
 
	mvÆue
 :13;

96 
uöt16
 
	mty≥
 :3;

97 }
	mD©a
[4];

98 
	s__PACKED__


100 
uöt8
 
	msign
;

101 
uöt8
 
	mVö
;

102 
uöt8
 
	mVout
;

103 
uöt8
 
	mIout
;

105 
uöt8
 
	mVbt
;

106 
uöt8
 
	mVbt1
;

107 
uöt8
 
	mEPS°©e
;

108 
uöt8
 
	mEPSgz
;

110 
uöt16
 
	mbuff16
[4];

111 
uöt8
 
	mbuff
[8];

114 
uöt8
 
	mdlc
;

115 
uöt8
 
	mÀn
;

116 
uöt8
 
	m˙t
;

118 
uöt8
 
	mmsgobj
;

119 }
	tCAN_MSG_OBJ
;

124 
	s_CAN_ODCONSTENTRY
 {

125 
uöt16
 
	mödex
;

126 
uöt8
 
	msubödex
;

127 
uöt8
 
	mÀn
;

128 
uöt32
 
	mvÆ
;

129 }
	tCAN_ODCONSTENTRY
;

134 
	#OD_NONE
 0x00

	)

135 
	#OD_EXP_RO
 0x10

	)

136 
	#OD_EXP_WO
 0x20

	)

137 
	#OD_EXP_RW
 0x30

	)

138 
	#OD_SEG_RO
 0x40

	)

139 
	#OD_SEG_WO
 0x50

	)

140 
	#OD_SEG_RW
 0x60

	)

142 
	s_CAN_ODENTRY
 {

143 
uöt16
 
	mödex
;

144 
uöt8
 
	msubödex
;

145 
uöt8
 
	míåyty≥_Àn
;

146 
uöt8
 *
	mvÆ
;

147 }
	tCAN_ODENTRY
;

149 
	s_CAN_CANOPENCFG
 {

150 
uöt8
 
	mnode_id
;

151 
uöt8
 
	mmsgobj_rx
;

152 
uöt8
 
	mmsgobj_tx
;

153 
uöt32
 
	mod_c⁄°_num
;

154 
CAN_ODCONSTENTRY
 *
	mod_c⁄°_èbÀ
;

155 
uöt32
 
	mod_num
;

156 
CAN_ODENTRY
 *
	mod_èbÀ
;

157 }
	tCAN_CANOPENCFG
;

162 
	s_CAN_CALLBACKS
 {

163 (*
	mCAN_rx
)(
uöt8
 
	mmsg_obj
);

164 (*
	mCAN_tx
)(
uöt8
 
	mmsg_obj
);

165 (*
	mCAN_îr‹
)(
uöt32
 
	mîr‹_öfo
);

166 
uöt32
 (*
CANOPEN_sdo_ªad
)(
uöt16
 
	mödex
, 
uöt8
 
	msubödex
);

167 
uöt32
 (*
CANOPEN_sdo_wrôe
)(

168 
uöt16
 
	mödex
, 
uöt8
 
	msubödex
, uöt8 *
	md©_±r
);

169 
uöt32
 (*
CANOPEN_sdo_£g_ªad
)(

170 
uöt16
 
	mödex
, 
uöt8
 
	msubödex
, uöt8 
	m›í˛o£
,

171 
uöt8
 *
	mÀngth
, uöt8 *
	md©a
, uöt8 *
	mœ°
);

172 
uöt32
 (*
CANOPEN_sdo_£g_wrôe
)(

173 
uöt16
 
	mödex
, 
uöt8
 
	msubödex
, uöt8 
	m›í˛o£
,

174 
uöt8
 
	mÀngth
, uöt8 *
	md©a
, uöt8 *
	mÁ°_ª•
);

175 
uöt8
 (*
CANOPEN_sdo_ªq
)(

176 
uöt8
 
	mÀngth_ªq
, uöt8 *
	mªq_±r
, uöt8 *
	mÀngth_ª•
,

177 
uöt8
 *
	mª•_±r
);

178 }
	tCAN_CALLBACKS
;

183 
	s_CAND
 {

184 (*
	möô_ˇn
Ë(
uöt32
 * 
	mˇn_cfg
);

185 (*
	mi§
) ();

186 (*
	mc⁄fig_rxmsgobj
Ë(c⁄° 
CAN_MSG_OBJ
 * 
	mmsg_obj
);

187 
uöt8
 (*
ˇn_ª˚ive
Ë(
CAN_MSG_OBJ
 * 
	mmsg_obj
);

188 (*
	mˇn_å™smô
Ë(
CAN_MSG_OBJ
 * 
	mmsg_obj
);

189 (*
	mc⁄fig_ˇn›í
Ë(c⁄° 
CAN_CANOPENCFG
 * 
	mˇn›í_cfg
);

190 (*
	mˇn›í_h™dÀr
) ();

191 (*
	mc⁄fig_ˇlb
Ë(c⁄° 
CAN_CALLBACKS
 * 
	mˇŒback_cfg
);

192 }
	tCAND
;

197 
	s_ROM
 {

198 c⁄° 
	mp_usbd
;

199 c⁄° 
	mp_˛ib
;

200 c⁄° 
CAND
 * 
	mpCANAPI
;

201 c⁄° 
PWRD
 * 
	mpWRD
;

202 c⁄° 
	mp_dev1
;

203 c⁄° 
	mp_dev2
;

204 c⁄° 
	mp_dev3
;

205 c⁄° 
	mp_dev4
;

206 }
	tROM
;

208 
	#PROM
 (*(vﬁ©ûê
ROM
 **)0x1FFF1FF8)

	)

	@bsp/system_LPC11xx.c

26 
	~<°döt.h
>

27 
	~"LPC11xx.h
"

28 
	~"sy°em_LPC11xx.h
"

108 
	#CLOCK_SETUP
 1

	)

109 
	#SYSOSCCTRL_VÆ
 0x00000000

110 
	#WDTOSCCTRL_VÆ
 0x00000000

111 
	#SYSPLLCTRL_VÆ
 0x00000023

112 
	#SYSPLLCLKSEL_VÆ
 0x00000001

113 
	#MAINCLKSEL_VÆ
 0x00000003

114 
	#SYSAHBCLKDIV_VÆ
 0x00000001

115 

	)

123 
	#CHECK_RANGE
(
vÆ
, 
mö
, 
max
Ë((vÆ < möË|| (vÆ > max))

	)

124 
	#CHECK_RSVD
(
vÆ
, 
mask
Ë(vÆ & mask)

	)

127 #i‡(
CHECK_RSVD
((
SYSOSCCTRL_VÆ
), ~0x00000003))

131 #i‡(
CHECK_RSVD
((
WDTOSCCTRL_VÆ
), ~0x000001FF))

135 #i‡(
CHECK_RANGE
((
SYSPLLCLKSEL_VÆ
), 0, 2))

139 #i‡(
CHECK_RSVD
((
SYSPLLCTRL_VÆ
), ~0x000001FF))

143 #i‡(
CHECK_RSVD
((
MAINCLKSEL_VÆ
), ~0x00000003))

147 #i‡(
CHECK_RANGE
((
SYSAHBCLKDIV_VÆ
), 0, 255))

159 
	#__XTAL
 (12000000ULË

	)

160 
	#__SYS_OSC_CLK
 ( 
__XTAL
Ë

	)

161 
	#__IRC_OSC_CLK
 (12000000ULË

	)

164 
	#__FREQSEL
 ((
WDTOSCCTRL_VÆ
 >> 5Ë& 0x0F)

	)

165 
	#__DIVSEL
 (((
WDTOSCCTRL_VÆ
 & 0x1FË<< 1Ë+ 2)

	)

167 #i‡(
CLOCK_SETUP
)

168 #i‡ (
__FREQSEL
 == 0)

169 
	#__WDT_OSC_CLK
 ( 0Ë

	)

170 #ñi‡(
__FREQSEL
 == 1)

171 
	#__WDT_OSC_CLK
 ( 500000 / 
__DIVSEL
)

	)

172 #ñi‡(
__FREQSEL
 == 2)

173 
	#__WDT_OSC_CLK
 ( 800000 / 
__DIVSEL
)

	)

174 #ñi‡(
__FREQSEL
 == 3)

175 
	#__WDT_OSC_CLK
 (1100000 / 
__DIVSEL
)

	)

176 #ñi‡(
__FREQSEL
 == 4)

177 
	#__WDT_OSC_CLK
 (1400000 / 
__DIVSEL
)

	)

178 #ñi‡(
__FREQSEL
 == 5)

179 
	#__WDT_OSC_CLK
 (1600000 / 
__DIVSEL
)

	)

180 #ñi‡(
__FREQSEL
 == 6)

181 
	#__WDT_OSC_CLK
 (1800000 / 
__DIVSEL
)

	)

182 #ñi‡(
__FREQSEL
 == 7)

183 
	#__WDT_OSC_CLK
 (2000000 / 
__DIVSEL
)

	)

184 #ñi‡(
__FREQSEL
 == 8)

185 
	#__WDT_OSC_CLK
 (2200000 / 
__DIVSEL
)

	)

186 #ñi‡(
__FREQSEL
 == 9)

187 
	#__WDT_OSC_CLK
 (2400000 / 
__DIVSEL
)

	)

188 #ñi‡(
__FREQSEL
 == 10)

189 
	#__WDT_OSC_CLK
 (2600000 / 
__DIVSEL
)

	)

190 #ñi‡(
__FREQSEL
 == 11)

191 
	#__WDT_OSC_CLK
 (2700000 / 
__DIVSEL
)

	)

192 #ñi‡(
__FREQSEL
 == 12)

193 
	#__WDT_OSC_CLK
 (2900000 / 
__DIVSEL
)

	)

194 #ñi‡(
__FREQSEL
 == 13)

195 
	#__WDT_OSC_CLK
 (3100000 / 
__DIVSEL
)

	)

196 #ñi‡(
__FREQSEL
 == 14)

197 
	#__WDT_OSC_CLK
 (3200000 / 
__DIVSEL
)

	)

199 
	#__WDT_OSC_CLK
 (3400000 / 
__DIVSEL
)

	)

203 #i‡ ((
SYSPLLCLKSEL_VÆ
 & 0x03) == 0)

204 
	#__SYS_PLLCLKIN
 (
__IRC_OSC_CLK
)

	)

205 #ñi‡((
SYSPLLCLKSEL_VÆ
 & 0x03) == 1)

206 
	#__SYS_PLLCLKIN
 (
__SYS_OSC_CLK
)

	)

208 
	#__SYS_PLLCLKIN
 (0)

	)

211 
	#__SYS_PLLCLKOUT
 (
__SYS_PLLCLKIN
 * ((
SYSPLLCTRL_VÆ
 & 0x01FË+ 1))

	)

214 #i‡ ((
MAINCLKSEL_VÆ
 & 0x03) == 0)

215 
	#__MAIN_CLOCK
 (
__IRC_OSC_CLK
)

	)

216 #ñi‡((
MAINCLKSEL_VÆ
 & 0x03) == 1)

217 
	#__MAIN_CLOCK
 (
__SYS_PLLCLKIN
)

	)

218 #ñi‡((
MAINCLKSEL_VÆ
 & 0x03) == 2)

219 #i‡(
__FREQSEL
 == 0)

222 
	#__MAIN_CLOCK
 (
__WDT_OSC_CLK
)

	)

224 #ñi‡((
MAINCLKSEL_VÆ
 & 0x03) == 3)

225 
	#__MAIN_CLOCK
 (
__SYS_PLLCLKOUT
)

	)

227 
	#__MAIN_CLOCK
 (0)

	)

230 
	#__SYSTEM_CLOCK
 (
__MAIN_CLOCK
 / 
SYSAHBCLKDIV_VÆ
)

	)

233 
	#__SYSTEM_CLOCK
 (
__IRC_OSC_CLK
)

	)

240 
uöt32_t
 
	gSy°emC‹eClock
 = 
__SYSTEM_CLOCK
;

246 
	$Sy°emC‹eClockUpd©e
 ()

248 
uöt32_t
 
wdt_osc
 = 0;

251 (
LPC_SYSCON
->
WDTOSCCTRL
 >> 5) & 0x0F) {

252 0: 
wdt_osc
 = 0; ;

253 1: 
wdt_osc
 = 500000; ;

254 2: 
wdt_osc
 = 800000; ;

255 3: 
wdt_osc
 = 1100000; ;

256 4: 
wdt_osc
 = 1400000; ;

257 5: 
wdt_osc
 = 1600000; ;

258 6: 
wdt_osc
 = 1800000; ;

259 7: 
wdt_osc
 = 2000000; ;

260 8: 
wdt_osc
 = 2200000; ;

261 9: 
wdt_osc
 = 2400000; ;

262 10: 
wdt_osc
 = 2600000; ;

263 11: 
wdt_osc
 = 2700000; ;

264 12: 
wdt_osc
 = 2900000; ;

265 13: 
wdt_osc
 = 3100000; ;

266 14: 
wdt_osc
 = 3200000; ;

267 15: 
wdt_osc
 = 3400000; ;

269 
wdt_osc
 /((
LPC_SYSCON
->
WDTOSCCTRL
 & 0x1F) << 1) + 2;

271 
LPC_SYSCON
->
MAINCLKSEL
 & 0x03) {

273 
Sy°emC‹eClock
 = 
__IRC_OSC_CLK
;

276 
LPC_SYSCON
->
SYSPLLCLKSEL
 & 0x03) {

278 
Sy°emC‹eClock
 = 
__IRC_OSC_CLK
;

281 
Sy°emC‹eClock
 = 
__SYS_OSC_CLK
;

285 
Sy°emC‹eClock
 = 0;

290 
Sy°emC‹eClock
 = 
wdt_osc
;

293 
LPC_SYSCON
->
SYSPLLCLKSEL
 & 0x03) {

295 i‡(
LPC_SYSCON
->
SYSPLLCTRL
 & 0x180) {

296 
Sy°emC‹eClock
 = 
__IRC_OSC_CLK
;

298 
Sy°emC‹eClock
 = 
__IRC_OSC_CLK
 * ((
LPC_SYSCON
->
SYSPLLCTRL
 & 0x01F) + 1);

302 i‡(
LPC_SYSCON
->
SYSPLLCTRL
 & 0x180) {

303 
Sy°emC‹eClock
 = 
__SYS_OSC_CLK
;

305 
Sy°emC‹eClock
 = 
__SYS_OSC_CLK
 * ((
LPC_SYSCON
->
SYSPLLCTRL
 & 0x01F) + 1);

310 
Sy°emC‹eClock
 = 0;

316 
Sy°emC‹eClock
 /
LPC_SYSCON
->
SYSAHBCLKDIV
;

318 
	}
}

329 
	$Sy°emInô
 () {

330 vﬁ©ûê
uöt32_t
 
i
;

332 #i‡(
CLOCK_SETUP
)

334 #i‡((
SYSPLLCLKSEL_VÆ
 & 0x03) == 1)

335 
LPC_SYSCON
->
PDRUNCFG
 &= ~(1 << 5);

336 
LPC_SYSCON
->
SYSOSCCTRL
 = 
SYSOSCCTRL_VÆ
;

337 
i
 = 0; i < 200; i++Ë
	`__NOP
();

340 
LPC_SYSCON
->
SYSPLLCLKSEL
 = 
SYSPLLCLKSEL_VÆ
;

341 
LPC_SYSCON
->
SYSPLLCLKUEN
 = 0x01;

342 
LPC_SYSCON
->
SYSPLLCLKUEN
 = 0x00;

343 
LPC_SYSCON
->
SYSPLLCLKUEN
 = 0x01;

344 !(
LPC_SYSCON
->
SYSPLLCLKUEN
 & 0x01));

345 #i‡((
MAINCLKSEL_VÆ
 & 0x03) == 3)

346 
LPC_SYSCON
->
SYSPLLCTRL
 = 
SYSPLLCTRL_VÆ
;

347 
LPC_SYSCON
->
PDRUNCFG
 &= ~(1 << 7);

348 !(
LPC_SYSCON
->
SYSPLLSTAT
 & 0x01));

351 #i‡(((
MAINCLKSEL_VÆ
 & 0x03) == 2) )

352 
LPC_SYSCON
->
WDTOSCCTRL
 = 
WDTOSCCTRL_VÆ
;

353 
LPC_SYSCON
->
PDRUNCFG
 &= ~(1 << 6);

354 
i
 = 0; i < 200; i++Ë
	`__NOP
();

357 
LPC_SYSCON
->
MAINCLKSEL
 = 
MAINCLKSEL_VÆ
;

358 
LPC_SYSCON
->
MAINCLKUEN
 = 0x01;

359 
LPC_SYSCON
->
MAINCLKUEN
 = 0x00;

360 
LPC_SYSCON
->
MAINCLKUEN
 = 0x01;

361 !(
LPC_SYSCON
->
MAINCLKUEN
 & 0x01));

363 
LPC_SYSCON
->
SYSAHBCLKDIV
 = 
SYSAHBCLKDIV_VÆ
;

366 
	}
}

	@bsp/system_LPC11xx.h

26 #i‚de‡
__SYSTEM_LPC11xx_H


27 
	#__SYSTEM_LPC11xx_H


	)

29 #ifde‡
__˝lu•lus


33 
	~<°döt.h
>

35 
uöt32_t
 
Sy°emC‹eClock
;

47 
Sy°emInô
 ();

58 
Sy°emC‹eClockUpd©e
 ();

60 #ifde‡
__˝lu•lus


	@data/data.c

5 
	#DATA_GLOBAL


	)

7 
	~"myty≥.h
"

8 
	~"d©a.h
"

9 
	~"h¨dw¨e.h
"

10 
	~"¥Ÿocﬁ.h
"

11 
	~"OS°rög.h
"

12 
	~"adc.h
"

13 
	~"Mi¸oOS.h
"

15 
	~"pwm.h
"

16 
	~"u£r.h
"

18 
	#PWM_BT1
 100

	)

19 
	#PWM_BT2
 60

	)

21 
	#VBAT_END
 205

	)

23 c⁄° 
uöt8
 
	gADch™√l
[]={0,1,2,3,5};

24 
uöt16
 
	gADbuff
[5];

25 
uöt16
 
	gADtmp
[5];

27 
TD©a
 
	gd©a
;

28 
	gpwm_˙t
;

29 
	giDay
;

30 
	giVbtEn
;

31 
	gbVbtE«bÀ
;

33 
FúeC¡
;

34 
Fúe_E«bÀ
;

36 
	$d©a_öô
()

38 
	`mem£t
–
ADbuff
, 0, ( ADbuff ));

39 
	`mem£t
–&
d©a
, 0, ( data ));

41 
FúeC¡
 = 0;

42 
Fúe_E«bÀ
 = 0;

44 
d©a
.
DlyVbt
 = -1;

45 
d©a
.
DlyVö
 = -1;

46 
d©a
.
DlyVout
 = -1;

47 
d©a
.
DlyIout
 = -1;

48 
pwm_˙t
 = 0;

50 
iVbtEn
 = 0;

51 
bVbtE«bÀ
 = 0;

53 
iDay
 = 24 * 60 * 60;

55 
d©a
.
iYórC¡
 = 12;

56 
d©a
.
iM⁄thC¡
 = 30;

58 
	`ADCInô
();

59 
	`¥_debug
("data init\n");

60 
	}
}

65 
	$d©a_YJ
()

67 if–
VINERR_IN
 )

69 if–!
	`PBI
–
d©a
.
yj°©e
, 0 ))

70 
	`SBI
–
d©a
.
yj°©e
, 0 );

74 if(
	`PBI
–
d©a
.
yj°©e
, 0 ))

75 
	`CBI
–
d©a
.
yj°©e
, 0 );

78 if–!
YJ_IN
 )

80 if–!
	`PBI
–
d©a
.
yj°©e
, 1 ))

81 
	`SBI
–
d©a
.
yj°©e
, 1 );

82 
BTOUT_H
;

85 if–
	`PBI
–
d©a
.
yj°©e
, 1 ))

86 
	`CBI
–
d©a
.
yj°©e
, 1 );

89 if–
d©a
.
yj°©e
 )

91 
BTGD_H
;

92 if–
bVbtE«bÀ
 )

94 
BTOUT_H
;

96 
pwm_˙t
 = 0;

97 
	`pwm1_£tB
( 0);

99 if–
	`PBI
(
d©a
.
yj°©e
, 
EPS_YJ_ZD
) )

101 
d©a
.
zt
 = 
EPS_STATE_YJ
;

102 }if–
	`PBI
–
d©a
.
yj°©e
, 
EPS_YJ_YC
))

104 
d©a
.
zt
 = 
EPS_STATE_YCYJ
;

105 }if–
	`PBI
–
d©a
.
yj°©e
, 
EPS_YJ_MYEAR
))

107 
d©a
.
zt
 = 
EPS_STATE_EPSYTEST
;

108 }if–
	`PBI
–
d©a
.
yj°©e
, 
EPS_YJ_MMONTH
 ))

110 
d©a
.
zt
 = 
EPS_STATE_EPSMTEST
;

111 }if–
	`PBI
–
d©a
.
yj°©e
, 
EPS_YJ_YEAR
))

113 
d©a
.
zt
 = 
EPS_STATE_YTEST
;

114 }if–
	`PBI
(
d©a
.
yj°©e
, 
EPS_YJ_MONTH
))

116 
d©a
.
zt
 = 
EPS_STATE_MTEST
;

119 if–
	`PBI
–
d©a
.
yj°©e
, 
EPS_YJ_QZ
 ))

121 
d©a
.
zt
 = 
EPS_STATE_QZYJ
;

123 
d©a
.
CD£c
 = 0;

126 
d©a
.
FD£c
 = 0;

127 
d©a
.
zt
 = 1;

128 
BTGD_L
;

129 
BTOUT_L
;

131 
	}
}

133 
	$d©a_yjCÀ¨
( )

135 
d©a
.
iYJdly
 = 0;

136 
d©a
.
yj°©e
 &~–
	`BIT
–
EPS_YJ_MONTH
Ë| BIT–
EPS_YJ_YEAR
Ë| BIT–
EPS_YJ_MMONTH
Ë| BIT–
EPS_YJ_MYEAR
) \

137 | 
	`BIT
–
EPS_YJ_YC
 )

139 
	}
}

141 
	$d©a_yjCål
–
uöt8
 
˘æ
 )

143 if–
d©a
.
GZb©
 )

147 if–
˘æ
 =
EPS_YJ_MONTH
 )

149 
d©a
.
iYJdly
 = 35;

150 
	`SBI
–
d©a
.
yj°©e
, 
EPS_YJ_MONTH
 );

151 }if–
˘æ
 =
EPS_YJ_YEAR
 )

153 
d©a
.
iYJdly
 = 60 * 60;

154 
	`SBI
–
d©a
.
yj°©e
, 
EPS_YJ_YEAR
 );

155 }if–
˘æ
 =
EPS_YJ_YC
 )

157 
d©a
.
iYJdly
 = 0;

158 
	`SBI
–
d©a
.
yj°©e
, 
EPS_YJ_YC
 );

161 
	}
}

166 
	$d©a_timedec
( )

168 if–
d©a
.
DlyVbt
>0 )

169 
d©a
.
DlyVbt
--;

170 if–
d©a
.
DlyVö
>0 )

171 
d©a
.
DlyVö
--;

172 if–
d©a
.
DlyVout
>0 )

173 
d©a
.
DlyVout
--;

174 if–
d©a
.
DlyIout
>0 )

175 
d©a
.
DlyIout
--;

178 if–
d©a
.
yjC¡
 )

180 
d©a
.
yjC¡
--;

181 if–
d©a
.
yjC¡
 == 0 )

183 
d©a
.
yj°©e
 &~–
	`BIT
–
EPS_YJ_MONTH
Ë| BIT–
EPS_YJ_YEAR
Ë| BIT–
EPS_YJ_MMONTH
Ë| BIT–
EPS_YJ_MYEAR
 ) );

189 if–
d©a
.
yj°©e
 )

191 
d©a
.
FD£c
++;

194 if–
pwm_˙t
 >
PWM_BT2
)

195 
d©a
.
CD£c
++;

198 if–
iDay
 > 0 )

200 
iDay
--;

201 if–
iDay
 == 0 )

203 
iDay
 = 24*60*60;

204 
d©a
.
iM⁄thC¡
--;

205 if–
d©a
.
iM⁄thC¡
 == 0 )

207 
d©a
.
iM⁄thC¡
 = 30;

208 
d©a
.
iYórC¡
--;

209 if–
d©a
.
iYórC¡
 == 0 )

211 
d©a
.
iYórC¡
 = 12;

212 
d©a
.
yjC¡
 = 90 * 60;

213 
	`SBI
–
d©a
.
yj°©e
, 
EPS_YJ_MYEAR
 );

216 
d©a
.
yjC¡
 = 5 * 60;

217 
	`SBI
–
d©a
.
yj°©e
, 
EPS_YJ_MMONTH
 );

223 
iDay
 = 24*60*60;

226 if–
iVbtEn
 > 0 )

228 
iVbtEn
--;

230 if–
iVbtEn
 == 0 )

232 
BTGD_L
;

233 
BTOUT_L
;

234 if–
d©a
.
yj°©e
 )

236 
	`__dißbÀ_úq
();

241 
	}
}

248 
	$d©a_pd
()

250 
TEpsSèã
 
°©e
={.state = 0};

251 
TEpsSèã
 
tmp
;

252 
tmp
.
°©e
= 0;

254 if–
d©a
.
Vbt
 > 290 || data.Vbt < 150 )

256 
bVbtE«bÀ
 = 0;

257 
pwm_˙t
 = 0;

258 if–
d©a
.
DlyVbt
 < 0 )

259 
d©a
.
DlyVbt
 = 4;

260 if–
d©a
.
DlyVbt
 == 0 )

262 
tmp
.
GZb©
 = 1;

264 
d©a
.
GZb©
 = 1;

265 
d©a
.
cdzt
 = 0;

268 
ô
 = 0;

269 if–
d©a
.
Vbt
 > 220 )

271 
bVbtE«bÀ
 = 1;

273 if–
d©a
.
Vbt
 > 275 )

275 
ô
 = 0;

276 }if–
d©a
.
Vbt
 > 270 )

278 
ô
 = 20;

279 }if–
d©a
.
Vbt
 > 260 )

281 
ô
 = 
PWM_BT2
;

284 
ô
 = 
PWM_BT1
;

286 if–
ô
 > 20 )

288 
d©a
.
cdzt
 = 1;

290 
pwm_˙t
 = 
ô
;

291 
d©a
.
DlyVbt
 = -1;

293 if–
VOUTERR_IN
 )

295 if–
d©a
.
DlyVout
 < 0 )

296 
d©a
.
DlyVout
 = 4;

297 if–
d©a
.
DlyVout
 == 0 )

299 
tmp
.
GZSCDL
 = 1;

303 
d©a
.
DlyVout
 = -1;

306 if–
°©e
.°©ê=
tmp
.state )

308 
d©a
.
°©e
 = state.state;

310 
°©e
 = 
tmp
;

312 if–
d©a
.
yj°©e
 )

314 
LED_BJ_ON
;

315 
pwm_˙t
 = 0;

316 if–
d©a
.
Vbt
 < 
VBAT_END
 )

318 if–
iVbtEn
 == 0 )

320 
iVbtEn
 = 30 * 60;

322 
	`d©a_yjCÀ¨
();

324 
BTOUT_L
;

325 
LED_BJ_OFF
;

329 
iVbtEn
 = 30 * 60;

330 
LED_BJ_OFF
;

333 if–
pwm_˙t
 >
PWM_BT2
 )

335 
LED_COM_ON
;

337 
LED_COM_OFF
;

339 if–
d©a
.
EPSgz
 )

341 
LED_GZ_ON
;

343 
LED_GZ_OFF
;

345 if–!
VINERR_IN
 )

347 
LED_POWER_ON
;

350 
LED_POWER_OFF
;

352 
	}
}

357 
öt16
 
	$GëADCVÆue
–
ch™√l
 )

359 
vÆue
;

360 
time
 = 50;

361 
	`ADC_E«bÀ
–
ch™√l
 );

362  
time
-- )

364 
vÆue
 = 
	`ADC_Gë
(0);

365 if–
vÆue
 >= 0 )

366  
vÆue
;

367 
	`OSTimeDly
–
HZ
/50 );

370 
	}
}

373 
D©aCJ_Task
( );

374 
	$D©aCJ_Task
( )

376 
i
;

377 
tmp
;

379 
	`pwm1_öô
(
PWM_MAX
+1);

380 
	`OSTimeDly
–
HZ
 );

384 
i
=0; i<5; i++)

386 
tmp
 = 
	`GëADCVÆue
(
ADch™√l
[
i
] );

387 if(
tmp
<0) ;

388 
ADtmp
[
i
] = 
tmp
;

390 
	`OSTimeDly
(1);

392 
ADbuff
[0] = 
ADtmp
[0] * 120 / 600;

393 
ADbuff
[1] = 
ADtmp
[1] * 240 / 600;

394 
ADbuff
[2] = 
ADtmp
[2] * 300 / 600;

395 
ADbuff
[3] = 
ADtmp
[3] * 240 / 600;

396 
ADbuff
[4] = 
ADtmp
[4] * 20 / 
pU§Cfg
->
JZi
;

398 
d©a
.
Vbt1
 = 
ADbuff
[0];

399 
d©a
.
Vbt
 = 
ADbuff
[1];

400 
d©a
.
Vout
 = 
ADbuff
[2];

401 
d©a
.
Vö
 = 
ADbuff
[3];

402 
d©a
.
Iout
 = 
ADbuff
[4];

404 
tmp
 = 
ADbuff
[1] - ADbuff[0];

405 if(
tmp
 < 0 )Åmp = 0;

406 
d©a
.
Vbt2
 = 
tmp
;

408 
	`d©a_pd
();

410 
	`pwm1_£tB
(
pwm_˙t
 );

412 
	}
}

414 
	$D©aJZi
–
uöt16
 
i
 )

416 
tmp
 = 
ADtmp
[4];

417 if(
tmp
 > 200 )

419 
tmp
 =Åm∞* 20 / 
i
;

420 
pU§Cfg
->
JZi
 = 
tmp
;

421 
	`U£rWrôe
(
EADDRESS_USER
);

423 
	}
}

426 
	~"pcomm™d.h
"

427 
CMD_FUNC
–
ïs
, "" )

430 
¥ötk
("Vbà%dV\n", 
d©a
.
Vbt
 );

431 
¥ötk
("Vö %dV\n", 
d©a
.
Vö
 );

432 
¥ötk
("Vouà%dV\n", 
d©a
.
Vout
 );

433 
¥ötk
("Iouà%dV\n", 
d©a
.
Iout
 );

435 
¥ötk
("°©ê%02x\tGZ %02x\n", 
d©a
.
EPS°©e
, d©a.
EPSgz
 );

436 
¥ötk
("yj°©ê%02x\n", 
d©a
.
yj°©e
 );

437 
¥ötk
("yó∏%d\tm⁄th%d\n", 
d©a
.
iYórC¡
, d©a.
iM⁄thC¡
 );

438 
¥ötk
("CD %d\tFD%d\n", 
d©a
.
CD£c
, d©a.
FD£c
 );

440 
¥ötk
("Iouà%d\n", 
ADtmp
[4]);

	@data/data.h

3 #i‚de‡
__DATA_H__


4 
	#__DATA_H__


	)

6 
	~"u£r.h
"

27 
	#EPS_STATE_ZD
 1

	)

28 
	#EPS_STATE_YJ
 2

	)

29 
	#EPS_STATE_QZYJ
 3

	)

30 
	#EPS_STATE_STOP
 4

	)

31 
	#EPS_STATE_YCYJ
 5

	)

32 
	#EPS_STATE_MTEST
 6

	)

33 
	#EPS_STATE_YTEST
 7

	)

34 
	#EPS_STATE_EPSMTEST
 8

	)

35 
	#EPS_STATE_EPSYTEST
 9

	)

38 
	#EPS_YJ_ZD
 0

	)

39 
	#EPS_YJ_QZ
 1

	)

40 
	#EPS_YJ_YC
 2

	)

41 
	#EPS_YJ_MONTH
 3

	)

42 
	#EPS_YJ_YEAR
 4

	)

43 
	#EPS_YJ_MMONTH
 5

	)

44 
	#EPS_YJ_MYEAR
 6

	)

47 
	#EPS_GZ_FD
 0

	)

48 
	#EPS_GZ_KZDY
 1

	)

49 
	#EPS_GZ_CD
 2

	)

50 
	#EPS_GZ_BAT
 3

	)

51 
	#EPS_GZ_SCKL
 4

	)

52 
	#EPS_GZ_SCDL
 5

	)

53 
	#EPS_GZ_TEST
 6

	)

55 
	#DCV1
 0

56 
	#DCV2
 1

57 
	#INV
 2

	)

58 
	#OUTV
 3

	)

59 
	#OUTA1
 4

	)

60 
	#INA1
 5

	)

63 
	uTEpsSèã


65 
uöt16
 
	m°©e
;

67 
uöt8
 
	mEPS°©e
;

68 
uöt8
 
	mEPSgz
;

71 
uöt16
 
	mzt
:7;

72 
uöt16
 
	mcdzt
:1;

73 
uöt16
 
	mGZfd
:1;

74 
uöt16
 
	mGZkzdy
:1;

75 
uöt16
 
	mGZcd
:1;

76 
uöt16
 
	mGZb©
:1;

77 
uöt16
 
	mGZSCKL
:1;

78 
uöt16
 
	mGZSCDL
:1;

79 
uöt16
 
	mGZTEST
:1;

81 }
	tTEpsSèã
;

84 
uöt16
 
	mVbt1
;

85 
uöt16
 
	mVbt2
;

86 
uöt16
 
	mVbt
;

87 
uöt16
 
	mVö
;

88 
uöt16
 
	mVout
;

89 
uöt16
 
	mIout
;

91 
öt8
 
	mDlyVbt
;

92 
öt8
 
	mDlyVö
;

93 
öt8
 
	mDlyVout
;

94 
öt8
 
	mDlyIout
;

96 
uöt16
 
	myj°©e
;

98 
uöt16
 
	m°©e
;

100 
uöt16
 
	mEPS°©e
:8;

101 
uöt16
 
	mEPSgz
:8;

104 
uöt16
 
	mzt
:7;

105 
uöt16
 
	mcdzt
:1;

106 
uöt16
 
	mGZfd
:1;

107 
uöt16
 
	mGZkzdy
:1;

108 
uöt16
 
	mGZcd
:1;

109 
uöt16
 
	mGZb©
:1;

110 
uöt16
 
	mGZSCKL
:1;

111 
uöt16
 
	mGZSCDL
:1;

112 
uöt16
 
	mGZTEST
:1;

116 
uöt32
 
	mFD£c
;

117 
uöt32
 
	mCD£c
;

118 
uöt32
 
	myjC¡
;

120 
uöt8
 
	miYórC¡
;

121 
uöt8
 
	miM⁄thC¡
;

123 
uöt16
 
	miYJdly
;

125 
uöt8
 
	miRunDly
;

126 }
	tTD©a
;

128 
TD©a
 
d©a
;

130 
uöt16
 
ADtmp
[5];

133 
d©a_öô
 ( );

134 
d©a_timedec
( );

135 
D©aJZi
–
uöt16
 
i
 );

137 
d©a_pd
();

138 
d©a_YJ
();

140 
d©a_yjCÀ¨
( );

141 
d©a_yjCål
–
uöt8
 
˘æ
 );

	@data/djPro.c

2 
	~"myty≥.h
"

3 
	~"ˇn.h
"

4 
	~"myFifo.h
"

5 
	~"djPro.h
"

6 
	~"≠p_cfg.h
"

7 
	~"u£r.h
"

8 
	~"b•.h
"

9 
	~"drcom.h
"

10 
	~"OSSåög.h
"

13 
TFIFO_TYPE
–
CAN_msg
, 16 );

14 
	$FIFO_TYPE
–
	tCAN_msg
 ) 
	tTProBuff
;

16 
TProBuff
 
ProBuff
;

19 
cö
,
cout
,
c˙t
;

20 
uöt8
 
ˇnfûe_buff
[256];

21 
uöt8
 
ˇnfûeRx_buff
[256];

22 
uöt8
 
ˇnfûeRx_num
;

23 
ˇnfûe_£ndí
;

24 
ˇnfûe_°©e
;

27 
	$djPro_Inô
( )

29 
cö
 = 
cout
 = 
c˙t
 = 0;

30 
ˇnfûe_£ndí
 = 0;

31 
ˇnfûe_°©e
 = 0;

32 
	`FIFO_CLEAN
–
ProBuff
 );

33 
	}
}

36 
	$ˇnD_SídDJ
( )

38 
i
;

39 
size
;

40 
TCANFûe
 *
pd
;

41 
OS_SREG_VAR
;

44 if–
ˇnfûe_£ndí
 )

47 
	`OS_ENTER_CRITICAL
();

49 
	`mem£t
–
ˇnfûe_buff
, 0, (canfile_buff ));

51 
pd
 = (
TCANFûe
*)
ˇnfûe_buff
;

52 
size
 = 0;

53 
i
=0; i<
pU§Cfg
->
cou¡
; i++)

55 if–
	`PBI
–
djBuff
[
i
].
°©us
, 7 ))

57 
pd
->
d©a
[
size
++] = 
i
+1;

60 
pd
->
size
 = size+3;

61 
pd
->
cmd
 = 
SIGN_FILE_DJADDR
;

62 
pd
->
˙t
 = 
size
;

64 
ˇnfûe_£ndí
 = 
size
+3;

66 
	`OS_EXIT_CRITICAL
();

67  
TRUE
;

68 
	}
}

70 
	$ˇnD_SídDo‹
( )

72 
i
;

73 
TCANFûe
 *
pd
;

74 
OS_SREG_VAR
;

77 if–
ˇnfûe_£ndí
 )

80 
	`OS_ENTER_CRITICAL
();

82 
	`mem£t
–
ˇnfûe_buff
, 0, (canfile_buff ));

84 
pd
 = (
TCANFûe
*)
ˇnfûe_buff
;

85 
pd
->
d©a
[0] = 
pU§Cfg
->
addªss
;

86 
i
=0; i<
pU§Cfg
->
cou¡
; i++)

88 if–
	`PBI
–
djBuff
[
i
].
°©us
, 7 ))

90 
pd
->
d©a
[
i
+1] = 
djBuff
[i].
m_Do‹
;

93 
pd
->
size
 = 
i
+4;

94 
pd
->
˙t
 = 
i
;

95 
pd
->
cmd
 = 
SIGN_FILE_DOORSTATE
;

97 
ˇnfûe_£ndí
 = 
pd
->
size
;

99 
	`OS_EXIT_CRITICAL
();

100  
TRUE
;

101 
	}
}

103 
	$ˇnD_SídDo‹Ty≥
( )

105 
i
;

106 
TCANFûe
 *
pd
;

107 
OS_SREG_VAR
;

110 if–
ˇnfûe_£ndí
 )

113 
	`OS_ENTER_CRITICAL
();

115 
	`mem£t
–
ˇnfûe_buff
, 0, (canfile_buff ));

117 
pd
 = (
TCANFûe
*)
ˇnfûe_buff
;

118 
pd
->
d©a
[0] = 
pU§Cfg
->
addªss
;

119 
i
=0; i<
pU§Cfg
->
cou¡
; i++)

121 
pd
->
d©a
[
i
] = 
djBuff
[i].
ty≥
;

123 
pd
->
size
 = 
i
+4;

124 
pd
->
˙t
 = 
i
;

125 
pd
->
cmd
 = 
SIGN_FILE_OBJTYPE
;

127 
ˇnfûe_£ndí
 = 
pd
->
size
;

129 
	`OS_EXIT_CRITICAL
();

130  
TRUE
;

131 
	}
}

133 
	$ˇnD_SídFûe
–
uöt8
 *
buff
, uöt8 
Àn
 )

135 
OS_SREG_VAR
;

136 
i
;

137 
uöt8
 *
pd
;

138 if–
ˇnfûe_£ndí
 )

140 
	`OS_ENTER_CRITICAL
();

141 
ˇnfûe_£ndí
 = 
Àn
+1;

143 
pd
 = 
ˇnfûe_buff
;

144 *
pd
++ = 
Àn
+1;

145 
i
=0; i<
Àn
; i++)

146 *
pd
++ = 
buff
[
i
];

148 
	`OS_EXIT_CRITICAL
();

149  
Àn
;

150 
	}
}

153 
	$djPro_Put
–
CAN_msg
 *
pMsg
 )

155  
	`FIFO_Put
–
ProBuff
, *
pMsg
 );

156 
	}
}

158 
	$ˇn_wrôe
(
CAN_msg
 *
pMsg
, 
uöt32
 
addr
, 
uöt8
 *
buff
, 
size
 )

160 
i
;

161 
pMsg
->
id
 = 
addr
;

162 
size
 = 
	`MIN
( size, 8 );

163 
pMsg
->
Àn
 = 
size
==0?1: size;

164 
i
=0; i<
size
; i++)

165 
pMsg
->
buff
[
i
] = buff[i];

166  
size
;

167 
	}
}

173 
	$ˇnD_£ndFûe
–
CAN_msg
 *
pMsg
 )

175 
size
 = -1;

176 
num
;

177 
uöt32
 
addr
=0;

178 
˙t
;

180 if–
ˇnfûe_£ndí
 )

182 if–
size
 < 0 )

184 
num
 = 0;

185 
size
 = 
ˇnfûe_£ndí
;

186 
ˇnfûe_°©e
 = 0;

189 if–
ˇnfûe_°©e
 == 0)

191 
addr
 = 
	`TCANID_PTOPFILE
–
pU§Cfg
->
addªss
, 0, 
TCANID_TYPE_FILEBEGING
 );

193 
ˇnfûe_°©e
 = 1;

196 if–
size
 < 9)

198 
addr
 = 
	`TCANID_PTOPFILE
–
pU§Cfg
->
addªss
, 0, 
TCANID_TYPE_FILEEND
 );

199 
	`ˇn_wrôe
(
pMsg
, 
addr
, &
ˇnfûe_buff
[
num
], 
size
 + 1);

200 
ˇnfûe_£ndí
 = 0;

201 
size
 = -1;

206 
addr
 = 
	`TCANID_PTOPFILE
–
pU§Cfg
->
addªss
, 0, 
TCANID_TYPE_FILEING
);

211 
˙t
 = 
	`ˇn_wrôe
(
pMsg
, 
addr
, &
ˇnfûe_buff
[
num
], 
size
 );

212 
size
 -
˙t
;

213 
num
 +
˙t
;

217 
	}
}

219 
	$djPro_Gë
–
CAN_msg
 *
pMsg
 )

221 if–
	`ˇnD_£ndFûe
–
pMsg
 ) )  1;

222  
	`FIFO_Gë
–
ProBuff
, *
pMsg
 );

223 
	}
}

225 
	$djPro_TønsCål
–
uöt8
 
lo›
, uöt8 
addr
, uöt8 
cmd
 )

227 
CAN_msg
 
msg
;

228 
msg
.
id
 = 
	`TCANID_BROABCAST
( 0 );

229 
msg
.
˙t
 = 4;

230 
msg
.
DJsign
 = 
CMD_SIGN_CTRL
;

231 
msg
.
DJlo›
 = 
lo›
;

232 
msg
.
DJaddr
 = 
addr
;

233 
msg
.
DJty≥
 = 
cmd
;

234  
	`FIFO_Put
–
ProBuff
, 
msg
 );

235 
	}
}

237 
	$djPro_TønsRe£t
()

239 
CAN_msg
 
msg
;

240 
msg
.
id
 = 
	`TCANID_BROABCAST
( 0 );

241 
msg
.
˙t
 = 4;

242 
msg
.
DJsign
 = 
CMD_SIGN_CMD
;

243 
msg
.
DJlo›
 = 
SIGN_CMD_RESET
;

244 
msg
.
DJaddr
 = 0;

245 
msg
.
DJty≥
 = 0;

246  
	`FIFO_Put
–
ProBuff
, 
msg
 );

247 
	}
}

249 
	$djPro_Tøns
(
uöt8
 
sign
, uöt8 
lo›
, uöt8 
addr
, uöt8 
ty≥
 )

251 
CAN_msg
 
msg
;

252 
msg
.
id
 = 
	`TCANID_BROABCAST
( 0 );

253 
msg
.
˙t
 = 4;

254 
msg
.
DJsign
 = 
sign
;

255 
msg
.
DJlo›
 = 
lo›
;

256 
msg
.
DJaddr
 = 
addr
;

257 
msg
.
DJty≥
 = 
ty≥
;

258  
	`FIFO_Put
–
ProBuff
, 
msg
 );

259 
	}
}

262 
	~"d©a.h
"

264 
	#GëV
(
a
Ë(◊+5)/10 )

	)

265 
	$djPro_AutoTøns
( )

267 
CAN_msg
 
msg
;

268 
msg
.
id
 = 
	`TCANID_PTOPDATA
–
pU§Cfg
->
addªss
 );

269 
msg
.
˙t
 = 8;

270 
msg
.
sign
 = 
DJ_CMD_LOOP
;

274 
	`FIFO_Put
–
ProBuff
, 
msg
 );

275 
	}
}

280 
	$ˇnD_ªadCMD
–
CAN_msg
 *
pmsg
)

282 
uöt8
 
sign
;

283 
uöt8
 
lo›
;

284 
uöt8
 
addr
;

285 
uöt8
 
ty≥
;

287 
sign
 = 
pmsg
->
buff
[0];

288 
lo›
 = 
pmsg
->
buff
[1];

289 
addr
 = 
pmsg
->
buff
[2];

290 
ty≥
 = 
pmsg
->
buff
[3];

292 if–
lo›
 !
pU§Cfg
->
addªss
 && 
sign
 !
CMD_SIGN_CMD
 )

294 
	`DEBUG2
("loop: %x %x %x %x\n",

295 
sign
, 
lo›
, 
addr
, 
ty≥
);

298  
sign
 )

300 
CMD_SIGN_CMD
:

301  
lo›
 )

303 
SIGN_CMD_RESET
 :

304 
	`DEBUG0
("reset");

305 
	`drcom_öô
();

306 
	`cmdRe£t
();

307 
	`AUTOPROC
();

309 
SIGN_CMD_REG
 :

311 
	`drcom_dj
();

313 
SIGN_CMD_YJ
 :

315 
	`cmdYJ
();

317 
SIGN_CMD_STOPYJ
:

319 
	`cmdRe£t
();

321 
SIGN_CMD_AUTO
 :

324 
SIGN_CMD_TEST
 :

326 
	`AddComm™d
–
addr
, 
DATA_CMD_TEST
 );

328 
SIGN_CMD_CLEANPROG
 :

331 
SIGN_CMD_STOPPROG
 :

333 
	`ExôSëAddr
();

335 
SIGN_CMD_POWER
 :

339 
SIGN_CMD_CLEANADDR
 :

342 
SIGN_CMD_DJ
:

343 
	`cmdTøns
–
addr
 );

346 
	`DEBUG2
("Œﬁ–ß√¸¡Ó");

350 
CMD_SIGN_CTRL
:

352 
ty≥
 &= 0xF;

353 if–
addr
 )

355 
djBuff
[
addr
-1].
m_CuºítDúe˘
 = 
ty≥
;

356 if–
	`PBI
–
djBuff
[ 
addr
-1].
°©us
 , 7 ) )

358  
ty≥
 )

361 
	`cmdLe·
–
addr
 );

364 
	`cmdRight
–
addr
 );

367 
	`cmdOff
–
addr
 );

371 
	`cmdOn
–
addr
 );

374 
	`djPro_Tøns
–
DJ_CMD_SIGN_BIANGFX
, 
lo›
, 
addr
, 
ty≥
 );

378 
CMD_SIGN_PROG
:

380 
	`SëAddr
–
addr
 );

382 
CMD_SIGN_REG
:

386 
	`drcom_djadd
–
addr
 );

387 
	`djPro_Tøns
–
DJ_CMD_SIGN_REG
, 
lo›
, 
addr
, 0 );

391 
CMD_SIGN_NOREG
:

395 
	`drcom_djdñ
–
addr
 );

396 
	`djPro_Tøns
–
DJ_CMD_SIGN_NOREG
, 
lo›
, 
addr
, 0);

399 
CMD_SIGN_MASK
:

401 
	`drcom_pbadd
–
addr
 );

402 
	`djPro_Tøns
–
DJ_CMD_SIGN_MASK
, 
lo›
, 
addr
, 0);

404 
CMD_SIGN_NOMASK
:

405 
	`drcom_pbdñ
(
addr
);

406 
	`djPro_Tøns
–
DJ_CMD_SIGN_NOMASK
, 
lo›
, 
addr
, 0);

409 
CMD_SIGN_FINDREG
:

411 
	`ˇnD_SídDJ
();

413 
CMD_SIGN_FINDDJMSG
:

417 
CMD_SIGN_FINDDOORMSG
:

418 
	`ˇnD_SídDo‹
();

420 
CMD_SIGN_FINDOBJTYPE
:

421 
	`ˇnD_SídDo‹Ty≥
();

423 
CMD_SIGN_SETOBJCNT
:

424 
	`U£rSëCou¡
–
lo›
 );

425 
	`djPro_Tøns
–
CMD_SIGN_SETOBJCNT
, 
lo›
, 
addr
, 0);

428 
CMD_SIGN_CTRL_START
:

429 
	`cmdYJ
() ;

431 
CMD_SIGN_FIRE
:

434 
	`DEBUG2
("Œﬁ–ß");

437 
	`DEBUG2
(" : %x %x %x %x\n", 
sign
, 
lo›
, 
addr
, 
ty≥
);

438 
	}
}

443 
	$ˇnD_ªadfûe
–
uöt8
 
ty≥
, 
CAN_msg
 *
pd
 )

445 
i
;

446 
îr
 = 0;

447 
ˇnD_ªadfûe_ªad
:

448 if–
ˇnfûeRx_num
 < (
ˇnfûeRx_buff
)-8 )

450 
i
=0; i<
pd
->
Àn
; i++)

451 
ˇnfûeRx_buff
[
ˇnfûeRx_num
++] = 
pd
->
buff
[
i
];

454 
îr
= 1;

455 
	`DEBUG2
("Œƒº˛¥Û–°≥¨≥ˆª∫¥Ê\n");

458  
ty≥
)

460 
TCANID_TYPE_FILEBEGING
:

461 if–
ˇnfûeRx_num
 !
pd
->
Àn
 )

463 
ˇnfûeRx_num
 = 0;

464 
ˇnD_ªadfûe_ªad
;

467 
TCANID_TYPE_FILEING
:

469 
TCANID_TYPE_FILEEND
:

470 
ˇnfûeRx_num
 = 0;

471 if–
îr
 == 0 )

473 
	`d©a_fûe
–&
ˇnfûeRx_buff
[1] );

477 
	}
}

479 
	$djPro_Pro˚ssög
–
CAN_msg
 *
pMsg
 )

481 if–
pMsg
->
IDty≥
 =
TCANID_TYPE_DATA
)

483 
	`ˇnD_ªadCMD
(
pMsg
);

486 
	`DEBUG2
–"mod %d Sadd∏%d\n", 
pMsg
->
IDmod
,ÖMsg->
IDSaddr
 );

487 if–
pMsg
->
IDmod
 =
TCANID_MOD_PTOP
 &&ÖMsg->
IDSaddr
 =
pU§Cfg
->
addªss
 )

489  
pMsg
->
IDty≥
)

491 
TCANID_TYPE_FILEBEGING
:

492 
TCANID_TYPE_FILEING
:

493 
TCANID_TYPE_FILEEND
:

494 
	`ˇnD_ªadfûe
–
pMsg
->
IDty≥
,ÖMsg );

500 
	}
}

	@data/djPro.h

2 #i‚de‡
__DJPRO_H__


3 
	#__DJPRO_H__


	)

5 
	~"ˇn.h
"

10 
	sTCANID
{

12 
uöt32
 
	mid
;

14 
uöt32
 
	mty≥
 : 5;

15 
	#TCANID_TYPE_DATA
 0x08

16 
	#TCANID_TYPE_FILEBEGING
 0x10

17 
	#TCANID_TYPE_FILEEND
 0x12

18 
	#TCANID_TYPE_FILEING
 0x14

19 

	)

20 
uöt32
 
	mRaddr
 : 8;

21 
uöt32
 
	mSaddr
 : 8;

23 
uöt32
 
	mmod
 : 8;

24 
	#TCANID_MOD_PTOP
 0x08

25 
	#TCANID_MOD_BROABCAST
 0x04

26 
uöt32
 
nc
 : 3;

	)

29 }
	tTCANID
;

31 
	#TCANID_DEFINDE
–
ty≥
, 
addr
, 
num
, 
mod
) \

32 ((((
ty≥
)&0x1F)<<0Ë| (((
addr
)&0xFFË<< 5Ë| (((
num
)&0xFFË<< 13Ë| (((
mod
)&0xFFË<<21Ë| 
CAN_MSG_EXT
 )

	)

33 
	#TCANID_PTOPDATA
–
addr
 ) 
	`TCANID_DEFINDE
–
TCANID_TYPE_DATA
,áddr, 0, 
TCANID_MOD_PTOP
 )

	)

34 
	#TCANID_BROABCAST
–
addr
 ) 
	`TCANID_DEFINDE
–
TCANID_TYPE_DATA
,áddr, 0, 
TCANID_MOD_BROABCAST
 )

	)

36 
	#TCANID_PTOPFILE
–
addr
, 
num
, 
ty≥
Ë
	`TCANID_DEFINDE
–ty≥,áddr,Çum, 
TCANID_MOD_PTOP
)

	)

38 
	sTCANCMD
{

39 
uöt8
 
	msign
;

40 
uöt8
 
	mlo›
;

41 
uöt8
 
	maddr
;

42 
uöt8
 
	mty≥
;

43 }
	tTCANCMD
;

46 
uöt8
 
	mbuff
[256];

47 
	s__PACKED__


49 
uöt8
 
	msize
;

50 
uöt8
 
	mcmd
;

51 
uöt8
 
	m˙t
;

52 
uöt8
 
	md©a
[250];

54 }
	tTCANFûe
;

57 
uöt8
 
	mbuff
[8];

59 
uöt32
 
	mD©aA
;

60 
uöt32
 
	mD©aB
;

62 
	s__PACKED__


64 
uöt8
 
	msign
;

65 
uöt8
 
	mVö
;

66 
uöt8
 
	mVout
;

67 
uöt8
 
	mIout
;

69 
uöt8
 
	mVbt
;

70 
uöt8
 
	mVbt1
;

71 
uöt8
 
	m°©e
;

72 
uöt8
 
	mEPSgz
;

74 
	s__PACKED__


76 
uöt8
 
	msign1
;

77 
uöt8
 
	maddr1
;

79 }
	tTCANPowî
;

86 
	#CMD_SIGN_CMD
 1

	)

87 
	#CMD_SIGN_CTRL
 2

	)

88 
	#CMD_SIGN_PROG
 3

	)

89 
	#CMD_SIGN_REG
 4

	)

90 
	#CMD_SIGN_NOREG
 5

	)

91 
	#CMD_SIGN_MASK
 6

	)

92 
	#CMD_SIGN_NOMASK
 7

	)

93 
	#CMD_SIGN_FINDREG
 0x11

	)

94 
	#CMD_SIGN_FINDDJMSG
 0x12

	)

95 
	#CMD_SIGN_FINDDOORMSG
 0x13

	)

96 
	#CMD_SIGN_FINDOBJTYPE
 0x14

	)

97 
	#CMD_SIGN_SETOBJCNT
 0x15

	)

98 
	#CMD_SIGN_CTRL_START
 0x16

	)

99 
	#CMD_SIGN_FIRE
 0x80

	)

106 
	#SIGN_CMD_RESET
 0x01

	)

107 
	#SIGN_CMD_REG
 0x02

	)

108 
	#SIGN_CMD_YJ
 0x03

	)

109 
	#SIGN_CMD_STOPYJ
 0x04

	)

110 
	#SIGN_CMD_AUTO
 0x05

	)

111 
	#SIGN_CMD_TEST
 0x07

	)

112 
	#SIGN_CMD_CLEANPROG
 0x08

	)

113 
	#SIGN_CMD_STOPPROG
 0x09

	)

114 
	#SIGN_CMD_POWER
 0x0A

	)

115 
	#SIGN_CMD_CLEANADDR
 0x0B

	)

116 
	#SIGN_CMD_DJ
 0x0C

	)

123 
	#SIGN_CMD_POWER_SDYJ
 0xF1

	)

124 
	#SIGN_CMD_POWER_MOUTH
 0xF2

	)

125 
	#SIGN_CMD_POWER_YEAR
 0xF3

	)

126 
	#SIGN_CMD_POWER_QZYJ
 0xF4

	)

127 
	#SIGN_CMD_POWER_STOPYJ
 0xFA

	)

134 
	#SIGN_FILE_NORMAL
 0x09

	)

135 
	#SIGN_FILE_TYPE
 0x08

	)

136 
	#SIGN_FILE_PROG
 0x03

	)

137 
	#SIGN_FILE_DJADDR
 0x02

	)

138 
	#SIGN_FILE_OBJTYPE
 0x0B

	)

139 
	#SIGN_FILE_DOORSTATE
 0x0A

	)

144 
	#DJ_CMD_SIGN_COMWARN
 0x01

	)

145 
	#DJ_CMD_SIGN_NOCOMWARN
 0x02

	)

146 
	#DJ_CMD_SIGN_BIANGFX
 0x03

	)

147 
	#DJ_CMD_SIGN_QZYJ
 0x04

148 
	#DJ_CMD_SIGN_NOQZYJ
 0x05

149 

	)

150 
	#DJ_CMD_SIGN_GYGZ
 0x11

	)

151 
	#DJ_CMD_SIGN_NOGYGZ
 0x21

	)

152 
	#DJ_CMD_SIGN_POWERERR
 0x12

153 
	#DJ_CMD_SIGN_NOPOWERERR
 0x22

154 
	#DJ_CMD_SIGN_PDZZ
 0x13

155 
	#DJ_CMD_SIGN_NOPDZZ
 0x23

156 
	#DJ_CMD_SIGN_YJ
 0x14

157 
	#DJ_CMD_SIGN_NOYJ
 0x24

158 
	#DJ_CMD_SIGN_DCGZ
 0x15

	)

159 
	#DJ_CMD_SIGN_NODCGZ
 0x25

	)

161 
	#DJ_CMD_SIGN_QYBH
 0x17

162 

	)

164 
	#DJ_CMD_SIGN_DOOR
 0x1A

	)

165 
	#DJ_CMD_SIGN_NODOOR
 0x2A

	)

166 
	#DJ_CMD_SIGN_CTRL
 0x1B

	)

167 
	#DJ_CMD_SIGN_NOCTRL
 0x2B

	)

169 
	#DJ_CMD_SIGN_ZXDD
 0x51

	)

170 
	#DJ_CMD_SIGN_NOZXDD
 0x52

	)

173 
	#DJ_CMD_DJLOOP
 0x70

	)

175 
	#DJ_CMD_POWERLOOP
 0x71

	)

176 
	#DJ_CMD_POWERLOOP2
 0x72

	)

177 
	#DJ_CMD_LOOP
 0x73

	)

178 
	#DJ_CMD_EPSLOOP
 0x74

	)

179 
	#DJ_CMD_EPSLOOP2
 0x75

	)

181 
	#DJ_CMD_SIGN_FILE
 0x78

	)

182 
	#DJ_CMD_SIGN_DOORSTATE
 0x7A

	)

184 
	#DJ_CMD_SIGN_EPSCTRL
 0xA0

	)

185 
	#DJ_CMD_SIGN_FIRE
 0x80

	)

186 
	#DJ_CMD_SIGN_ZXDL
 0x87

	)

187 
	#DJ_CMD_SIGN_NOZXDL
 0x88

	)

188 
	#DJ_CMD_SIGN_MASK
 0x97

	)

189 
	#DJ_CMD_SIGN_NOMASK
 0x98

	)

190 
	#DJ_CMD_SIGN_REG
 0x99

	)

191 
	#DJ_CMD_SIGN_NOREG
 0x9®

	)

192 
	#DJ_CMD_SIGN_PROGRET
 0x9B

193 
	#DJ_CMD_SIGN_RETURN
 0x9C

	)

194 
	#DJ_CMD_SIGN_PROGOK
 0x9D

	)

195 
	#DJ_CMD_SIGN_NORMAL
 0x9E

	)

196 
	#DJ_CMD_SIGN_NORMALPRG
 0x9E

197 
	#DJ_CMD_SIGN_TYPEPRG
 0x9F

198 

	)

199 
	#DJ_CMD_SIGN_EPSCTRL
 0xA0

	)

200 
	#DJ_CMD_SIGN_EPSCTRLERR
 0xA1

	)

207 
	#DJ_STATE_COM_ERROR
 0x01

208 
	#DJ_STATE_COM_NOERR
 0x02

209 
	#DJ_STATE_DJ_CONTRL
 0x03

210 
	#DJ_STATE_QZYJ
 0x04

211 
	#DJ_STATE_NOQZYJ
 0x05

212 
	#DJ_STATE_GY_ERROR
 0x11

213 
	#DJ_STATE_POWER
 0x12

214 
	#DJ_STATE_PD_ERROR
 0x13

215 
	#DJ_STATE_DJ_YJ
 0x14

216 
	#DJ_STATE_DC_ERROR
 0x15

217 
	#DJ_STATE_QYBH
 0x17

218 
	#DJ_STATE_GY_NOERR
 0x21

219 
	#DJ_STATE_POWER_NO
 0x22

220 
	#DJ_STATE_PD_NOERR
 0x23

221 
	#DJ_STATE_DJ_NOYJ
 0x24

222 
	#DJ_STATE_DC_NOERR
 0x25

223 
	#DJ_STATE_OTHER
 0x56

224 
	#DJ_STATE_FIRE
 0x80

225 
	#DJ_STATE_HL_ERROR
 0x87

226 
	#DJ_STATE_HL_NOERR
 0x88

227 
	#DJ_STATE_FJ_ERROR
 0x89

228 
	#DJ_STATE_FJ_NOERR
 0x8A

229 
	#DJ_STATE_PWCOM_ERROR
 0x8B

230 
	#DJ_STATE_PWCOM_NOERR
 0x8C

231 
	#DJ_STATE_PWR_YJ
 0x8D

232 
	#DJ_STATE_PWR_NOYJ
 0x8E

233 
	#DJ_STATE_PWR_ERROR
 0x91

234 
	#DJ_STATE_PWR_NOERR
 0x92

235 
	#DJ_STATE_REGEDIT
 0x99

236 
	#DJ_STATE_NOREG
 0x9A

237 
	#DJ_STATE_PROGRAM
 0x9B

238 
	#DJ_STATE_RETURN
 0x9C

239 
	#DJ_STATE_PROGOK
 0x9D

240 
	#DJ_STATE_NORMALPRG
 0x9E

241 
	#DJ_STATE_TYPEPRG
 0x9F

242 

	)

244 
	#DJ_STATE_OTHER_232
 0x21

245 
	#DJ_STATE_OTHER_FIER
 0x22

246 
	#DJ_STATE_OTHER_N232
 0x23

247 
	#DJ_STATE_OTHER_NFIER
 0x24

248 
	#DJ_STATE_OTHER_RESET
 0x25

249 
	#DJ_STATE_OTHER_OPEN
 0x26

250 
	#DJ_STATE_OTHER_POWER
 0x27

251 
	#DJ_STATE_OTHER_NPOWER
 0x28

252 
	#DJ_STATE_OTHER_BD
 0x29

253 
	#DJ_STATE_OTHER_NBD
 0x2A

254 
	#DJ_STATE_OTHER_YJ
 0x2B

255 
	#DJ_STATE_OTHER_NYJ
 0x2C

256 
	#DJ_STATE_OTHER_W232
 0x2D

257 
	#DJ_STATE_OTHER_NW232
 0x2E

258 

	)

263 
	#DJ_CMD_DJLOOP
 0x70

	)

269 
	#AUTO_LED_ON
 0

	)

270 
	#AUTO_LED_LEFT
 1

	)

271 
	#AUTO_LED_RIGHT
 2

	)

272 
	#AUTO_LED_OFF
 3

	)

279 
	#DATA_CMD_RESET
 1

	)

280 
	#DATA_CMD_DJ
 2

	)

281 
	#DATA_CMD_YJ
 3

	)

282 
	#DATA_CMD_LEFT
 4

	)

283 
	#DATA_CMD_RIGHT
 5

	)

284 
	#DATA_CMD_ALLOFF
 6

	)

285 
	#DATA_CMD_TEST
 7

	)

286 
	#DATA_CMD_SETADDR
 8

	)

287 
	#DATA_CMD_READSTATE
 9

	)

288 
	#DATA_CMD_ALLON
 10

	)

289 
	#DATA_CMD_STOPSETADDR
 11

	)

293 
djPro_Inô
( );

294 
ˇnD_SídFûe
–
uöt8
 *
buff
, uöt8 
Àn
 );

295 
djPro_Put
–
CAN_msg
 *
pMsg
 );

296 
djPro_Gë
–
CAN_msg
 *
pMsg
 );

297 
djPro_TønsCål
–
uöt8
 
lo›
, uöt8 
addr
, uöt8 
cmd
 );

298 
djPro_TønsRe£t
();

299 
djPro_Tøns
(
uöt8
 
sign
, uöt8 
lo›
, uöt8 
addr
, uöt8 
ty≥
 );

301 
djPro_Pro˚ssög
–
CAN_msg
 *
pMsg
 );

303 
djPro_AutoTøns
( );

	@data/drcom.c

2 
	~"myty≥.h
"

4 
	~"rcom.h
"

5 
	~"drcom.h
"

6 
	~"≠p_cfg.h
"

8 
	~"OS°rög.h
"

9 
	~"¥Ÿocﬁ.h
"

10 
	~"wdt.h
"

11 
	~"Mi¸oOS.h
"

12 
	~"u£r.h
"

13 
	~"h¨dw¨e.h
"

16 
	#ˇnD_SídCMD
(
sign
, 
addr
, 
ty≥
 ) 
	`djPro_Tøns
–sign, 
pU§Cfg
->
addªss
,áddr,Åy≥ )

	)

19 
uöt32
 
	gAutoProc_time
;

20 
uöt32
 
	gU£rSave_time
;

21 
uöt32
 
	gRe£tDly_time
;

22 
rcomEº_å™s
;

24 
CDëe˘‹
 
	gdjBuff
[
MAX_POINT_COUNT
];

26 
	sTHBZH_CMD


28 
uöt8
 
	mcmd
;

29 
uöt8
 
	md©a
;

30 }
	tTHBZH_CMD
;

33 
uöt8
 
	gcmdORd©a
;

34 
uöt8
 
	gTønsC¡
, 
	gTønsSize
;

35 
uöt8
 
	gSaddªss
;

37 
uöt8
 
	gScmd
, 
	gSaddr
;

38 
uöt16
 
	gSd©a
;

39 
uöt8
 
	gS¥oEn
;

40 
	grcom_djtime
;

42 
ölöe


43 
	$waô_rcomAdd
–
uöt8
 
cmd
, uöt8 
addr
 )

45 
i
=0; i<
HZ
/20; i++ )

47 if–
	`rcom_D©a
–
cmd
, 
addr
 ))

49 
	`OSTimeDly
(1);

52 
	}
}

57 
	$drcom_öô
()

59 
	`mem£t
–
djBuff
, 0, ( djBuff ));

60 
Saddªss
 = 0;

61 
S¥oEn
 = 0;

62 
AutoProc_time
 = 5;

63 
rcom_djtime
 = -1;

64 
i
;

65  
i
=0; i<
MAX_POINT_COUNT
; i++)

67 
djBuff
[
i
].
°©us
 = 
	`U£rGëDJ
(i);

68 
djBuff
[
i
].
m_Dúe˘
 = 
	`U£rGëDeÁu…
(i);

69 
ty≥
 = 
djBuff
[
i
].type;

70 
djBuff
[
i
].
ty≥
 =Åy≥ >
eObjEnd
? 
eDo‹OFF
:Åype;

72 
djBuff
[
i
].
m_Do‹
 = 0;

73  
ty≥
 )

75 
eDo‹OFF
:

76 
eDo‹OFFL
:

77 
eDo‹OFFR
:

80 
eDo‹ON
:

81 
djBuff
[
i
].
m_Do‹
 = 3;

83 
eDo‹Le·
:

84 
djBuff
[
i
].
m_Do‹
 = 1;

86 
eDo‹Right
:

87 
djBuff
[
i
].
m_Do‹
 = 2;

89 
eDJON
:

90 
djBuff
[
i
].
m_DeÁu…Dúe˘
 = 0;

92 
eDJLe·
:

93 
djBuff
[
i
].
m_DeÁu…Dúe˘
 = 1;

95 
eDJRight
:

96 
djBuff
[
i
].
m_DeÁu…Dúe˘
 = 2;

98 
eDJOFF
:

99 
djBuff
[
i
].
m_DeÁu…Dúe˘
 = 3;

102 
djBuff
[
i
].
m_CuºítDúe˘
 = djBuff[i].
m_DeÁu…Dúe˘
;

103 
djBuff
[
i
].
O∆öeTimes
 = 0xFF;

105 
	`¥_debug
("drcom init\n" );

106 
	}
}

111 
	$drcom_d©a˛ón
()

113 
i
;

114  
i
=0; i<
MAX_POINT_COUNT
; i++)

116 
djBuff
[
i
].
°©us
 = 0;

117 
djBuff
[
i
].
m_Dúe˘
 = 0;

118 
djBuff
[
i
].
ty≥
 = 0;

120 
	`drcom_djßve
();

121 
	`drcom_ydßve
();

122 
	}
}

127 
	$drcom_dj
()

129 
i
;

130  
i
=0; i<
MAX_POINT_COUNT
; i++)

132 
djBuff
[
i
].
dj
 = 0;

133 
djBuff
[
i
].
CommTimes
 = 0;

134 
djBuff
[
i
].
O∆öeTimes
 = 0;

135 
djBuff
[
i
].
m_Rëu∫
 = 0;

137 
rcom_djtime
 = 0;

138 
	`rcom_D©a
( 0, 0 );

139 
	`rcom_D©a
( 0, 0 );

140 
	}
}

143 
uöt8
 
	gßveBuff
[32];

148 
	$drcom_djßve
()

150 
i
,
j
;

151 
˙t
;

152 
	`¥_debug
("drcom dj write\n");

153 
i
=0; i<
MAX_POINT_COUNT
; )

155 
˙t
 = 
	`MIN
–
MAX_POINT_COUNT
-
i
, (
ßveBuff
 ) );

156 
j
=0; j<
˙t
; j++ )

158 
djBuff
[
i
+
j
].
O∆öeTimes
 = 0xFF;

159 
ßveBuff
[
j
] = 
djBuff
[
i
+j].
°©us
;

161 
	`U£rWrôeDJ
–
i
, 
ßveBuff
, 
˙t
 );

162 
i
 +
˙t
;

164 
	}
}

169 
	$drcom_ty≥ßve
( )

171 
i
,
j
,
˙t
;

172 
i
=0; i<
MAX_POINT_COUNT
; )

174 
˙t
 = 
	`MIN
–
MAX_POINT_COUNT
-
i
, (
ßveBuff
 ) );

175 
j
=0; j<
˙t
; j++ )

177 
ßveBuff
[
j
] = 
djBuff
[
i
+j].
°©us
;

179 
	`U£rWrôeTy≥
–
i
, 
ßveBuff
, 
˙t
);

180 
i
 +
˙t
;

182 
	}
}

187 
	$drcom_ydßve
( )

189 
i
,
j
,
˙t
;

190 
i
=0; i<64; )

192 
˙t
 = 
	`MIN
–
MAX_POINT_COUNT
-
i
, (
ßveBuff
 ) );

193 
j
=0; j<
˙t
; j++ )

195 
ßveBuff
[
j
] = 
djBuff
[
i
+j].
m_Dúe˘
;

197 
	`U£rWrôeDeÁu…
–
i
, 
ßveBuff
, 
˙t
);

198 
i
 +
˙t
;

200 
	}
}

206 
uöt8
 
	$drcom_add
–
uöt8
 
cmd
, uöt8 
addr
, 
uöt16
 
d©
 )

208 
Scmd
 = 
cmd
;

209 
Saddr
 = 
addr
;

210 
Sd©a
 = 
d©
;

211 
S¥oEn
 = 1;

212  
TRUE
;

213 
	}
}

218 
	$drcom_pbdñ
–
uöt8
 
addr
 )

220 if–
addr
 )

222 if–
addr
 > 
MAX_POINT_COUNT
 )

224 
addr
--;

225 
	`CBI
–
djBuff
[
addr
].
°©us
, 6 );

226 
	`drcom_djßve
();

228 
	}
}

233 
	$drcom_pbadd
–
uöt8
 
addr
 )

235 if–
addr
 )

237 if–
addr
 > 
MAX_POINT_COUNT
 )

239 
	`SBI
–
djBuff
[
addr
-1].
°©us
, 6 );

240 
	`drcom_djßve
();

242 
	}
}

247 
	$drcom_djdñ
–
uöt8
 
addr
 )

249 if–
addr
 )

251 if–
addr
 > 
MAX_POINT_COUNT
 )

253 
	`CBI
–
djBuff
[
addr
-1].
°©us
, 7 );

254 
	`drcom_djßve
();

256 
	}
}

261 
	$drcom_djadd
(
uöt8
 
addr
)

263 if–
addr
 )

265 if–
addr
 > 
MAX_POINT_COUNT
 )

267 
addr
--;

268 
	`SBI
–
djBuff
[
addr
].
°©us
, 7 );

269 
	`drcom_djßve
();

272 
uöt8
 
i
;

273 
	`¥ötk
("µ«º«µÿ÷∑:");

274 
i
=0; i<
MAX_POINT_COUNT
; i++ )

276 if–
	`PBI
–
djBuff
[
i
].
°©us
, 7 ))

278 
	`¥ötk
(" %d", 
i
+1 );

281 
	`¥ötk
("\n");

283 
	}
}

288 
	$d©a_autoPro˚ssög
–
addr
 )

290  
djBuff
[
addr
].
m_CuºítDúe˘
 & 0xF )

293 
AUTO_LED_ON
:

295 
AUTO_LED_LEFT
:

296 
	`cmdLe·
–
addr
 );

298 
AUTO_LED_RIGHT
:

299 
	`cmdRight
–
addr
 );

301 
AUTO_LED_OFF
:

302 
	`cmdOff
–
addr
 );

305 
	}
}

308 
	$d©a_autoProc
()

310 
i
=0; i<
pU§Cfg
->
cou¡
; i++)

312 
	`d©a_autoPro˚ssög
(
i
 );

314 
	}
}

320 
	$d©a_fûe
–*
pd
 )

322 
TCANFûe
 *
pFûe
 = (TCANFûe*Ë
pd
;

323 
˙t
 = 
	`MIN
–
pFûe
->
size
, 
MAX_POINT_COUNT
 );

324 
i
;

325 
cmd
 = 0;

326  
pFûe
 ->
cmd
 )

328 
SIGN_FILE_NORMAL
 :

329 
i
=0; i<
˙t
; i++)

331 
uöt8
 
tmp
 = (
pFûe
->
d©a
[
i
] & 0xF);

332 
djBuff
[
i
].
m_CuºítDúe˘
 = 
tmp
 ;

333 
djBuff
[
i
].
m_DeÁu…Dúe˘
 = 
tmp
 ;

335 
	`drcom_ydßve
();

337 
	`AUTOPROC
();

338 
cmd
 = 
DJ_CMD_SIGN_NORMALPRG
;

340 
SIGN_FILE_TYPE
:

341 
i
=1; i<=
˙t
; i++)

343 
uöt8
 
tmp
 = 
pFûe
->
d©a
[
i
];

344 
djBuff
[
i
-1].
ty≥
 = 
tmp
 ;

346 
	`drcom_ty≥ßve
();

347 
cmd
 = 
DJ_CMD_SIGN_TYPEPRG
;

349 
SIGN_FILE_PROG
:

350 
cmd
 = 
DJ_CMD_SIGN_PROGRET
;

355 
	`ˇnD_SídCMD
–
cmd
, 0, 0);

356 
	`DEBUG2
("fûêcmd %d\n", 
pFûe
->
cmd
);

358 
	}
}

360 
	$do‹Eº‹Timeöc
( )

362 
i
=0; i<
pU§Cfg
->
cou¡
; i++)

364 if–
djBuff
[
i
].
dj
 )

366  
djBuff
[
i
].
ty≥
 )

368 
eDo‹OFF
:

369 
eDo‹OFFL
:

370 
eDo‹OFFR
:

371 if–
pU§Cfg
->
îrDly
 )

373 if–
djBuff
[
i
].
œndf
 )

375 if–
djBuff
[
i
].
îr‹Timî
 < 
pU§Cfg
->
îrDly
 )

377 
djBuff
[
i
].
îr‹Timî
++;

378 if–
djBuff
[
i
].
îr‹Timî
 >
pU§Cfg
->
îrDly
 )

380 
ãmp
 = 
djBuff
[
i
].
m_Do‹
;

381 
	`SBI
–
ãmp
, 3 );

382 
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_DOORSTATE
, 
i
, 
ãmp
 );

387 if–
djBuff
[
i
].
îr‹Timî
 >
pU§Cfg
->
îrDly
 )

389 
ãmp
 = 
djBuff
[
i
].
m_Do‹
;

390 
	`CBI
–
ãmp
, 3 );

391 
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_DOORSTATE
, 
i
, 
ãmp
 );

393 
djBuff
[
i
].
îr‹Timî
 = 0;

400 
	}
}

406 
	$drcom_¥o˚ss
()

408 
uöt8
 
cmd
 = 
Scmd
;

409 
uöt8
 
addr
 = 
Saddr
;

410 
uöt16
 
d©
 = 
Sd©a
;

411 
TX_gzC¡
 = 0;

412 if–!
S¥oEn
 )  0;

413 
S¥oEn
 = 0;

414 
	`¥_debug
("add∏%x-%d, %x\n", 
cmd
, 
addr
, 
d©
);

417 if–
Saddªss
 )

419 if–
cmd
 == 0 )

421 if–
addr
 =
Saddªss
 )

423 if–
d©
 != 0 )

425 
CALL_ON
;

426 
	`¥_debug
("add∏%d OK\n", 
addr
);

427 
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_PROGOK
, 
addr
, 0 );

428 
Saddªss
 = 0;

432 
	`SëAddr
–
Saddªss
 );

435  
TRUE
;

438 if–
addr
 > 
MAX_POINT_COUNT
 ||áddr == 0 )

439  
FALSE
;

441 
addr
--;

442 if–
cmd
 == 0 )

444 if–
djBuff
[
addr
].
O∆öeTimes
 != 0xFF )

446 if–
d©
 )

448 
djBuff
[
addr
].
O∆öeTimes
++;

449 if–
djBuff
[
addr
].
O∆öeTimes
 >= 2 )

451 
	`¥_debug
("%d dj\n", 
addr
+1 );

452 
djBuff
[
addr
].
O∆öeTimes
 = 0xFF;

453 
	`SBI
–
djBuff
[
addr
].
°©us
, 7 );

456 if–
addr
 >
pU§Cfg
->
cou¡
-1 )

458 
rcom_djtime
++;

459 if–
rcom_djtime
 >= 2 )

461 
rcom_djtime
 = 0;

462 
	`drcom_djßve
();

465  (
addr
<<8)|
rcom_djtime
;

467 if(
d©
)

469 if–! 
djBuff
[
addr
].
dj
 )  
FALSE
;

471 if(
djBuff
[
addr
].
CommTimes
)

476 
djBuff
[
addr
].
CommTimes
 = 0;

477 if–
djBuff
[
addr
].
gz
 )

479 if–
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_NOCOMWARN
, 
addr
, 0 ) )

482 
djBuff
[
addr
].
gz
 =0;

485 if–
TX_gzC¡
 > 5 && !
	`PBI
–
rcomEº_å™s
, 1 ) )

487 if–
	`djPro_Tøns
–
DJ_CMD_SIGN_ZXDD
, 
pU§Cfg
->
addªss
, 0, 0 ) ) 
	`SBI
–
rcomEº_å™s
, 1 );

490 if–
addr
 >
pU§Cfg
->
cou¡
-1 )

492 if–
TX_gzC¡
 < 3 && 
	`PBI
–
rcomEº_å™s
, 1 ) )

494 if–
	`djPro_Tøns
–
DJ_CMD_SIGN_NOZXDD
, 
pU§Cfg
->
addªss
, 0, 0 ) ) 
	`CBI
–
rcomEº_å™s
, 1 );

496 
TX_gzC¡
 = 0;

499 
	`DEBUG3
(" %d-%d-%04x\n", 
cmd
, 
addr
+1, 
d©
 );

500 if–
djBuff
[
addr
].
m_R°©e
 =
d©
&3 )

502 if–
d©
 =
DJSTATE_GZ
 )

504 
TX_gzC¡
++;

507 if–
djBuff
[
addr
].
m_R°©e
 == 3 )

509 if–
djBuff
[
addr
].
m_Rëu∫
 =
d©
 )

516 if–
djBuff
[
addr
].
m_R8
 == 1 )

518 
uöt8
 
ãmp
 = 
d©
 & 0xFF;

520  
djBuff
[
addr
].
ty≥
 )

522 
eDo‹OFFL
:

523 
	`CBI
(
ãmp
, 3);

524 
eDo‹Le·
:

525 
	`CBI
–
ãmp
, 1 );

527 
eDo‹OFFR
:

528 
	`CBI
(
ãmp
, 3);

529 
eDo‹Right
:

530 
	`CBI
–
ãmp
, 0 );

534 if–
djBuff
[
addr
].
îr‹Timî
 && djBuff[addr].îr‹Timî >
pU§Cfg
->
îrDly
 )

536 
	`SBI
–
ãmp
, 3 );

539 
	`DEBUG4
("\t%d %x-%x %d %d\n", 
addr
+1, 
d©
, 
ãmp
, 
djBuff
[addr].
ty≥
, djBuff[addr].
îr‹Timî
 );

541 if(
djBuff
[
addr
].
m_Do‹
 !
ãmp
 )

543 if–!
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_DOORSTATE
, 
addr
, 
ãmp
 ) )

545 
	`SBI
–
djBuff
[
addr
].
îr‹
, 1 );

548 
	`DEBUG2
("%d:◊¥Ã¨%02x\n",
addr
+1, 
ãmp
);

552 if–
	`PBI
–
djBuff
[
addr
].
îr‹
, 1 ) )

554 if–
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_DOORSTATE
, 
addr
, 
ãmp
 ) )

556 
	`DEBUG2
("÷ÿ–¬∑¢ÀÕ%d:◊¥Ã¨%02x\n",
addr
+1, 
ãmp
);

557 
	`CBI
–
djBuff
[
addr
].
îr‹
, 1 );

561 
djBuff
[
addr
].
m_Do‹
 = 
ãmp
;

562 
	`DEBUG5
("%d:%02x sèã\n", 
addr
+1, 
djBuff
[addr].
m_Do‹
 );

566 
djBuff
[
addr
].
m_Rëu∫
 = 
d©
;

570 if((
djBuff
[
addr
].
CommTimes
 >
DATA_GZ_DX_CNT
) )

572 i‡–
djBuff
[
addr
].
dj
 )

574 
djBuff
[
addr
].
comm
 = 1;

575 if–!
djBuff
[
addr
].
gz
 )

578 if–
	`ˇnD_SídCMD
–
DJ_CMD_SIGN_COMWARN
, 
addr
+1, 0 ) )

581 
djBuff
[
addr
].
gz
 = 1;

588 if–
djBuff
[
addr
].
CommTimes
 < 200 )

589 
djBuff
[
addr
].
CommTimes
++;

592  
TRUE
;

593 
	}
}

598 
uöt8
 
	$waôAddCmd
–
uöt8
 
addr
, uöt8 
cmd
, 
time
 )

600 
size
 = 0;

601  
time
-- )

603 if–
	`rcom_D©a
–
cmd
, 
addr
 ) )

605 
size
++;

606 if–
size
 >= 4 )

610 
	`OSTimeDly
(1);

613 
	}
}

618 
	$HBZH_AddCmd
( )

620 
	`waô_rcomAdd
( 8, 7 );

621 
	`waô_rcomAdd
( 8, 1 );

622 
	`waô_rcomAdd
( 8, 1 );

623 
	`waô_rcomAdd
( 8, 9 );

624 
	}
}

629 
uöt8
 
	$AddComm™d
(
uöt8
 
addr
, uöt8 
cmd
)

631 
i
;

632 
i
=0; i<4; i++)

634 
	`waô_rcomAdd
–
cmd
, 
addr
 );

637 
	}
}

642 
uöt8
 
	$SëAddr
–
uöt8
 
addr
 )

644 
	`¥_debug
("±‡÷∑%d\n", 
addr
);

645 
	`HBZH_AddCmd
();

648 
	`waô_rcomAdd
–
CMD_ADDR
, 0x55 );

649 
	`waô_rcomAdd
–
CMD_ADDR
, 0x3A );

654 
	`waô_rcomAdd
–
CMD_ADDR
, 
addr
 );

655 
	`waô_rcomAdd
–
CMD_ADDR
, 
addr
 );

658 
	`AddComm™d
–
addr
, 0 );

660 
Saddªss
 = 
addr
;

661  
Saddªss
;

662 
	}
}

667 
	$ExôSëAddr
()

669 
Saddªss
 = 0;

670 
	}
}

673 
	$cmd_ã°
–
uöt8
 
addr
 )

675 
˙t
 = 
HZ
 * 10;

676  
˙t
-- )

678 
	`AddComm™d
–
addr
, 0 );

679 
	`OSTimeDly
(1);

681 
	}
}

683 
	$d©a_¥öt
()

685 
uöt8
 
i
;

686 
i
=0; i< 
pU§Cfg
->
cou¡
; i++ )

689 
	`¥ötk
("\t%d:%02x-%02x %d\t%d\n", 
i
+1, 
djBuff
[i].
m_Do‹
, djBuff[i].
°©us
, djBuff[i].
ty≥
, djBuff[i].
îr‹Timî
);

691 
	}
}

693 
	#P°rcmp
 
°rcmp


	)

694 
	~"pcomm™d.h
"

695 
	$rcom_cmd
(
¨gs
, **
¨gv
)

697 if–
¨gs
 > 1 )

699 
uöt8
 
addr
 = 
	`©oi
–
¨gv
[2] );

700 if–!
	`P°rcmp
–
¨gv
[1], "reset" ))

702 
	`AddComm™d
–254, 
CMD_REST
 );

703 }if–!
	`P°rcmp
–
¨gv
[1], "yj" ))

705 
	`AddComm™d
–0xFF, 
CMD_YJ
 );

706 }if–!
	`P°rcmp
–
¨gv
[1], "l" ))

708 
	`AddComm™d
–
addr
, 
CMD_LEFT
 );

709 }if–!
	`P°rcmp
–
¨gv
[1], "r" ))

711 
	`AddComm™d
–
addr
, 
CMD_RIGHT
 );

712 }if–!
	`P°rcmp
–
¨gv
[1], "on" ))

714 
	`AddComm™d
–
addr
, 
CMD_ALL
 );

715 }if–!
	`P°rcmp
–
¨gv
[1], "off" ))

717 
	`AddComm™d
–
addr
, 
CMD_OFF
 );

718 }if–!
	`P°rcmp
–
¨gv
[1], "addr" ))

720 
	`SëAddr
–
addr
 );

721 }if–!
	`P°rcmp
–
¨gv
[1], "cmd" ))

723 
	`cmdTøns
–
addr
 );

724 }if–!
	`P°rcmp
–
¨gv
[1], "djall" ))

726 
i
=1; i<
MAX_POINT_COUNT
; i++ )

728 
	`SBI
–
djBuff
[
i
].
°©us
, 7 );

730 }if–!
	`P°rcmp
–
¨gv
[1], "dj" ))

732 
	`drcom_djadd
–
addr
 );

733 }if–!
	`P°rcmp
–
¨gv
[1], "data"))

735 
	`d©a_¥öt
();

739 
	`¥ötk
("rcom [reset|yj|l|r|on|off|addr|dj|data]áddr");

742 
	}
}

744 
PSHELL_CMD
(
rcom
, 
rcom_cmd
, "rcom ");

	@data/drcom.h

3 #i‚de‡
__DRCOM_H__


4 
	#__DRCOM_H__


	)

6 
	~"globÆ.h
"

7 
	~"Mi¸oOS.h
"

9 
	#DATA_GZ_DX_CNT
 3

	)

11 
	#CMD_STATE
 0

	)

12 
	#CMD_ADDR
 0x01

	)

13 
	#CMD_RIGHT
 2

	)

14 
	#CMD_LEFT
 3

	)

16 
	#CMD_YJ
 5

	)

17 
	#CMD_ALL
 6

	)

18 
	#CMD_TEST
 7

	)

19 
	#CMD_HBZH
 0x08

	)

20 
	#CMD_DJ
 9

	)

22 
	#CMD_REST
 0x0A

	)

23 
	#CMD_READ
 0x0D

	)

24 
	#CMD_OFF
 0x0F

	)

26 
	#DJSTATE_DX
 0x000

	)

27 
	#DJSTATE_NOMAL
 0x007

	)

28 
	#DJSTATE_BAT
 0x038

	)

29 
	#DJSTATE_YJ
 0x03F

	)

30 
	#DJSTATE_GY
 0x1C0

	)

31 
	#DJSTATE_BATBH
 0x1C7

	)

32 
	#DJSTATE_DY
 0x1F8

	)

33 
	#DJSTATE_GZ
 0xFFF

	)

38 
uöt8
 
	mcmd
;

39 
uöt8
 
	maddªss
;

40 
uöt8
 
	mbuff
[];

41 }
	t__PACKED__
 
	tTD©aFûe
;

43 
	#eDo‹Ty≥End
 
eDO‹End


	)

44 
	#eDJobj
 
eDJON


	)

48 
	eeObjTy≥
{

50 
	meDo‹OFF
=0, 
	meDo‹Le·
, 
	meDo‹Right
, 
	meDo‹ON
,

52 
	meDo‹OFFL
, 
	meDo‹OFFR
,

53 
	meDO‹End
,

55 
	meDJON
 = 0x40, 
	meDJLe·
, 
	meDJRight
, 
	meDJOFF
, 
	meDJZM
,

56 
	meObjEnd


57 }
	teObjTy≥
;

62 
	sCDëe˘‹
{

64 
uöt8
 
	m°©us
;

66 
uöt8
 
	mty≥
:5;

67 
uöt8
 
	mgz
:1;

68 
uöt8
 
	mpb
:1;

69 
uöt8
 
	mdj
:1;

72 
uöt8
 
	mîr‹
;

73 
uöt8
 
	mCommTimes
;

74 
uöt8
 
	mO∆öeTimes
;

76 
uöt8
 
	mîr‹Timî
;

79 
uöt8
 
	mm_Dúe˘
;

82 
uöt8
 
	mm_DeÁu…Dúe˘
 :4;

83 
uöt8
 
	mm_CuºítDúe˘
 :4;

88 
uöt16
 
	mm_Do‹
;

89 
uöt16
 
	mm_D©a
;

91 
uöt16
 
	mm_D°©e
: 2;

92 
uöt16
 
	mm_DvÆue
: 10;

95 
uöt16
 
	mœndf
 : 2;

98 
uöt16
 
	mdo‹Sèã
 :8;

99 
uöt16
 
	mdo‹Dis
 :1;

100 
uöt16
 
	mdo‹Ty≥
 :4;

103 
uöt16
 
	mÀ·
 : 1;

104 
uöt16
 
	mright
 : 1;

105 
uöt16
 
	mpowî
 : 1;

106 
uöt16
 
	mw¨nög
 : 1;

107 
uöt16
 
	m˘æ
 : 1;

108 
uöt16
 
	mlookup
 : 1;

109 
uöt16
 
	mcomm
 : 1;

110 
uöt16
 
	myj
 : 1;

112 
uöt16
 
	mdißbÀ
 : 1;

113 
uöt16
 
	mdty≥
 : 4;

117 
uöt16
 
	mm_Rëu∫
;

119 
uöt16
 
	mm_R°©e
: 2;

120 
uöt16
 
	mm_Rd©a
: 10;

123 
uöt16
 
	mm_R0
:1;

124 
uöt16
 
	mm_R1
:1;

125 
uöt16
 
	mm_R2
:1;

126 
uöt16
 
	mm_R3
:1;

127 
uöt16
 
	mm_R4
:1;

128 
uöt16
 
	mm_R5
:1;

129 
uöt16
 
	mm_R6
:1;

130 
uöt16
 
	mm_R7
:1;

131 
uöt16
 
	mm_R8
:1;

132 
uöt16
 
	mm_R9
:1;

133 
uöt16
 
	mm_Ra
:1;

134 
uöt16
 
	mm_Rb
:1;

135 
uöt16
 
	mm_Rc
:1;

136 
uöt16
 
	mm_Rd
:1;

137 
uöt16
 
	mm_Re
:1;

138 
uöt16
 
	mm_Rf
:1;

142 
uöt8
 
	må™s
;

143 }
	t__PACKED__
 
	tCDëe˘‹
;

145 
CDëe˘‹
 
djBuff
[
MAX_POINT_COUNT
];

148 
uöt32
 
AutoProc_time
;

149 
uöt32
 
U£rSave_time
;

150 
uöt32
 
Re£tDly_time
;

151 
	#AUTOPROC
(Ë
AutoProc_time
 = 2*20

	)

152 
	#USERSAVE
(Ë
U£rSave_time
 = 2 * 5;

	)

153 
	#RESETDLY_60S
(Ë
Re£tDly_time
 = 2 * 60;

	)

154 
	#RESETDLY_40M
(Ë
Re£tDly_time
 = 2 * 60 * 40;

	)

159 
uöt8
 
GëEEd©a
–
uöt16
 
addr
 );

161 
drcom_öô
();

162 
drcom_¥o˚ss
();

163 
uöt8
 
drcom_add
–uöt8 
cmd
, uöt8 
addr
, 
uöt16
 
d©
 );

164 
drcom_dj
();

165 
drcom_djßve
();

166 
drcom_djadd
(
uöt8
 
addr
);

167 
drcom_djdñ
–
uöt8
 
addr
 );

168 
drcom_pbdñ
–
uöt8
 
addr
 );

169 
drcom_pbadd
–
uöt8
 
addr
 );

171 
drcom_ty≥ßve
( );

172 
drcom_ydßve
( );

173 
drcom_d©a˛ón
();

175 
HBZH_AddCmd
( );

177 
uöt8
 
AddComm™d
–uöt8 
addr
, uöt8 
cmd
);

178 
uöt8
 
waôAddCmd
–uöt8 
addr
, uöt8 
cmd
, 
time
 );

180 
uöt8
 
SëAddr
–uöt8 
addr
 );

181 
ExôSëAddr
();

183 
cmd_ã°
–
uöt8
 
addr
 );

185 
	#cmdTøns
(
a
Ë
	`waôAddCmd
–a, 
CMD_DJ
, 
HZ
 );waôAddCmd–a, CMD_DJ, HZ )

	)

186 
	#cmdRe£t
(Ë
	`waôAddCmd
–254, 
CMD_REST
, 
HZ
 );waôAddCmd–254, CMD_REST, HZ )

	)

187 
	#cmdYJ
(Ë
	`waôAddCmd
–0xFF, 
CMD_YJ
, 
HZ
 );waitAddCmd( 0xFF, CMD_YJ, HZ ); \

188 
	`waôAddCmd
–1, 
CMD_DJ
, 
HZ
 );waôAddCmd–1, CMD_DJ, HZ );

	)

189 
	#cmdLe·
(
addr
Ë
	`waôAddCmd
–addr, 
CMD_LEFT
, 
HZ
 )

	)

190 
	#cmdRight
(
addr
Ë
	`waôAddCmd
–addr, 
CMD_RIGHT
, 
HZ
 )

	)

191 
	#cmdOn
(
addr
Ë
	`waôAddCmd
–addr, 
CMD_ALL
, 
HZ
 )

	)

192 
	#cmdOff
(
addr
Ë
	`waôAddCmd
–addr, 
CMD_OFF
, 
HZ
 )

	)

194 
d©a_fûe
–*
pd
 );

197 
do‹Eº‹Timeöc
( );

199 
d©a_autoPro˚ssög
–
addr
 );

200 
d©a_autoProc
();

	@data/protocol.h

7 #i‚de‡
__PROTOCOL_H__


8 
	#__PROTOCOL_H__


	)

10 
	~"ˇn.h
"

11 
	~"djPro.h
"

	@data/rcom.c

8 
	~"myty≥.h
"

9 
	~"h¨dw¨e.h
"

10 
	~"rcom.h
"

11 
	~"drcom.h
"

12 
	~"d©a.h
"

13 
	~"¥Ÿocﬁ.h
"

15 
	#TIMER32_PR
 (
FPCLK
/(1000000))

	)

17 
	#RCOM_200mS
 200000

	)

18 
	#RCOM_20mS
 20000

	)

19 
	#RCOM_10uS
 10

	)

20 
	#RCOM_100uS
 100

	)

21 
	#RCOM_300uS
 300

	)

22 
	#RCOM_600uS
 600

	)

23 
	#RCOM_500uS
 500

	)

25 
	#RCOM_RCLK
 ( 
RCOM_100uS
 )

	)

26 
	#RCOM_RCNT
 12

	)

29 
	#TONGBU_SET
 1

	)

30 
	#RETURN_CLK
 0

32 

	)

34 
	#RCOM_PERR
 4

	)

35 
	#RCOM_DO
 5

	)

36 
	#RCOM_CLK
 7

	)

37 
	#RCOM_PORT
 
D


	)

39 
	#RCOM_DO_H
 
ADO_H


	)

40 
	#RCOM_DO_L
 
ADO_L


	)

41 
	#RCOM_DO_NOT
 
ADO_NOT


	)

43 
	#RCOM_CLK_H
 
CLK_L


	)

44 
	#RCOM_CLK_L
 
CLK_H


	)

46 
	#RCOM_CTL_H
 
RCOM_CLK_H


	)

47 
	#RCOM_CTL_L
 
RCOM_CLK_L


	)

49 
	#RCOM_IN
 
	`RIn
()

	)

50 
	#RCOM_ERR
 
	`Eº‹In
()

	)

53 
TRCOM
 
	gcmdBuff
[ 32 ];

54 
uöt8
 
	gcmdIn
, 
	gcmdOut
, 
	gcmdC¡
;

56 
uöt8
 
	gaddr
,
	gcmd
;

57 
uöt16
 
	gd©a1
;

58 
uöt8
 
	gTaddr
,
	gTcmd
;

60 
uöt8
 
	grun_í
;

62 
uöt8
 
	g°©e
;

63 
uöt8
 
	g˙t
;

64 
uöt8
 
	gbusy
;

65 
uöt8
 
MKaddr
;

66 
uöt8
 
	gout_˙t
;

67 
uöt8
 
	grcom_îr‹
;

70 
uöt8
 
rcom_Gë
–uöt8 *
pcmd
, uöt8 *
∑ddr
 );

72 
rcom_ISR
();

84 
TIMER32_1_IRQH™dÀr
 ();

85 
	$TIMER32_1_IRQH™dÀr
 ()

87 if–
LPC_TMR32B1
->
IR
 & 1 )

89 
LPC_TMR32B1
->
IR
 = 1;

90 
	`rcom_ISR
();

92 
	}
}

95 
ölöe
 
	$Time_öô
( )

97 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_CT32B1
 );

99 
LPC_TMR32B1
->
TC
 = 0;

100 
LPC_TMR32B1
->
PC
 = 0;

101 
LPC_TMR32B1
->
IR
 = 1;

102 
LPC_TMR32B1
->
PR
 = 
TIMER32_PR
-1;

103 
LPC_TMR32B1
->
MCR
 = 3;

104 
LPC_TMR32B1
->
MR0
 = 
RCOM_100uS
 ;

105 
LPC_TMR32B1
->
TCR
 = 0;

106 
	`NVIC_E«bÀIRQ
(
TIMER_32_1_IRQn
);

107 
	`NVIC_SëPri‹ôy
(
TIMER_32_1_IRQn
, 2);

109 
RCOM_DO_H
;

110 
out_˙t
 = 1;

111 
RCOM_CTL_L
;

112 
busy
 = 
RCOM_STATE_BUSY
;

113 
	}
}

115 
ölöe
 
	$Time_›í
( )

117 
LPC_TMR32B1
->
TC
 = 0;

118 
LPC_TMR32B1
->
PC
 = 0;

119 
LPC_TMR32B1
->
IR
 = 1;

120 
LPC_TMR32B1
->
PR
 = 
TIMER32_PR
-1;

121 
LPC_TMR32B1
->
MCR
 = 3;

122 
LPC_TMR32B1
->
MR0
 = 
RCOM_100uS
 ;

123 
LPC_TMR32B1
->
TCR
 = 1;

125 
RCOM_DO_H
;

126 
out_˙t
 = 1;

127 
RCOM_CTL_L
;

128 
busy
 = 
RCOM_STATE_BUSY
;

129 
	}
}

131 
ölöe
 
	$Time_£t
–
uöt16
 
time
 )

133 
LPC_TMR32B1
->
TC
 = 0;

134 
LPC_TMR32B1
->
MR0
 = 
time
;

135 
	}
}

137 
ölöe
 
	$Time_begö
()

139 
LPC_TMR32B1
->
TC
 = 0;

140 
LPC_TMR32B1
->
MR0
 = 
RCOM_100uS
;

141 
	}
}

143 
ölöe
 
	$Time_˛o£
( )

145 
	`¥_debug
("rcom close\n");

146 
LPC_TMR32B1
->
TCR
 = 0;

147 
	}
}

149 
ölöe
 
uöt8
 
	$RIn
()

152 
i
;

153 
ªt
;

154 
r1
 = 
AD_IN
;

155 
i
=0; i<8; i++)

157 
	`n›
();

158 
	`n›
();

159 
	`n›
();

160 
	`n›
();

161 
ªt
 = 
AD_IN
;

162 if–
ªt
 =
r1
 )

164 
r1
 = 
ªt
;

166  
ªt
? 0: 1;

169 
uöt8
 
i
=0;

170 if–
AD_IN
 )

171 
i
++;

172 
	`n›
();nop();

173 if–
AD_IN
 )

174 
i
++;

175 
	`n›
();nop();

176 if–
AD_IN
 )

177 
i
++;

178 
	`n›
();nop();

179 if–
AD_IN
 )

180 
i
++;

181  
i
>2? 0: 1;

184 
	}
}

186 
ölöe
 
uöt8
 
	$Eº‹In
()

189 
i
;

190 
ªt
;

191 
r1
 = 
ERROR_IN
;

192 
i
=0; i<8; i++)

194 
	`n›
();

195 
	`n›
();

196 
	`n›
();

197 
	`n›
();

198 
ªt
 = 
ERROR_IN
;

199 if–
ªt
 =
r1
 )

201 
r1
 = 
ªt
;

203  
ªt
? 1: 0;

206 
uöt8
 
i
=0;

207 if–
ERROR_IN
 )

208 
i
++;

209 
	`n›
();nop();

210 if–
ERROR_IN
 )

211 
i
++;

212 
	`n›
();nop();

213 if–
ERROR_IN
 )

214 
i
++;

215 
	`n›
();nop();

216 if–
ERROR_IN
 )

217 
i
++;

218  
i
>2? 1: 0;

221 
	}
}

225 
	#RCOM_START
 0

	)

226 
	#RCOM_SERROR
 1

	)

227 
	#RCOM_CMD
 2

	)

228 
	#RCOM_ADDR
 3

	)

229 
	#RCOM_CTRL
 4

	)

230 
	#RCOM_DATA
 5

	)

243 
	$rcom_öô
()

245 
	`Time_öô
();

246 
°©e
 = 
RCOM_START
;

247 
˙t
 = 0;

248 
busy
 = 0;

249 
run_í
 = 0;

250 
rcom_îr‹
 = 0;

251 
cmdC¡
 = 
cmdIn
 = 
cmdOut
 = 0;

252 
	}
}

254 
	$rcom_˛o£
()

256 
RCOM_DO_L
;

257 
RCOM_CTL_L
;

258 
°©e
 = 
RCOM_START
;

259 
busy
 = 
RCOM_STATE_CLOSE
;

260 
˙t
 = 0;

261 
	`Time_˛o£
();

262 
	}
}

264 
uöt8
 
	$rcom_gë
(
uöt8
 *
pd
)

266 if(
busy
)

268 if–
pd
 !
NULL
 )

269 *
pd
 = 
d©a1
;

271 
	}
}

273 
uöt8
 
	$rcom_å™s
(
uöt8
 
comm™d
, uöt8 
addªss
, uöt8 
run
)

275 if(
busy
)

277 
addr
 = 
addªss
;

278 
Taddr
 = 
addªss
;

279 
cmd
 = 
comm™d
;

280 
Tcmd
 = 
comm™d
;

281 
°©e
 = 
RCOM_START
;

282 
˙t
 = 0;

283 
run_í
 = 
run
;

284 
	`Time_›í
();

286 
	}
}

288 
	$rcom_bªak
()

290 
run_í
 = 0;

291 
	}
}

293 
uöt8
 
	$rcom_gëwaô
()

295  
busy
;

296 
	}
}

298 
	$rcom_ISR
()

300 
uöt16
 
i
;

301 
	`Time_£t
–
RCOM_300uS
 );

302 
˙t
++;

304 if–
°©e
 < 
RCOM_DATA
 && sèã >
RCOM_CMD
 && 
rcom_îr‹
 == 0 )

306 if(
out_˙t
)

308 
RCOM_DO_H
;

311 
RCOM_DO_L
;

314 
out_˙t
 = !out_cnt;

317  
°©e
 )

319 
RCOM_START
:

320 
	`Time_£t
–
RCOM_20mS
 );

321 if–
RCOM_ERR
 )

323 
RCOM_DO_L
;

324 
rcom_îr‹
 = 1;

325 
busy
 = 
RCOM_STATE_ERROR
;

328 
rcom_îr‹
 = 0;

329 
busy
 = 
RCOM_STATE_BUSY
;

331 
°©e
++;

333 
RCOM_SERROR
:

334 
i
 = 1;

335 
out_˙t
 = 0;

336 
˙t
 = 0;

337 
°©e
++;

338 if–
rcom_îr‹
 )

340 
°©e
 = 
RCOM_START
;

341 
	`Time_begö
();

342 
RCOM_DO_H
;

343 
out_˙t
 = 1;

346 
RCOM_CMD
:

347 if((
cmd
 & 
i
) != 0)

349 
	`Time_£t
–
RCOM_600uS
 );

352 
i
 <<= 1;

353 if–
˙t
>= 4)

355 
˙t
 = 0;

356 
i
 = 0x01;

357 
°©e
++;

360 
RCOM_ADDR
:

361 if((
addr
 & 
i
) != 0)

363 
	`Time_£t
–
RCOM_600uS
 );

365 
i
 <<= 1;

366 if–
˙t
>= 8 )

368 
˙t
 = 0;

369 
i
 = 0x01;

370 
°©e
++;

373 
RCOM_CTRL
:

374 if(
˙t
 == 2 )

376 
	`Time_£t
–
RCOM_600uS
 );

378 if–
˙t
 >= 3 )

380 
˙t
 = 0;

381 
i
 = 1;

382 
RCOM_DO_L
;

383 
RCOM_CTL_H
;

384 
	`Time_£t
–
RCOM_RCLK
 );

385 
°©e
++;

386 
d©a1
 = 0;

389 
RCOM_DATA
:

391 
	`Time_£t
–
RCOM_RCLK
 );

392 if–
RCOM_IN
 )

394 
d©a1
 |
i
;

397 
i
 <<= 1;

398 if–
i
 & 
	`BIT
–
RCOM_RCNT
 ) )

400 
°©e
++;

401 
i
 = 0;

405 
°©e
 = 0;

406 
RCOM_CTL_L
;

407 
RCOM_DO_L
;

409 
	`drcom_add
–
cmd
, 
addr
, 
d©a1
 );

411 
°©e
 = 
RCOM_START
;

412 if–
	`rcom_Gë
–&
cmd
, &
addr
 ))

414 if–
addr
 == 0 )

415 
Taddr
 = 0;

417 
˙t
 = 0;

418 
	`Time_begö
();

419 
RCOM_DO_H
;

420 
out_˙t
 = 1;

423 if(
run_í
 == 0)

425 
busy
 = 0;

426 
	`Time_˛o£
();

429 if(++
Taddr
 > 
pU§Cfg
->
cou¡
)

431 
cmd
 = 0;

432 
Tcmd
 = 0;

433 
Taddr
 = 0;

434 
addr
 = 0;

435 
	`HBZH_AddCmd
();

437 
˙t
 = 0;

438 
	`Time_begö
();

439 
RCOM_DO_H
;

440 
out_˙t
 = 1;

442 
cmd
 = 
Tcmd
;

443 
addr
 = 
Taddr
;

446 
	}
}

449 
uöt8
 
	$rcom_D©a
–
uöt8
 
comm™d
, uöt8 
addªss
 )

451 
OS_SREG_VAR
;

452 if–
cmdC¡
 < 
	`ARRAY_SIZE
–
cmdBuff
 ) )

454 
	`OS_ENTER_CRITICAL
();

455 
cmdC¡
++;

456 
cmdBuff
[ 
cmdIn
 ].
cmd
 = 
comm™d
;

457 
cmdBuff
[ 
cmdIn
 ].
addr
 = 
addªss
;

459 
cmdIn
++;

460 if–
cmdIn
 >
	`ARRAY_SIZE
–
cmdBuff
 ))

461 
cmdIn
 = 0;

462 
	`OS_EXIT_CRITICAL
();

466 
	}
}

468 
uöt8
 
	$rcom_Gë
–
uöt8
 *
pcmd
, uöt8 *
∑ddr
 )

470 
OS_SREG_VAR
;

471 if–
cmdC¡
 )

473 
	`OS_ENTER_CRITICAL
();

474 
cmdC¡
--;

475 *
pcmd
 = 
cmdBuff
[ 
cmdOut
].
cmd
;

476 *
∑ddr
 = 
cmdBuff
[ 
cmdOut
].
addr
;

477 
cmdOut
++;

478 if–
cmdOut
 >
	`ARRAY_SIZE
–
cmdBuff
 ))

479 
cmdOut
 = 0;

480 
	`OS_EXIT_CRITICAL
();

484 
	}
}

	@data/rcom.h

3 #i‚de‡
__RCOM_H__


4 
	#__RCOM_H__


	)

6 
	#RCOM_STATE_NOMAL
 0

	)

7 
	#RCOM_STATE_BUSY
 1

	)

8 
	#RCOM_STATE_CLOSE
 2

	)

9 
	#RCOM_STATE_ERROR
 3

	)

12 
	sTRCOM


14 
uöt8
 
	maddr
;

15 
uöt8
 
	mcmd
;

16 }
	tTRCOM
;

19 
uöt8
 
rcom_D©a
–uöt8 
comm™d
, uöt8 
addªss
 );

22 
rcom_öô
 ();

25 
rcom_˛o£
 ();

27 
uöt8
 
rcom_°¨t
();

30 
uöt8
 
rcom_gë
 (uöt8 *
pd
);

33 
uöt8
 
rcom_å™s
 (uöt8 
cmd
, uöt8 
addr
, uöt8 
run
);

36 
uöt8
 
rcom_gëwaô
 ();

39 
rcom_bªak
 ();

	@data/user.c

6 
	#USER_GLOBAL


	)

7 
	~"myty≥.h
"

8 
	~"OS°rög.h
"

9 
	~"¸c16.h
"

10 
	~"u£r.h
"

11 
	~"¥ötk.h
"

12 
	~"b•.h
"

13 
	~"©24xx.h
"

16 
TSAVEUSERCFG
 
	gU£r
;

19 
uöt8
 
	$U£rRód
(
uöt16
 
addr
)

21 
uöt16
 
¸c
;

22 
	`ì¥om_ªad
(
addr
,(
uöt8
 *)&
U£r
,(User));

23 
¸c
 = 
	`modbus_¸c
(0xAAAA,(
uöt8
*)&
U£r
,(U£r.
U§
));

24 
	`¥_debug
("¸¯%04x: %04x\n", 
¸c
, 
U£r
.crc );

25 (
¸c
 =
U£r
.crc);

26 
	}
}

28 
	$U£rWrôe
(
uöt16
 
addr
)

30 
U£r
.
¸c
 = 
	`modbus_¸c
(0xAAAA,(
uöt8
*)&U£r,(U£r.
U§
));

31 
	`ì¥om_wrôe
(
addr
, (
uöt8
 *)&
U£r
, (User));

32 
	}
}

35 
uöt8
 
	$U£rGëTy≥
(
uöt16
 
addr
 )

37 
uöt8
 
ªt
 = 0;

38 if–
	`ì¥om_ªad
–
EADDRESS_DJ
 + 
addr
, &
ªt
, 1 ) )

40  
ªt
;

43 
	}
}

45 
uöt8
 
	$U£rGëDJ
(
uöt16
 
addr
 )

47 
uöt8
 
ªt
 = 0;

48 if–
	`ì¥om_ªad
–
EADDRESS_DJ
 + 
addr
, &
ªt
, 1 ) )

50 
ªt
 &= 0xDF;

51  
ªt
;

54 
	}
}

56 
uöt8
 
	$U£rGëDeÁu…
(
uöt16
 
addr
 )

58 
uöt8
 
ªt
 = 0;

59 if–
addr
 > 64 )

61 if–
	`ì¥om_ªad
–
EADDRESS_TYPEDEF
 + 
addr
, &
ªt
, 1 ) )

63  
ªt
;

66 
	}
}

69 
	$U£rWrôeDJ
(
a
, 
uöt8
 *
buff
, 
size
 )

71 
uöt16
 
addr
 = 
EADDRESS_DJ
 + 
a
;

72  
	`ì¥om_wrôe
–
addr
, 
buff
, 
size
);

73 
	}
}

75 
	$U£rWrôeTy≥
(
a
, 
uöt8
 *
buff
, 
size
 )

77 
uöt16
 
addr
 = 
EADDRESS_DJ
 + 
a
;

78  
	`ì¥om_wrôe
–
addr
, 
buff
, 
size
);

79 
	}
}

81 
	$U£rWrôeDeÁu…
(
a
, 
uöt8
 *
buff
, 
size
 )

83 
uöt16
 
addr
 = 
EADDRESS_TYPEDEF
+
a
;

84  
	`ì¥om_wrôe
–
addr
, 
buff
, 
size
);

85 
	}
}

88 
	$U£rInô
()

90 
pU§Cfg
 = &
U£r
.
U§
;

91 
	`ì¥om_öô
();

92 
	`¥_debug
("user init\n");

94 if–!
	`U£rRód
–
EADDRESS_USER
 ) )

96 
	`U£rDeÁu…
();

99 
	`¥_debug
("user init OK\n");

101 
pU§Cfg
->
cou¡
 = 
	`MIN
–pU§Cfg->cou¡, 
MAX_POINT_COUNT
 );

102 
	}
}

107 
drcom_d©a˛ón
();

108 
	$U£rDeÁu…
()

110 
pU§Cfg
->
addªss
 = 1;

111 
pU§Cfg
->
cou¡
 = 
MAX_POINT_COUNT
;

112 
pU§Cfg
->
bg_˙t
 = 20;

113 
pU§Cfg
->
JZi
 = 525;

114 
pU§Cfg
->
îrDly
 = 100;

115 
pU§Cfg
->
lcdTy≥
 = 0;

116 
	`U£rWrôe
–
EADDRESS_USER
);

118 
	`¥_debug
("user default\n");

119 
	`drcom_d©a˛ón
();

120 
	}
}

122 
	$U£rSëAddr
(
uöt16
 
addr
)

124 if(
addr
 > 0 &&áddr < 2040 )

126 
pU§Cfg
->
addªss
 = 
addr
;

127 
	`U£rWrôe
(
EADDRESS_USER
);

128 
	`BSP_Re£t
();

130 
	}
}

132 
	$U£rSëCou¡
(
uöt16
 
˙t
)

134 if(
˙t
 > 0 && c¡ <
MAX_POINT_COUNT
 )

136 
pU§Cfg
->
cou¡
 = 
˙t
;

137 
	`U£rWrôe
(
EADDRESS_USER
);

138 
	`BSP_Re£t
();

140 
	}
}

142 
	$U£rSëLCDV
–
uöt16
 
vÆue
 )

144 
vÆue
 &= 0x3F;

145 if–
vÆue
 > 15 )

147 
pU§Cfg
->
bg_˙t
 = 
vÆue
;

148 
	`U£rWrôe
–
EADDRESS_USER
 );

149 
	`BSP_Re£t
();

151 
	}
}

153 
	$U£rSëEºDly
–
uöt16
 
dly
 )

155 if–
dly
 <= 240 )

157 
pU§Cfg
->
îrDly
 = 
dly
;

158 
	`U£rWrôe
–
EADDRESS_USER
 );

160 
	}
}

165 
	~"pcomm™d.h
"

166 
	$U£rCmd
(
¨gs
, **
¨gv
)

168 if(
¨gs
 > 1)

170 if–!
	`°rcmp
–
¨gv
[1], "bg" ) )

172 
	`U£rSëLCDV
–
	`©oi
–
¨gv
[2] ) );

173 }if–!
	`°rcmp
–
¨gv
[1], "default") )

175 
	`U£rDeÁu…
();

176 }if–!
	`°rcmp
–
¨gv
[1], "cnt") )

178 
	`U£rSëCou¡
–
	`©oi
–
¨gv
[2] ) );

182 
	}
}

183 
PSHELL_CMD
(
u£r
, 
U£rCmd
, "user [cnt|bg|default]");

	@data/user.h

6 #i‚de‡
__USER_H__


7 
	#__USER_H__


	)

10 
	~"globÆ.h
"

12 
	#EADDRESS_USER
 0

	)

13 
	#EADDRESS_DJ
 (
EADDRESS_USER
 + –
TSAVEUSERCFG
Ë+ 5Ë

	)

14 
	#EADDRESS_TYPEDEF
 (
EADDRESS_DJ
 + 
MAX_POINT_COUNT
 + 1 )

	)

15 
	#EADDRESS_YDDEF
 (
EADDRESS_TYPEDEF
 + 
MAX_POINT_COUNT
 + 1 )

	)

18 
	sSU£rCfg


20 
uöt16
 
	maddªss
;

21 
uöt8
 
	mcou¡
;

22 
uöt8
 
	mbg_˙t
;

23 
uöt16
 
	mJZi
;

24 
uöt8
 
	mîrDly
;

25 
uöt8
 
	mlcdTy≥
;

26 }
	t__PACKED__
 
	tTUSERCFG
;

28 
TUSERCFG
 *
	tLPTUSERCFG
;

30 
	sSSaveU£rCfg


32 
TUSERCFG
 
	mU§
;

33 
uöt16
 
	m¸c
;

34 }
	t__PACKED__
 
	tTSAVEUSERCFG
;

36 #i‚de‡
USER_GLOBAL


37 
	#USER_EXT


	)

39 
	#USER_EXT
 

	)

46 
USER_EXT
 
LPTUSERCFG
 
pU§Cfg
;

52 
USER_EXT
 
U£rInô
();

53 
USER_EXT
 
U£rDeÁu…
();

55 
U£rWrôe
(
uöt16
 
addr
);

57 
U£rSëAddr
(
uöt16
 
addr
);

58 
U£rSëE«bÀ
(
uöt8
 
í
,uöt8 
cmd
);

59 
U£rSëDñay
(
uöt16
 
time
);

60 
U£rSëCou¡
(
uöt16
 
˙t
);

62 
U£rSëLCDV
–
uöt16
 
vÆue
 );

63 
U£rSëEºDly
–
uöt16
 
dly
 );

68 
uöt8
 
U£rGëTy≥
(
uöt16
 
addr
 );

69 
uöt8
 
U£rGëDJ
(
uöt16
 
addr
 );

70 
uöt8
 
U£rGëDeÁu…
(
uöt16
 
addr
 );

71 
U£rWrôeDJ
(
a
, 
uöt8
 *
buff
, 
size
 );

72 
U£rWrôeTy≥
(
a
, 
uöt8
 *
buff
, 
size
 );

73 
U£rWrôeDeÁu…
(
a
, 
uöt8
 *
buff
, 
size
 );

75 #unde‡
USER_EXT


	@dataGUI/FONT_CN.c

3 
	~"gui_c⁄fig.h
"

7 
FONT_CN_16x16
 
PROGMEM
 
	gFONT16_16Cn
[]={

	@dataGUI/dataGUI.c

4 
	#DATA_GUI_GLOBAL


	)

5 
	~<°rög.h
>

6 
	~"öãrÁ˚.h
"

7 
	~"d©aGUI.h
"

8 
	~"s¸ﬁl.h
"

9 
	~"Mi¸oOS.h
"

10 
	~"u£r.h
"

11 
	~"d©a.h
"

12 
	~"¥Ÿocﬁ.h
"

13 
	~"wdt.h
"

15 
	~"drcom.h
"

18 
OS_EVENT
 *
Pro˚ssögMbox
;

20 
SCROLL
 
	gGUI_s¸ﬁl
;

23 
uöt8
 
	gSëBuff
[32];

24 
uöt8
 
	gSëC¡
;

25 
uöt8
 
	gSëPage
;

26 
uöt8
 
	gSaveE«bÀ
;

27 
LPRECT
 
	gSëRe˘
;

29 
ª£t_cmd
();

30 
	#Re£t
 
ª£t_cmd


	)

32 
	#MAINDIS_WIDTH
 64+2

	)

34 
	$MaöDis_Inô
(*
Õ
)

37 
SëPage
 = 0;

38 
	}
}

40 
	$MaöDis_Key
(
uöt8
 
key
)

42 
key
)

44 
KEY_INC
:

45 if–
SëPage
 )

46 
SëPage
--;

48 
KEY_DEC
:

49 if–
SëPage
 < 4 )

51 
SëPage
++;

54 
KEY_OK
:

56 
	`MíuExô
();

60 
	}
}

62 
	$SysDis_Dis
()

64 
uöt8
 
x
,
y
;

65 
x
 = 0;

66 
y
 = 0;

67 
	`GUI_SëPos
(
x
,
y
);

69 
	`GUI_Pröt
("±æª˙µÿ÷∑:%4d ", 
pU§Cfg
->
addªss
);

70 
y
 +=2;

71 
	`GUI_SëPos
(
x
,
y
);

72 
	`GUI_Pröt
(
HBTK_NAME
 " %d.%02d.%d ", 
VERSION
, 
PATCHLEVEL
, 
MAX_POINT_COUNT
);

76 
	}
}

78 
	$SysDis_Inô
(*
Õ
)

80 
	`S¸ﬁlCª©e
(&
GUI_s¸ﬁl
,
GUI_XMAX
-8,
GUI_Y
,
GUI_YMAX
,3);

81 
SëPage
 = 0;

82 
	`SysDis_Dis
();

83 
	}
}

86 
	$Key
(
uöt8
 
key
)

88 
key
)

90 
KEY_INC
:

92 
KEY_DEC
:

94 
KEY_CANCEL
:

95 
	`GŸo_MaöMíu
();

97 
KEY_OK
:

98 
	`MíuExô
();

101 
	`SysDis_Dis
();

102 
	}
}

105 
	$DJDis_Di•œy
–
∑ge
 )

107 c⁄° 
TFONT
 *
pF⁄t
 = 
	`GUI_SëF⁄t
–&
ASCII6x8
);

108 
i
;

109 
y
 = 0;

110 
	`GUI_SëPos
(0,
y
);

112 
addr
 = 
∑ge
*28 + 1;

113 
i
=1; i<29; i++)

115 if(
addr
 >= 64) ;

116 if–
	`PBI
–
djBuff
[
addr
].
°©us
, 7 ) == 0 )

117 
	`GUI_SëCﬁ‹
( 0 );

118 
	`GUI_Pröt
("%2d ", 
addr
++);

119 
	`GUI_SëCﬁ‹
(1);

120 if–
i
 && i%7 == 0 )

122 
y
 ++;

123 
	`GUI_SëPos
–0, 
y
 );

126 
	`GUI_SëF⁄t
–
pF⁄t
 );

128 
	}
}

130 
	$GëDJ_˙t
( )

132 
ªt
 = 0;

133 
i
;

134 
i
=0; i<=
pU§Cfg
->
cou¡
; i++)

136 if–
	`PBI
–
djBuff
[
i
].
°©us
, 7 ) )

137 
ªt
++;

139  
ªt
;

140 
	}
}

142 
	$DJDis_Di•œy
–
∑ge
 )

145 
i
;

146 
x
 = 0;

147 
y
 = 0 - 
∑ge
 * 4;

148 
ªt
 = 0;

149 
x1
;

151 if–
y
 >= 0 )

153 
	`GUI_SëPos
(
x
,
y
);

154 
	`GUI_Pröt
("%3d:", 
	`GëDJ_˙t
() );

156 
x
 = 4 * 8;

158 
i
=0; i<=
pU§Cfg
->
cou¡
; i++)

160 if–
	`PBI
–
djBuff
[
i
].
°©us
, 7 ) )

162 if–
i
 >= 100 )

164 
x1
 = 4 * 8;

165 }i‡–
i
 >= 10 )

167 
x1
 = 3 * 8;

170 
x1
 = 2 * 8;

172 if–
x
+
x1
 > 128 )

174 
x
 = 0;

175 
y
 += 2;

176 if–
y
 >= 4 )

177  
ªt
;

179 if–
y
 >= 0 )

181 
	`GUI_SëPos
–
x
, 
y
 );

184 if–
y
 >= 0 )

186 
	`GUI_Pröt
("%d ", 
i
+1);

187 
ªt
++;

189 
x
 +
x1
;

193  
ªt
;

194 
	}
}

197 
	$DJDis_Inô
(*
Õ
)

199 
SëPage
 = 0;

200 
	`DJDis_Di•œy
(
SëPage
);

201 
	}
}

203 
	$DJDis_Key
–
uöt8
 
key
 )

205 
key
)

207 
KEY_INC
:

208 if(
SëPage
>0)

210 
SëPage
--;

211 
	`GUI_CÀ¨
();

214 
KEY_DEC
:

215 
SëPage
++;

216 
	`GUI_CÀ¨
();

218 
KEY_CANCEL
:

219 
	`GŸo_MaöMíu
();

221 
KEY_OK
:

222 
	`MíuExô
();

225 if–
	`DJDis_Di•œy
(
SëPage
)==0 && SetPage )

226 
SëPage
--;

227 
	}
}

234 
	$dj_Inô
(*
pd
)

237 
	`drcom_dj
();

238 
	`MíuExô
();

239 
	}
}

244 
	$YJ_Inô
–*
pd
 )

246 
	`AddComm™d
–0xFF, 
CMD_YJ
 );

247 
	`MíuExô
();

248 
	}
}

250 
	$Re£t_Inô
–*
pd
 )

252 
	`AddComm™d
–254, 
CMD_REST
 );

253 
	`MíuExô
();

254 
	}
}

256 
	$SëAddr_C≠ti⁄
()

258 
cﬁ‹
 = !
SëC¡
? 0: 1;

259 
uöt8
 
x
,
y
;

260 
x
 = 
y
 = 0;

261 
	`GUI_SëPos
(
x
, 
y
 );

263 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

264 
	`GUI_Pröt
("µÿ÷∑");

265 
	`GUI_SëCﬁ‹
(1);

267 
	}
}

269 
	$SëAddr_VÆue
()

271 
cﬁ‹
 = 
SëC¡
? 0: 1;

272 
uöt8
 
x
,
y
;

273 
x
 = 8*4+3 ;

274 
y
 = 0;

275 
	`GUI_SëPos
(
x
, 
y
 );

276 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

277 
	`GUI_Pröt
("%2d", 
SëBuff
[0]);

278 
	`GUI_SëCﬁ‹
(1);

280 
	}
}

282 
uöt8
 
Saddªss
;

283 
	$SëAddr_Inô
(*
pd
 )

285 
	`ExôSëAddr
( );

286 
SëC¡
 = 0;

287 
SëPage
 = 0;

288 
SëBuff
[0] = 1;

289 
SëBuff
[1] = 1;

290 
	`SëAddr_C≠ti⁄
();

291 
	`SëAddr_VÆue
();

292 
	}
}

294 
	$SëAddr_Key
–
uöt8
 
key
 )

296 
key
)

298 
KEY_INC
:

299 if–
SëC¡
 )

301 
SëBuff
[0]++;

304 
KEY_DEC
:

305 if–
SëC¡
 )

307 if–
SëBuff
[0] )

308 
SëBuff
[0]--;

311 
KEY_CANCEL
:

312 if–
SëC¡
 )

314 
	`GUI_CÀ¨
();

315 
	`ExôSëAddr
( );

317 
SëC¡
 = 0;

320 
	`MíuExô
();

324 
KEY_OK
:

325 if–
SëC¡
 )

327 if–
SëC¡
 != 1 ) ;

328 
SëC¡
 = 2;

329 
	`GUI_SëPos
(0, 2 );

330 
	`GUI_Pröt
("…Ë÷√ %2d", 
SëBuff
[0] );

331 
	`SëAddr
–
SëBuff
[0] );

333 
SëC¡
 = 1;

337 if(
SëC¡
 =2 && 
Saddªss
 == 0 )

339 
tmp
 = 
SëBuff
[0];

340 
tmp
 ++;

341 
	`GUI_SëPos
(0, 2 );

342 
	`GUI_Pröt
("ÕÍ≥… %2d …Ë÷√ %2d", 
SëBuff
[0], 
tmp
);

344 
	`SëAddr
–
tmp
 );

345 
SëBuff
[0] = 
tmp
;

347 
	`SëAddr_C≠ti⁄
();

348 
	`SëAddr_VÆue
();

349 
	}
}

352 
	#MAINDIS_WIDTH
 64+2

	)

353 
	$CålDis_C≠ti⁄
()

355 
cﬁ‹
 = !
SëC¡
? 0: 1;

357 
uöt8
 
x
,
y
;

358 
x
 = 
y
 = 0;

359 
	`GUI_SëPos
(
x
, 
y
 );

360 if–
SëPage
 == 0 )

361 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

362 
	`GUI_Pröt
("µÿ÷∑");

363 
	`GUI_SëCﬁ‹
(1);

365 
x
 += 64;

366 if–
SëPage
 == 1 )

367 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

368 
	`GUI_SëPos
(
x
, 
y
 );

369 
	`GUI_Pröt
("øÿ÷∆");

370 
	`GUI_SëCﬁ‹
(1);

372 
x
 = 0;

373 
y
 += 2;

376 
	`GUI_SëPos
(
x
, 
y
 );

377 
	`GUI_Pröt
("0<> 1<- 2-> 3--");

379 
	}
}

381 
	$CålDis_VÆue
()

383 
uöt8
 
x
,
y
;

384 
x
 = 32;

385 
y
 = 0;

386 
cﬁ‹
 = 
SëC¡
? 0: 1;

387 
	`GUI_SëPos
(
x
, 
y
 );

388 if–
SëPage
 == 0 )

389 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

390 
	`GUI_Pröt
("%3d", 
SëBuff
[0] );

391 
	`GUI_SëCﬁ‹
(1);

394 
x
+=64;

395 if–
SëPage
 == 1 )

396 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

397 
	`GUI_SëPos
(
x
, 
y
 );

398 
	`GUI_Pröt
("%3d", 
SëBuff
[1] );

399 
	`GUI_SëCﬁ‹
(1);

400 
	}
}

402 
	$CålDis_Inô
(*
Õ
)

404 
SëC¡
 = 0;

405 
SëPage
 = 0;

406 
SëBuff
[0] = 1;

407 
SëBuff
[1] = 1;

408 
SëBuff
[2] = 1;

409 
	`CålDis_C≠ti⁄
();

410 
	`CålDis_VÆue
();

411 
	}
}

413 
	$CålDis_Key
(
uöt8
 
key
)

415 
key
)

417 
KEY_INC
:

418 if–
SëC¡
 )

420 
SëBuff
[
SëPage
]++;

423 if–
SëPage
 )

424 
SëPage
--;

427 
KEY_DEC
:

428 if–
SëC¡
 )

430 if–
SëBuff
[
SëPage
] )

431 
SëBuff
[
SëPage
]--;

434 if–
SëPage
 < 1 )

435 
SëPage
++;

438 
KEY_CANCEL
:

439 if–
SëC¡
 )

441 
SëC¡
 = 0;

444 
	`MíuExô
();

447 
KEY_OK
:

448 
SëC¡
 = !SetCnt;

449 if–
SëC¡
 =0 && 
SëPage
 == 1 )

451  
SëBuff
[1] )

454 
	`AddComm™d
–
SëBuff
[0], 
CMD_ALL
 );

457 
	`AddComm™d
–
SëBuff
[0], 
CMD_LEFT
 );

460 
	`AddComm™d
–
SëBuff
[0], 
CMD_RIGHT
);

463 
	`AddComm™d
–
SëBuff
[0], 
CMD_OFF
 );

470 
	`CålDis_C≠ti⁄
();

471 
	`CålDis_VÆue
();

472 
	}
}

476 
	$Do‹Dis_Di•œy
–
∑ge
 )

478 
ªt
 = 0;

479 
i
=0; i<=
pU§Cfg
->
cou¡
; i++ )

481 if–
	`PBI
–
djBuff
[
i
].
°©us
 , 7 ) )

483 if–
∑ge
 == 0 )

485 
	`GUI_SëPos
(0, 0 );

486 
	`GUI_Pröt
("%3d∫≈√≈", 
i
+1 );

488  
djBuff
[
i
].
m_Do‹
 & 3 )

491 
	`GUI_Pröt
(" πÿ ");

494 
	`GUI_Pröt
(" ◊Ûø™");

497 
	`GUI_Pröt
(" ”“ø™");

500 
	`GUI_Pröt
(" ø™ ");

503 
	`GUI_SëPos
(0, 2 );

504 i‡(
djBuff
[
i
].
powî
)

506 
	`GUI_Pröt
( "µÁ‘¥π ’œ ");

508 i‡(
djBuff
[
i
].
w¨nög
)

510 
	`GUI_Pröt
( "√≈π ’œ ");

512 i‡(
djBuff
[
i
].
˘æ
)

514 
	`GUI_Pröt
( "√≈øÿ÷∆π ’œ ");

516 i‡(
djBuff
[
i
].
comm
)

518 
	`GUI_Pröt
( "√≈Õ®–≈π ’œ ");

520 i‡(
djBuff
[
i
].
yj
)

522 
	`GUI_Pröt
( "”¶º±");

524 
	`GUI_Pröt
(" ");

525 
ªt
++;

527 
∑ge
--;

531  
ªt
;

532 
	}
}

534 
	$Do‹Dis_Inô
(*
Õ
)

536 
SëC¡
 = 0;

537 
SëPage
 = 0;

538 
	`Do‹Dis_Di•œy
( 0 );

539 
	}
}

541 
	$Do‹Dis_Key
(
uöt8
 
key
)

543 
key
)

545 
KEY_DEC
:

546 if–
SëPage
 )

548 
SëPage
--;

549 
	`GUI_CÀ¨
();

552 
KEY_INC
:

553 
SëPage
++;

554 
	`GUI_CÀ¨
();

556 
KEY_CANCEL
:

557 
KEY_OK
:

558 
	`MíuExô
();

562 if–
	`Do‹Dis_Di•œy
(
SëPage
) == 0 )

564 if–
SëPage
 )

565 
SëPage
--;

568 
	`GUI_DøwSåög
( 0, 0, "Œﬁ∆˜º˛");

571 
	}
}

	@dataGUI/dataGUI.h

4 #i‚de‡
__DATA_GUI_H__


5 
	#__DATA_GUI_H__


	)

7 #ifde‡
DATA_GUI_GLOBAL


8 
	#DG_EXT


	)

10 
	#DG_EXT
 

	)

15 
DG_EXT
 
MaöDis_Inô
(*
Õ
);

16 
DG_EXT
 
MaöDis_Key
(
uöt8
 
key
);

18 
DG_EXT
 
SysDis_Inô
(*
Õ
);

19 
DG_EXT
 
Key
(
uöt8
 
key
);

21 
DJDis_Inô
(*
Õ
);

22 
DJDis_Key
–
uöt8
 
key
 );

23 
dj_Inô
(*
pd
);

24 
YJ_Inô
–*
pd
 );

25 
Re£t_Inô
–*
pd
 );

27 
SëAddr_Inô
(*
pd
 );

28 
SëAddr_Key
–
uöt8
 
key
 );

30 
CålDis_Inô
(*
Õ
);

31 
CålDis_Key
(
uöt8
 
key
);

33 
Do‹Dis_Inô
(*
Õ
);

34 
Do‹Dis_Key
(
uöt8
 
key
);

38 #unde‡
DG_EXT


	@dataGUI/gui.h

3 
	~"OSgui.h
"

	@dataGUI/hz16.c

5 
	~<gui.h
>

7 
	sFONT_CN_16


9 
	m«me
[2];

10 c⁄° 
uöt8
 *
	mbuff
;

13 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0020
[] = {

17 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_002d
[] = {

21 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_003c
[] = {

25 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_003e
[] = {

29 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_003a
[] = {

33 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_006d
[] = {

37 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0041
[] = {

41 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0031
[] = {

45 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0032
[] = {

49 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0033
[] = {

53 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0034
[] = {

57 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0035
[] = {

61 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0036
[] = {

65 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0037
[] = {

69 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0038
[] = {

73 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0039
[] = {

77 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0030
[] = {

81 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0048
[] = {

85 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0042
[] = {

89 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0054
[] = {

93 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_004b
[] = {

97 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0044
[] = {

101 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0051
[] = {

105 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0074
[] = {

109 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_004c
[] = {

113 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_006f
[] = {

117 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_0070
[] = {

121 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_002e
[] = {

125 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_a1e6
[] = {

129 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b1be
[] = {

133 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bbÁ
[] = {

137 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b5d8
[] = {

141 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d6b7
[] = {

145 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d6f7
[] = {

149 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cfd4
[] = {

153 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_ˇbe
[] = {

157 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b8b4
[] = {

161 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_˚bb
[] = {

165 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cfb5
[] = {

169 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cdb3
[] = {

173 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b8df
[] = {

177 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bcb6
[] = {

181 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c9e8
[] = {

185 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d6c3
[] = {

189 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cdcb
[] = {

193 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b3f6
[] = {

197 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_ˇfd
[] = {

201 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bedd
[] = {

205 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c7eb
[] = {

209 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_ˇe4
[] = {

213 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c8eb
[] = {

217 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c3dc
[] = {

221 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c2eb
[] = {

225 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b6d4
[] = {

229 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b1c8
[] = {

233 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b9ˇ
[] = {

237 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d5cf
[] = {

241 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d1d3
[] = {

245 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_ˇb1
[] = {

249 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b6c8
[] = {

253 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_˚de
[] = {

257 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_ccbd
[] = {

261 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cdb7
[] = {

265 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c1bf
[] = {

269 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b5c7
[] = {

273 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bcc7
[] = {

277 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d7d4
[] = {

281 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b6af
[] = {

285 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bfd8
[] = {

289 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d6c6
[] = {

293 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cdó
[] = {

297 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b3c9
[] = {

301 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d7f3
[] = {

305 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bÁa
[] = {

309 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d3d2
[] = {

313 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bac5
[] = {

317 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c3c5
[] = {

321 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b9d8
[] = {

325 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b5e7
[] = {

329 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d4b4
[] = {

333 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d3a6
[] = {

337 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bcb1
[] = {

341 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c7f8
[] = {

345 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d3f2
[] = {

349 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_b7d6
[] = {

353 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_d7b4
[] = {

357 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_cˇc
[] = {

361 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_c6f7
[] = {

365 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_bc„
[] = {

369 c⁄° 
PROGMEM
 
uöt8
 
	gFONT_FFFF
[] = {

373 c⁄° 
PROGMEM
 
FONT_CN_16
 
	gFONT_16Cn
[] = {

374 {" ",
FONT_0020
},

375 {"-",
FONT_002d
},

376 {"<",
FONT_003c
},

377 {">",
FONT_003e
},

378 {":",
FONT_003a
},

379 {"m",
FONT_006d
},

380 {"A",
FONT_0041
},

381 {"1",
FONT_0031
},

382 {"2",
FONT_0032
},

383 {"3",
FONT_0033
},

384 {"4",
FONT_0034
},

385 {"5",
FONT_0035
},

386 {"6",
FONT_0036
},

387 {"7",
FONT_0037
},

388 {"8",
FONT_0038
},

389 {"9",
FONT_0039
},

390 {"0",
FONT_0030
},

391 {"H",
FONT_0048
},

392 {"B",
FONT_0042
},

393 {"T",
FONT_0054
},

394 {"K",
FONT_004b
},

395 {"D",
FONT_0044
},

396 {"Q",
FONT_0051
},

397 {"t",
FONT_0074
},

398 {"L",
FONT_004c
},

399 {"o",
FONT_006f
},

400 {"p",
FONT_0070
},

401 {".",
FONT_002e
},

402 {"°Ê",
FONT_a1e6
},

403 {"±æ",
FONT_b1be
},

404 {"ª˙",
FONT_bbÁ
},

405 {"µÿ",
FONT_b5d8
},

406 {"÷∑",
FONT_d6b7
},

407 {"÷˜",
FONT_d6f7
},

408 {"œ‘",
FONT_cfd4
},

409 {" æ",
FONT_ˇbe
},

410 {"∏¥",
FONT_b8b4
},

411 {"Œª",
FONT_˚bb
},

412 {"œµ",
FONT_cfb5
},

413 {"Õ≥",
FONT_cdb3
},

414 {"∏ﬂ",
FONT_b8df
},

415 {"º∂",
FONT_bcb6
},

416 {"…Ë",
FONT_c9e8
},

417 {"÷√",
FONT_d6c3
},

418 {"ÕÀ",
FONT_cdcb
},

419 {"≥ˆ",
FONT_b3f6
},

420 {" ˝",
FONT_ˇfd
},

421 {"æ›",
FONT_bedd
},

422 {"«Î",
FONT_c7eb
},

423 {" ‰",
FONT_ˇe4
},

424 {"»Î",
FONT_c8eb
},

425 {"√‹",
FONT_c3dc
},

426 {"¬Î",
FONT_c2eb
},

427 {"∂‘",
FONT_b6d4
},

428 {"±»",
FONT_b1c8
},

429 {"π ",
FONT_b9ˇ
},

430 {"’œ",
FONT_d5cf
},

431 {"—”",
FONT_d1d3
},

432 {" ±",
FONT_ˇb1
},

433 {"∂»",
FONT_b6c8
},

434 {"Œﬁ",
FONT_˚de
},

435 {"ÃΩ",
FONT_ccbd
},

436 {"Õ∑",
FONT_cdb7
},

437 {"¡ø",
FONT_c1bf
},

438 {"µ«",
FONT_b5c7
},

439 {"º«",
FONT_bcc7
},

440 {"◊‘",
FONT_d7d4
},

441 {"∂Ø",
FONT_b6af
},

442 {"øÿ",
FONT_bfd8
},

443 {"÷∆",
FONT_d6c6
},

444 {"ÕÍ",
FONT_cdó
},

445 {"≥…",
FONT_b3c9
},

446 {"◊Û",
FONT_d7f3
},

447 {"ø™",
FONT_bÁa
},

448 {"”“",
FONT_d3d2
},

449 {"∫≈",
FONT_bac5
},

450 {"√≈",
FONT_c3c5
},

451 {"πÿ",
FONT_b9d8
},

452 {"µÁ",
FONT_b5e7
},

453 {"‘¥",
FONT_d4b4
},

454 {"”¶",
FONT_d3a6
},

455 {"º±",
FONT_bcb1
},

456 {"«¯",
FONT_c7f8
},

457 {"”Ú",
FONT_d3f2
},

458 {"∑÷",
FONT_b7d6
},

459 {"◊¥",
FONT_d7b4
},

460 {"Ã¨",
FONT_cˇc
},

461 {"∆˜",
FONT_c6f7
},

462 {"º˛",
FONT_bc„
},

463 {{0xFF,0xFF},
FONT_FFFF
},

467 c⁄° 
uöt8
 *
hz16_GëBôm≠
–
uöt16
 
ch
 );

468 
__WEAK__


469 c⁄° 
uöt8
 *
	$hz16_GëBôm≠
–
uöt16
 
ch
 )

471 
tmp
;

472 
i
=0; 
	`ARRAY_SIZE
(
FONT_16Cn
); i++)

474 
tmp
 = 
	`pgm_ªad_byã
(&
FONT_16Cn
[
i
].
«me
[0]);

475 if–
tmp
 > 0xA0)

476 
tmp
 = 
	`READHZ
–tmp, 
	`pgm_ªad_byã
(&
FONT_16Cn
[
i
].
«me
[1]) );

477 if–
tmp
 =0xFFFF ||Åm∞=
ch
 )

479  
FONT_16Cn
[
i
].
buff
;

482  
NULL
;

483 
	}
}

	@dataGUI/interface.c

1 
	#INTERFACE_GLOBALS


	)

4 
	~"myty≥.h
"

6 
	~"gui_c⁄fig.h
"

8 
	~"öãrÁ˚.h
"

9 
	~"s¸ﬁl.h
"

10 
	~"OS°rög.h
"

11 
	~"OS°dio.h
"

14 
	~"d©aGUI.h
"

16 
	#GUI_HEIGHT
 4

	)

18 
	#MENU_HEIGHT
 2

	)

19 
	#MENU_DISSIZE
 2

	)

23 
	m«me
[12];

24 (*
	möô
Ë–*
	mpvoid
 );

25 (*
	mkey
Ë–
uöt8
 key );

26 }
	tTMíu
;

30 
	m«me
[12];

31 c⁄° 
TMíu
 *
	mpMíu
;

32 
	msize
;

33 }
	tTMMíu
;

37 
Run_Di•œy
(*
Õ
);

38 
Run_Key
(
uöt8
 
key
);

39 
Maö_Di•œy
(*
Õ
);

40 
Maö_Key
(
uöt8
 
key
);

42 
PassW‹d_Inô
(*
Õ
);

43 
PassW‹d_Key
–
uöt8
 
key
 );

44 
SëMíu_Dis1
(*
Õ
);

45 
SëMíu_Key1
(
uöt8
 
key
);

50 
Maö_Inô
(*
Õ
);

51 
MíuDi•œy
( );

53 
ª£t_cmd
();

54 
	$ª£t_Inô
–*
Õ
 )

56 
	`ª£t_cmd
();

57 
	}
}

59 c⁄° 
TMíu
 
	gMíu1
[] = {

60 {"÷˜œ‘ æ", 
Do‹Dis_Inô
, 
Do‹Dis_Key
 },

61 {"µ«º«µÿ÷∑", 
DJDis_Inô
, 
DJDis_Key
 },

62 {"œµÕ≥œ‘ æ", 
SysDis_Inô
, 
Key
 },

63 {"œµÕ≥∏¥Œª", 
ª£t_Inô
, 
Key
 },

64 {"∏ﬂº∂…Ë÷√", 
PassW‹d_Inô
, 
PassW‹d_Key
 },

68 
D©aSZ_Inô
(*);

69 
D©aSZ_Key
(
uöt8
 );

70 c⁄° 
TMíu
 
	gMíu2
[] = {

71 {"◊‘∂Øµ«º«", 
dj_Inô
, 
Key
 },

72 {"µ«º«µÿ÷∑", 
DJDis_Inô
, 
DJDis_Key
 },

73 {"…Ë÷√µÿ÷∑", 
SëAddr_Inô
, 
SëAddr_Key
 },

74 {"√≈◊¥Ã¨", 
Do‹Dis_Inô
, 
Do‹Dis_Key
 },

75 {"∏¥Œª", 
Re£t_Inô
, 
Key
 },

76 {"”¶º±", 
YJ_Inô
, 
Key
 },

77 {"øÿ÷∆", 
CålDis_Inô
, 
CålDis_Key
 },

78 {"…Ë÷√", 
D©aSZ_Inô
, 
D©aSZ_Key
 },

79 {"ÕÀ≥ˆ…Ë÷√", 
Run_Di•œy
, 
Run_Key
 },

84 c⁄° 
TMMíu
 
	gMmíu
[] = {

85 {" ˝æ›…Ë÷√", 
Míu1
, 
ARRAY_SIZE
( Menu1 ) },

86 {"∏ﬂº∂…Ë÷√", 
Míu2
, 
ARRAY_SIZE
( Menu2 ) },

89 c⁄° 
RECT
 
	gmíu_s¸ﬁl
 = {

90 
GUI_XMAX
-8,
GUI_Y
, 8, 
GUI_YMAX


94 
SCROLL
 
	gGUI_s¸ﬁl
;

97 
uöt8
 
	gSëBuff
[32];

98 
uöt8
 
	gSëC¡
;

99 
uöt8
 
	gSëPage
;

100 
uöt8
 
	gSaveE«bÀ
;

101 
LPRECT
 
	gSëRe˘
;

103 
uöt8
 
	gmíu_˙t
;

104 
uöt8
 
	gMmíu_˙t
;

105 
uöt8
 
	gMmíu_í
;

106 
uöt8
 
	gMmíu_GŸoDis
;

108 
uöt16
 
	$FödMíu
–c⁄° *
M«me
, c⁄° *
«me
 )

110 
i
,
j
;

111 if–
M«me
 =
NULL
 )

113 
i
=0; i<
	`ARRAY_SIZE
–
Mmíu
 ); i++)

115 if–!
	`°rcmp
–
Mmíu
[
i
].
«me
, 
M«me
 ) )

117 if–
«me
==
NULL
)

118  
i
<<8;

119 
j
=0; j<
Mmíu
[
i
].
size
; j++ )

121 if(!
	`°rcmp
–
Mmíu
[
i
].
pMíu
[
j
].
«me
,Çame ))

123  (
i
<<8Ë+ 
j
;

129 
	}
}

131 
	$Míuto
–c⁄° *
M«me
, c⁄° *
«me
 )

133 
uöt16
 
ªt
 = 
	`FödMíu
–
M«me
, 
«me
 );

137 
Mmíu_˙t
 = 
ªt
>>8;

138 
míu_˙t
 = 
ªt
 & 0xFF;

139 if–
«me
 !
NULL
 )

141 
Mmíu_í
 = 0;

142 
	`GUI_CÀ¨
();

143 
Mmíu
[
Mmíu_˙t
].
pMíu
[
míu_˙t
].
	`öô
–
NULL
 );

146 
Mmíu_í
 = 1;

147 
	`MíuDi•œy
();

150 
	}
}

152 
	$MíuDi•œy
( )

154 
˙t
 = 
míu_˙t
 / 
MENU_DISSIZE
;

155 
i
;

156 
x
,
y
;

157 if–
Mmíu_í
 == 0 )

160 
	`GUI_CÀ¨
();

161 
˙t
 *
MENU_DISSIZE
;

162 
x
 = 0;

163 
y
 = 0;

164 
	`S¸ﬁl_Dis
–(
LPRECT
)&
míu_s¸ﬁl
, 
Mmíu
[ 
Mmíu_˙t
 ].
size
 , 
míu_˙t
 + 1 );

165 
i
=0; i<
MENU_DISSIZE
; i++)

167 if–
˙t
 =
míu_˙t
 )

169 
	`GUI_SëCﬁ‹
( 0 );

171 
	`GUI_SëPos
–
x
, 
y
 );

172 
	`GUI_PutSåög_P
–
Mmíu
[ 
Mmíu_˙t
 ].
pMíu
[
˙t
++].
«me
 );

173 
	`GUI_SëCﬁ‹
( 1 );

174 
y
 +
MENU_HEIGHT
;

175 if–
˙t
 >
Mmíu
[
Mmíu_˙t
].
size
 )

178 
	}
}

180 
	$MíuExô
( )

182 
Mmíu_í
 = 1;

183 
	`MíuDi•œy
();

184 
	}
}

187 
	$míu_key
–
uöt8
 
key
 )

189 if–
míu_˙t
 >
Mmíu
[ 
Mmíu_˙t
 ].
size
 )

190 
míu_˙t
 = 0;

192  
key
 )

194 
KEY_CANCEL
:

195 
KEY_OK
:

196 
Mmíu_í
 = 0;

197 
	`GUI_CÀ¨
();

198 
Mmíu
[
Mmíu_˙t
].
pMíu
[
míu_˙t
].
	`öô
–
NULL
 );

200 
KEY_UP
:

201 if–
míu_˙t
 )

202 
míu_˙t
--;

204 
míu_˙t
 = 
Mmíu
[ 
Mmíu_˙t
 ].
size
 - 1;

205 
	`MíuDi•œy
();

207 
KEY_DOWN
:

208 
míu_˙t
++;

209 if–
míu_˙t
 >
Mmíu
[ 
Mmíu_˙t
 ].
size
 )

210 
míu_˙t
 = 0;

211 
	`MíuDi•œy
();

214 
	}
}

218 
	$Míu_Inô
( )

220 
uöt16
 
ªt
 = 
	`FödMíu
( "∏ﬂº∂…Ë÷√", "ÕÀ≥ˆ…Ë÷√" );

221 
Mmíu_í
 = 0;

222 
Mmíu_˙t
 = 
ªt
>>8;

223 
míu_˙t
 = 
ªt
 & 0xFF;

224 
Mmíu
[
Mmíu_˙t
].
pMíu
[
míu_˙t
].
	`öô
–
NULL
 );

226 
Mmíu_GŸoDis
 = 0;

227 
	}
}

229 
	$Míu_Key
–
uöt8
 
key
 )

231 if–
Mmíu_í
 == 0 )

233 if–
Mmíu_˙t
 < 
	`ARRAY_SIZE
–
Mmíu
) )

235 
Mmíu
[
Mmíu_˙t
].
pMíu
[
míu_˙t
].
	`key
–
key
 );

237 
Mmíu_˙t
 = 0;

240 
	`míu_key
–
key
 );

242 
	}
}

244 
uöt8
 
	$GŸo_MaöMíu
()

246 if–
Mmíu_GŸoDis
 )

248  
FALSE
;

250 
	`Míuto
( " ˝æ›…Ë÷√", "÷˜œ‘ æ" );

251  
TRUE
;

252 
	}
}

254 
	$GŸo_SëMíu
()

256 
Mmíu_GŸoDis
 = 
TRUE
;

257 
	`Míuto
("∏ﬂº∂…Ë÷√", 
NULL
);

258 
	}
}

266 
	$Run_Di•œy
(*
Õ
)

268 
	`GUI_DøwSåög
( (128 - 16*4)/2, 1,"«¯”Ú∑÷ª˙");

269 
	}
}

271 
	$Run_Key
(
uöt8
 
key
)

273 if(
key
 !
KEY_NULL
)

275 
Mmíu_GŸoDis
 = 
FALSE
;

276 
	`GŸo_MaöMíu
();

278 
	}
}

282 
	$PassW‹d_Dis
()

284 
uöt8
 
i
;

285 
uöt8
 
x
,
y
;

286 
x
 = (
GUI_XMAX
-24*4)/2 + 1;

287 
y
 = 2;

288 
i
=0; i<4; i++)

290 
	`GUI_SëPos
(
x
,
y
);

291 if(
i
 =
SëPage
)

293 
	`GUI_SëCﬁ‹
(0);

295 
	`GUI_PutCh¨
(
SëBuff
[
i
] + '0');

296 
	`GUI_SëCﬁ‹
(1);

298 
x
 += 24;

300 
	}
}

302 
uöt8
 
	$PassW‹d_pd
()

304 if–
SëBuff
[0] == 1 &&

305 
SëBuff
[1] == 0 &&

306 
SëBuff
[2] == 0 &&

307 
SëBuff
[3] == 0

313 
	}
}

315 
	$PassW‹d_Inô
(*
Õ
)

317 
	`mem£t
(
SëBuff
,0,(SetBuff));

318 
SëPage
 = 0;

319 
SëC¡
 = 0;

321 
	`GUI_DøwSåög
(0,0,"«Î ‰»Î√‹¬Î:");

322 
	`PassW‹d_Dis
();

323 
	}
}

326 
	$PassW‹d_Key
(
uöt8
 
key
)

328 
key
)

330 
KEY_INC
:

331 
SëBuff
[
SëPage
]++;

332 if(
SëBuff
[
SëPage
] > 9)

334 
SëBuff
[
SëPage
] = 0;

337 
KEY_DEC
:

338 if(
SëBuff
[
SëPage
] > 0)

340 
SëBuff
[
SëPage
]--;

343 
SëBuff
[
SëPage
] = 9;

346 
KEY_OK
:

347 
SëPage
++;

348 if(
SëPage
 >= 4)

350  
	`PassW‹d_pd
() )

353 
	`GŸo_SëMíu
();

359 
	`GŸo_MaöMíu
();

365 
KEY_CANCEL
:

366 if(
SëPage
 == 0)

368 
	`MíuExô
();

371 
SëPage
--;

374 
	`PassW‹d_Dis
();

375 
	}
}

	@dataGUI/interface.h

3 #i‚de‡
__INTERFACE_H__


4 
	#__INTERFACE_H__


	)

7 #ifde‡ 
INTERFACE_GLOBALS


8 
	#INTERFACE_EXT


	)

10 
	#INTERFACE_EXT
 

	)

15 
	~"gui_c⁄fig.h
"

17 
INTERFACE_EXT
 
Cª©eI¡îÁ˚
();

18 
INTERFACE_EXT
 
uöt8
 
GŸo_MaöMíu
();

19 
INTERFACE_EXT
 
GŸo_SëMíu
();

20 
INTERFACE_EXT
 
MíuGUI_DisRe˘
(
LPRECT
 
ÕRe˘
);

22 
	#MíuToMmíu
–
M«me
 ) 
	`Míuto
–M«me, 
NULL
)

	)

23 
Míuto
–c⁄° *
M«me
, c⁄° *
«me
 );

24 
MíuExô
( );

25 
Míu_Inô
( );

26 
Míu_Key
–
uöt8
 
key
 );

28 #unde‡
INTERFACE_EXT


	@dataGUI/setGUI.c

2 
	~"myty≥.h
"

4 
	~"u£r.h
"

5 
	~"OSgui.h
"

6 
	~"s¸ﬁl.h
"

7 
	~"maö_mac.h
"

8 
	~"öãrÁ˚.h
"

9 
	~"d©aGUI.h
"

10 
	~"p‹écd.h
"

11 
	~"d©a.h
"

17 
CONST_UINT8
 
	m«me
[12];

18 (*
	mfunc
Ë(
	muöt16
);

19 
uöt16
 
	mmö
;

20 
uöt16
 
	mmax
;

21 
uöt16
 
	möc
;

22 }
	tTSë
;

25 
	$SëLCD
–
uöt16
 
d©
 )

27 
	`U£rSëLCDV
(
d©
);

28 
	`LCD_SëV
–
pU§Cfg
->
bg_˙t
 );

29 
	}
}

31 
	#SET_SIZE
 
£tSize


	)

33 
uöt16
 
	gbuff
[16];

34 
uöt8
 
	g∑ge
;

35 
uöt8
 
	g£tEn
;

36 
uöt8
 
	g£tSize
;

37 c⁄° 
TSë
 *
	g£tCMD
;

38 
RECT
 
míu_s¸ﬁl
;

40 
	#DIS_SIZE
 2

	)

41 
	#DIS_HEIGHT
 2

	)

44 c⁄° 
TSë
 
	gSëCmd
[] =

46 {"…Ë÷√µÿ÷∑", 
U£rSëAddr
 , 1, 2000, 1,},

47 {" ˝¡ø", 
U£rSëCou¡
, 1,
MAX_POINT_COUNT
, 1,},

48 {"∂‘±»∂»", 
SëLCD
 , 1, 63, 1,},

49 {"π ’œ—” ±", 
U£rSëEºDly
, 0, 240, 5,},

52 
	$SëInô
( )

54 
£tEn
 = 0;

55 
∑ge
 = 0;

56 
£tSize
 = 
	`ARRAY_SIZE
–
SëCmd
 );

57 
£tCMD
 = 
SëCmd
;

58 
buff
[0] = 
pU§Cfg
->
addªss
;

59 
buff
[1] = 
pU§Cfg
->
cou¡
;

60 
buff
[2] = 
pU§Cfg
->
bg_˙t
;

61 
buff
[3] = 
pU§Cfg
->
îrDly
;

63 
	}
}

65 
	$SëDi•œy
( )

67 
i
;

68 
y
 = 0;

69 
cﬁ‹
 = 
£tEn
==0? 0: 1;

70 
˙t
 = 
∑ge
 / 
DIS_SIZE
;

71 
˙t
 *
DIS_SIZE
;

72 
	`S¸ﬁl_Dis
–&
míu_s¸ﬁl
, 
SET_SIZE
 , 
∑ge
 + 1 );

73 
i
=0; i<
DIS_SIZE
; i++)

75 if–
˙t
 =
∑ge
 )

76 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

77 
	`GUI_SëPos
–0, 
y
 );

78 
	`GUI_PutSåög_P
–
£tCMD
[
˙t
++].
«me
 );

79 
	`GUI_SëCﬁ‹
(1);

80 if–
˙t
 >
SET_SIZE
)

82 
y
 +
DIS_HEIGHT
;

84 
	}
}

86 
	$SëDisVÆue
( )

88 
i
;

89 
y
 = 0;

90 
cﬁ‹
 = 
£tEn
? 0: 1;

91 
˙t
 = 
∑ge
 / 
DIS_SIZE
;

92 
˙t
 *
DIS_SIZE
;

93 
i
=0; i<
DIS_SIZE
; i++)

95 if–
˙t
 =
∑ge
 )

96 
	`GUI_SëCﬁ‹
–
cﬁ‹
 );

97 
	`GUI_SëPos
–72, 
y
 );

98 
	`GUI_Pröt
("%4d", 
buff
[
˙t
++] );

99 
	`GUI_SëCﬁ‹
(1);

100 if–
˙t
 >
SET_SIZE
 )

102 
y
 +
DIS_HEIGHT
;

104 
	}
}

106 
	$SëInc
–
ix
 )

108 
˙t
 = 
buff
[
∑ge
];

109 
max
 = 
£tCMD
[
∑ge
].max;

110 
˙t
 +
£tCMD
[
∑ge
].
öc
 * 
ix
;

111 if–
˙t
 > 
max
 )

112 
˙t
 = 
£tCMD
[
∑ge
].
mö
;

113 
buff
[
∑ge
] = 
˙t
;

114 
	}
}

116 
	$SëDec
–
ix
 )

118 
˙t
 = 
buff
[
∑ge
];

119 
mö
 = 
£tCMD
[
∑ge
].min;

120 
˙t
 -
£tCMD
[
∑ge
].
öc
 * 
ix
;

121 if–
˙t
 < 
mö
 )

122 
˙t
 = 
£tCMD
[
∑ge
].
max
;

123 
buff
[
∑ge
] = 
˙t
;

124 
	}
}

126 
	$D©aSZ_Inô
(*
Õ
)

128 
	`SëInô
();

129 
	`SëDi•œy
();

130 
	`SëDisVÆue
();

131 
	}
}

133 
	$D©aSZ_Key
–
uöt8
 
key
 )

135  
key
 )

137 
KEY_LEFT
:

138 if–
£tEn
 )

140 
	`SëInc
(10);

143 
KEY_RIDTH
:

144 if–
£tEn
 )

146 
	`SëDec
(10);

149 
KEY_UP
:

150 if–
£tEn
 )

152 
	`SëInc
(1);

155 if–
∑ge
 )

156 
∑ge
--;

158 
∑ge
 = 
SET_SIZE
 - 1;

159 
	`GUI_CÀ¨
();

162 
KEY_DOWN
:

163 if–
£tEn
 )

165 
	`SëDec
(1);

168 
∑ge
++;

169 if–
∑ge
 >
SET_SIZE
 )

170 
∑ge
 = 0;

171 
	`GUI_CÀ¨
();

174 
KEY_OK
:

175 if–
£tEn
 )

177 
£tEn
 = 0;

178 
£tCMD
[
∑ge
].
	`func
–
buff
[page] );

180 
£tEn
++;

182 
KEY_CANCEL
:

183 if–
£tEn
 )

185 
£tEn
 = 0;

188 
	`MíuExô
();

193 
	`SëDi•œy
();

194 
	`SëDisVÆue
();

195 
	}
}

	@drive/I2C.c

3 
	#I2C_SOURCE


	)

5 
	~"myty≥.h
"

6 
	~"I2C.h
"

7 
	~"Mi¸oOS.h
"

8 
	~"b•.h
"

9 
	~"wdt.h
"

10 
	~"≠p_cfg.h
"

12 
	#I2C_IDLE
 0

	)

13 
	#I2C_STARTED
 1

	)

14 
	#I2C_RESTARTED
 2

	)

15 
	#I2C_REPEATED_START
 3

	)

16 
	#DATA_ACK
 4

	)

17 
	#DATA_NACK
 5

	)

18 
	#I2C_BUSY
 6

	)

19 
	#I2C_NO_DATA
 7

	)

20 
	#I2C_NACK_ON_ADDRESS
 8

	)

21 
	#I2C_NACK_ON_DATA
 9

	)

22 
	#I2C_ARBITRATION_LOST
 10

	)

23 
	#I2C_TIME_OUT
 11

	)

24 
	#I2C_OK
 12

	)

26 
	#I2CONSET_I2EN
 (0x1<<6Ë

	)

27 
	#I2CONSET_AA
 (0x1<<2)

	)

28 
	#I2CONSET_SI
 (0x1<<3)

	)

29 
	#I2CONSET_STO
 (0x1<<4)

	)

30 
	#I2CONSET_STA
 (0x1<<5)

	)

32 
	#I2CONCLR_AAC
 (0x1<<2Ë

	)

33 
	#I2CONCLR_SIC
 (0x1<<3)

	)

34 
	#I2CONCLR_STAC
 (0x1<<5)

	)

35 
	#I2CONCLR_I2ENC
 (0x1<<6)

	)

37 
	#I2DAT_I2C
 0x00000000

	)

38 
	#I2ADR_I2C
 0x00000000

	)

39 
	#I2SCLH_SCLH
 0x00000180

	)

40 
	#I2SCLL_SCLL
 0x00000180

	)

41 
	#I2SCLH_HS_SCLH
 0x00000015

	)

42 
	#I2SCLL_HS_SCLL
 0x00000015

	)

45 #i‚de‡
I2C0CONCLR


46 
	#I2C0SCLH
 
I20SCLH


	)

47 
	#I2C0SCLL
 
I20SCLL


	)

48 
	#I2C0CONCLR
 
I20CONCLR


	)

49 
	#I2C0CONSET
 
I20CONSET
```

	)

50 
	#I2C0STAT
 
I20STAT


	)

51 
	#I2C0DAT
 
I20DAT


	)

55 
	$i2c_öô
(
uöt32
 
i2c_˛k
)

57 
LPC_SYSCON
->
PRESETCTRL
 |= (0x1<<1);

58 
LPC_SYSCON
->
SYSAHBCLKCTRL
 |= (1<<5);

60 
LPC_IOCON
->
PIO0_4
 = 0x01;

61 
LPC_IOCON
->
PIO0_5
 = 0x01;

64 
LPC_I2C
->
CONCLR
 = 
I2CONCLR_AAC
 | 
I2CONCLR_SIC
 | 
I2CONCLR_STAC
 | 
I2CONCLR_I2ENC
;

67 
LPC_I2C
->
SCLL
 = 
I2SCLL_SCLL
;

68 
LPC_I2C
->
SCLH
 = 
I2SCLH_SCLH
;

70 
uöt32
 
˛k
;

71 
uöt32
 
ãmpH
,
ãmpL
;

72 
˛k
 = 
FPCLK
;

74 
˛k
 = clk/
i2c_˛k
;

76 
ãmpH
 = 
˛k
/2;

77 
ãmpL
 = 
˛k
-
ãmpH
;

78 
LPC_I2C
->
SCLH
 = 
ãmpH
;

79 
LPC_I2C
->
SCLL
 = 
ãmpL
;

82 
LPC_I2C
->
CONSET
 = 
I2CONSET_I2EN
;

84 
	}
}

87 
uöt8
 
	$i2c_°¨t
()

89 
LPC_I2C
->
CONCLR
 = 0x2c;

90 
LPC_I2C
->
CONSET
 = 0x60;

91 (
LPC_I2C
->
CONSET
 &0x08)==0);

92  
LPC_I2C
->
STAT
;

93 
	}
}

96 
uöt8
 
	$i2c_wrôebyã
(
uöt8
 
d©
)

98 
LPC_I2C
->
CONCLR
 = 0x20;

99 
LPC_I2C
->
DAT
 = 
d©
;

101 
LPC_I2C
->
CONCLR
 = 0x08;

103 (
LPC_I2C
->
CONSET
 &0x08)==0) ;

104  
LPC_I2C
->
STAT
;

105 
	}
}

107 
uöt8
 
	$i2c_ªadbyã
(
uöt8
 *
c
 ,uöt8 
ack
)

109 if(
ack
)

110 
LPC_I2C
->
CONSET
 = 0x04;

112 
LPC_I2C
->
CONCLR
 = 0x24;

114 
LPC_I2C
->
CONCLR
 = 0x08;

115 (
LPC_I2C
->
CONSET
 &0x08)==0) ;

116 
LPC_I2C
->
CONCLR
 = 0x24;

118 *
c
 = 
LPC_I2C
->
DAT
;

120 (
LPC_I2C
->
STAT
);

121 
	}
}

123 
uöt8
 
	$i2c_°›
()

125 
LPC_I2C
->
CONSET
 = 
I2CONSET_STO
;

126 
LPC_I2C
->
CONCLR
 = 
I2CONCLR_SIC
;

129  
LPC_I2C
->
CONSET
 & 
I2CONSET_STO
 );

130  
TRUE
;

131 
	}
}

135 
uöt8
 
	$i2c_Wrôe
(
uöt8
 
addªss
, uöt8 *
°r
,
Nbyã
)

137 
addªss
 =áddress & 0xfe;

138 if(
	`i2c_°¨t
(Ë=
TW_START
)

140 if(
	`i2c_wrôebyã
(
addªss
Ë=
TW_MT_SLA_ACK
)

143 if(
	`i2c_wrôebyã
(*
°r
++Ë!
TW_MT_DATA_ACK
)

144 
TWI_Wrôe_Eº
;

145 }--
Nbyã
!=0);

147 
	`i2c_°›
();

148 (
TRUE
);

151 
TWI_Wrôe_Eº
:

152 
	`i2c_°›
();

153 (
FALSE
);

154 
	}
}

156 
uöt8
 
	$i2c_Ród
(
uöt8
 
addªss
, uöt8 *
°r
,
Nbyã
)

158 if(
	`i2c_°¨t
(Ë=
TW_START
)

160 if(
	`i2c_wrôebyã
(
addªss
|0x01Ë!
TW_MR_SLA_ACK
)

161 
TWI_Ród_Eº
;

162 
Nbyã
--;

163 if(
Nbyã
 != 0)

166 if(
	`i2c_ªadbyã
(
°r
++,
TWI_ACK
Ë!
TW_MR_DATA_ACK
)

167 
TWI_Ród_Eº
;

168 }--
Nbyã
 != 0);

170 if(
	`i2c_ªadbyã
(
°r
,
TWI_NACK
Ë!
TW_MR_DATA_NACK
)

171 
TWI_Ród_Eº
;

172 
	`i2c_°›
();

173 (
TRUE
);

175 
TWI_Ród_Eº
:

176 
	`i2c_°›
();

177 (
FALSE
);

178 
	}
}

	@drive/I2C.h

3 #i‚de‡
__I2C_H__


4 
	#__I2C_H__


	)

8 
	#TW_START
 0x08

	)

9 
	#TW_REP_START
 0x10

	)

11 
	#TW_MT_SLA_ACK
 0x18

	)

12 
	#TW_MT_SLA_NACK
 0x20

	)

13 
	#TW_MT_DATA_ACK
 0x28

	)

14 
	#TW_MT_DATA_NACK
 0x30

	)

15 
	#TW_MT_ARB_LOST
 0x38

	)

17 
	#TW_MR_ARB_LOST
 0x38

	)

18 
	#TW_MR_SLA_ACK
 0x40

	)

19 
	#TW_MR_SLA_NACK
 0x48

	)

20 
	#TW_MR_DATA_ACK
 0x50

	)

21 
	#TW_MR_DATA_NACK
 0x58

	)

23 
	#TW_ST_SLA_ACK
 0xA8

	)

24 
	#TW_ST_ARB_LOST_SLA_ACK
 0xB0

	)

25 
	#TW_ST_DATA_ACK
 0xB8

	)

26 
	#TW_ST_DATA_NACK
 0xC0

	)

27 
	#TW_ST_LAST_DATA
 0xC8

	)

29 
	#TW_SR_SLA_ACK
 0x60

	)

30 
	#TW_SR_ARB_LOST_SLA_ACK
 0x68

	)

31 
	#TW_SR_GCALL_ACK
 0x70

	)

32 
	#TW_SR_ARB_LOST_GCALL_ACK
 0x78

	)

33 
	#TW_SR_DATA_ACK
 0x80

	)

34 
	#TW_SR_DATA_NACK
 0x88

	)

35 
	#TW_SR_GCALL_DATA_ACK
 0x90

	)

36 
	#TW_SR_GCALL_DATA_NACK
 0x98

	)

37 
	#TW_SR_STOP
 0xA0

	)

39 
	#TW_NO_INFO
 0xF8

	)

40 
	#TW_BUS_ERROR
 0x00

	)

42 
	#TWI_ACK
 0X01

	)

43 
	#TWI_NACK
 0X00

	)

46 
	#I2C_20K
 20000UL

	)

47 
	#I2C_50K
 50000UL

	)

48 
	#I2C_100K
 100000UL

	)

49 
	#I2C_200K
 200000UL

	)

50 
	#I2C_400K
 400000UL

	)

52 #ifde‡
I2C_SOURCE


53 
	#EEPROM_EXT


	)

55 
	#EEPROM_EXT
 

	)

58 
i2c_öô
 (
uöt32
 
i2c_˛k
);

59 
uöt8
 
i2c_Wrôe
 (uöt8 
addªss
, uöt8 *
°r
, 
Nbyã
);

60 
uöt8
 
i2c_Ród
 (uöt8 
addªss
, uöt8 *
°r
, 
Nbyã
);

62 
uöt8
 
i2c_°¨t
 ();

63 
uöt8
 
i2c_wrôebyã
(uöt8 
d©
);

64 
uöt8
 
i2c_ªadbyã
 (uöt8 *
c
 ,uöt8 
ack
);

65 
uöt8
 
i2c_°›
 ();

70 
ölöe
 
uöt8
 
	$i2c_WrôeExt
(
uöt8
 
addªss
, uöt8 
ad_r°
, uöt8 *
°r
,uöt8 
Nbyã
)

72 
addªss
 =áddress & 0xfe;

73 if(
	`i2c_°¨t
(Ë=
TW_START
)

75 if(
	`i2c_wrôebyã
(
addªss
Ë=
TW_MT_SLA_ACK
)

77 if(
	`i2c_wrôebyã
(
ad_r°
Ë!
TW_MT_DATA_ACK
)

78 
TWI_Wrôe_Eº
;

81 if(
	`i2c_wrôebyã
(*
°r
++Ë!
TW_MT_DATA_ACK
)

82 
TWI_Wrôe_Eº
;

83 }--
Nbyã
!=0);

85 
	`i2c_°›
();

86 (
TRUE
);

88 
TWI_Wrôe_Eº
;

90 (
FALSE
);

91 
TWI_Wrôe_Eº
:

93 
	`i2c_°›
();

94 (
FALSE
);

95 
	}
}

97 
ölöe
 
uöt8
 
	$i2c_RódExt
(
uöt8
 
addªss
, uöt8 
ad_r°
, uöt8 *
°r
,uöt8 
Nbyã
)

99 if(
	`i2c_°¨t
(Ë=
TW_START
)

101 if(
	`i2c_wrôebyã
(
addªss
&0x„Ë!
TW_MT_SLA_ACK
)

102 
TWI_Ród_Eº
;

103 if(
	`i2c_wrôebyã
(
ad_r°
Ë!
TW_MT_DATA_ACK
)

104 
TWI_Ród_Eº
;

105 if(
	`i2c_°¨t
(Ë=
TW_REP_START
)

107 if(
	`i2c_wrôebyã
(
addªss
|0x01Ë!
TW_MR_SLA_ACK
)

108 
TWI_Ród_Eº
;

109 
Nbyã
--;

110 if(
Nbyã
 != 0)

113 if(
	`i2c_ªadbyã
(
°r
++,
TWI_ACK
Ë!
TW_MR_DATA_ACK
)

114 
TWI_Ród_Eº
;

115 }--
Nbyã
 != 0);

117 if(
	`i2c_ªadbyã
(
°r
,
TWI_NACK
Ë!
TW_MR_DATA_NACK
)

118 
TWI_Ród_Eº
;

119 
	`i2c_°›
();

120 (
TRUE
);

123 (
FALSE
);

124 
TWI_Ród_Eº
:

126 
	`i2c_°›
();

127 (
FALSE
);

128 
	}
}

130 
ölöe
 
uöt8
 
	$i2c_WrôeExtW‹d
(
uöt8
 
addªss
, 
uöt16
 
ad_r°
, uöt8 *
°r
,uöt8 
Nbyã
)

132 
addªss
 =áddress & 0xfe;

133 if(
	`i2c_°¨t
(Ë=
TW_START
)

135 if(
	`i2c_wrôebyã
(
addªss
Ë=
TW_MT_SLA_ACK
)

137 if(
	`i2c_wrôebyã
(
ad_r°
/256Ë!
TW_MT_DATA_ACK
)

138 
TWI_Wrôe_Eº
;

140 if(
	`i2c_wrôebyã
(
ad_r°
%256Ë!
TW_MT_DATA_ACK
)

141 
TWI_Wrôe_Eº
;

144 if(
	`i2c_wrôebyã
(*
°r
++Ë!
TW_MT_DATA_ACK
)

145 
TWI_Wrôe_Eº
;

146 }--
Nbyã
!=0);

148 
	`i2c_°›
();

149 (
TRUE
);

151 
TWI_Wrôe_Eº
;

153 (
FALSE
);

154 
TWI_Wrôe_Eº
:

156 
	`i2c_°›
();

157 (
FALSE
);

158 
	}
}

160 
ölöe
 
uöt8
 
	$i2c_RódExtW‹d
(
uöt8
 
addªss
, 
uöt16
 
ad_r°
, uöt8 *
°r
,uöt8 
Nbyã
)

162 if(
	`i2c_°¨t
(Ë=
TW_START
)

164 if(
	`i2c_wrôebyã
(
addªss
&0x„Ë!
TW_MT_SLA_ACK
)

165 
TWI_Ród_Eº
;

167 if(
	`i2c_wrôebyã
(
ad_r°
/256Ë!
TW_MT_DATA_ACK
)

168 
TWI_Ród_Eº
;

170 if(
	`i2c_wrôebyã
(
ad_r°
%256Ë!
TW_MT_DATA_ACK
)

171 
TWI_Ród_Eº
;

173 if(
	`i2c_°¨t
(Ë=
TW_REP_START
)

175 if(
	`i2c_wrôebyã
(
addªss
|0x01Ë!
TW_MR_SLA_ACK
)

176 
TWI_Ród_Eº
;

177 
Nbyã
--;

178 if(
Nbyã
 != 0)

181 if(
	`i2c_ªadbyã
(
°r
++,
TWI_ACK
Ë!
TW_MR_DATA_ACK
)

182 
TWI_Ród_Eº
;

183 }--
Nbyã
 != 0);

185 if(
	`i2c_ªadbyã
(
°r
,
TWI_NACK
Ë!
TW_MR_DATA_NACK
)

186 
TWI_Ród_Eº
;

187 
	`i2c_°›
();

188 (
TRUE
);

191 (
FALSE
);

192 
TWI_Ród_Eº
:

194 
	`i2c_°›
();

195 (
FALSE
);

196 
	}
}

200 #unde‡
EEPROM_EXT


	@drive/IAP.c

25 
	~"IAP.h
"

26 
	~"≠p_cfg.h
"

27 
	~"pcomm™d.h
"

32 
	#IAP_FCCLK
 (25000)

	)

33 
	#IAP_ENTER_ADR
 0x1FFF1FF1

	)

35 (*
	tIAP
)(
	tuöt32
 [],uint32 []);

41 
	#IAP_E¡ry
(
a
, 
b
Ë((
IAP
Ë
IAP_ENTER_ADR
)◊, b)

	)

44 
uöt32
 
comm™d
[5];

45 
uöt32
 
ªsu…
[4];

55 
uöt32
 
	$£˘‹Pª∑ª
 (
uöt8
 
£c1
, uöt8 
£c2
)

57 
comm™d
[0] = 
IAP_Pª∑ª
;

58 
comm™d
[1] = 
£c1
;

59 
comm™d
[2] = 
£c2
;

60 
	`IAP_E¡ry
(
comm™d
, 
ªsu…
);

62  (
ªsu…
[0]);

63 
	}
}

74 
uöt32
 
	$ømToFœsh
 (
uöt32
 
d°
, uöt32 
§c
, uöt32 
no
)

76 
comm™d
[0] = 
IAP_RAMTOFLASH
;

77 
comm™d
[1] = 
d°
;

78 
comm™d
[2] = 
§c
;

79 
comm™d
[3] = 
no
;

80 
comm™d
[4] = 
IAP_FCCLK
;

81 
	`IAP_E¡ry
(
comm™d
, 
ªsu…
);

83  (
ªsu…
[0]);

84 
	}
}

94 
uöt32
 
	$£˘‹Eø£
 (
uöt8
 
£c1
, uöt8 
£c2
)

96 
comm™d
[0] = 
IAP_ERASESECTOR
;

97 
comm™d
[1] = 
£c1
;

98 
comm™d
[2] = 
£c2
;

99 
comm™d
[3] = 
IAP_FCCLK
;

100 
	`IAP_E¡ry
(
comm™d
, 
ªsu…
);

102  (
ªsu…
[0]);

103 
	}
}

113 
uöt32
 
	$bœnkChk
 (
uöt8
 
£c1
, uöt8 
£c2
)

115 
comm™d
[0] = 
IAP_BLANKCHK
;

116 
comm™d
[1] = 
£c1
;

117 
comm™d
[2] = 
£c2
;

118 
	`IAP_E¡ry
(
comm™d
, 
ªsu…
);

120  (
ªsu…
[0]);

121 
	}
}

132 
uöt32
 
	$d©aCom∑ª
 (
uöt32
 
d°
, uöt32 
§c
, uöt32 
no
)

134 
comm™d
[0] = 
IAP_COMPARE
;

135 
comm™d
[1] = 
d°
;

136 
comm™d
[2] = 
§c
;

137 
comm™d
[3] = 
no
;

138 
	`IAP_E¡ry
(
comm™d
, 
ªsu…
);

140  (
ªsu…
[0]);

141 
	}
}

147 
uöt32
 
	$∑rIdRód
 ()

149 
comm™d
[0] = 
IAP_READPARTID
;

150 
	`IAP_E¡ry
(
comm™d
, 
ªsu…
);

152  (
ªsu…
[1]);

153 
	}
}

158 
uöt32
 
	$codeIdBoŸ
 ()

160 
comm™d
[0] = 
IAP_BOOTCODEID
;

161 
	`IAP_E¡ry
 (
comm™d
, 
ªsu…
);

163  (
ªsu…
[1]);

164 
	}
}

167 
uöt32
 
__NOINIT__
 
	gi•_í
;

169 
	$GŸoISP
()

171 
uöt32
 
comm™d
[4];

172 if–
i•_í
 != 0x55AA55AAUL)

174 
i•_í
 = 0;

175 
comm™d
[0] = 
IAP_ReövokeISP
;

176 
	`IAP_E¡ry
 (
comm™d
, 
NULL
);

178 
	}
}

180 
	~"b•.h
"

182 
	$i•_cmd
–
¨gs
, **
¨gv
 )

184 
	`¥ötk
("goto isp \n");

185 
i•_í
 = 0x55AA55AAUL;

186 
	`BSP_Re£t
();

188 
	}
}

189 
PSHELL_CMD
–
i•
, 
i•_cmd
, "isp");

	@drive/IAP.h

25 #i‚de‡
__IAP_H


26 
	#__IAP_H


	)

28 
	~"os_˝u.h
"

33 
	#IAP_Pª∑ª
 50

	)

35 
	#IAP_RAMTOFLASH
 51

	)

38 
	#IAP_ERASESECTOR
 52

	)

40 
	#IAP_BLANKCHK
 53

	)

42 
	#IAP_READPARTID
 54

	)

43 
	#IAP_BOOTCODEID
 55

	)

44 
	#IAP_COMPARE
 56

	)

47 
	#IAP_ReövokeISP
 57

	)

56 
	#CMD_SUCCESS
 0

	)

57 
	#INVALID_COMMAND
 1

	)

58 
	#SRC_ADDR_ERROR
 2

	)

59 
	#DST_ADDR_ERROR
 3

	)

60 
	#SRC_ADDR_NOT_MAPPED
 4

	)

61 
	#DST_ADDR_NOT_MAPPED
 5

	)

62 
	#COUNT_ERROR
 6

	)

63 
	#INVALID_SECTOR
 7

	)

64 
	#SECTOR_NOT_BLANK
 8

	)

65 
	#SECTOR_NOT_PREPARED_FOR_WRITE_OPERATION
 9

	)

66 
	#COMPARE_ERROR
 10

	)

67 
	#BUSY
 11

	)

70 
GŸoISP
();

80 
uöt32
 
£˘‹Pª∑ª
 (
uöt8
 
£c1
, uöt8 
£c2
);

91 
uöt32
 
ømToFœsh
 (uöt32 
d°
, uöt32 
§c
, uöt32 
no
);

101 
uöt32
 
£˘‹Eø£
 (
uöt8
 
£c1
, uöt8 
£c2
);

111 
uöt32
 
bœnkChk
 (
uöt8
 
£c1
, uöt8 
£c2
);

120 
uöt32
 
∑rIdRód
 ();

129 
uöt32
 
codeIdBoŸ
 ();

140 
uöt32
 
d©aCom∑ª
 (uöt32 
d°
, uöt32 
§c
, uöt32 
no
);

	@drive/LPCssp.c

3 
	~"b•.h
"

7 
	$SSP_£t
(
p‹t
, 
uöt32
 
baudøã
,
uöt8
 
bôs
, uöt8 
ty≥s
)

9 
LPC_SSP_Ty≥Def
 *
SSP
 = 
p‹t
==0? 
LPC_SSP0
: 
LPC_SSP1
;

10 
uöt32
 
˙t
;

11 if(
bôs
 < 4 || bits>16)

12 
bôs
 = 8;

13 
bôs
--;

15 if–
ty≥s
 > 3 )

16 
ty≥s
 = 3;

18 
˙t
 = (
FCCLK
)/
baudøã
 - 1;

22 
SSP
->
CR0
 = (
bôs
<<0Ë| (0<<4Ë| (
ty≥s
<<6Ë| (
˙t
<<8);

23 
SSP
->
CPSR
 = 0x02;

24 
SSP
->
CR1
 |= (1<<1);

25 
	}
}

37 
	$SSP_öô
(
p‹t
, 
uöt32
 
baudøã
,
uöt8
 
bôs
, uöt8 
ty≥s
)

39 
LPC_SSP_Ty≥Def
 *
SSP
;

41 if–
p‹t
 == 0 )

43 
SSP
 = 
LPC_SSP0
;

44 
LPC_SYSCON
->
PRESETCTRL
 |= 0x01;

47 
LPC_IOCON
->
PIO0_6
 |= 0x02;

48 
LPC_IOCON
->
PIO0_8
 |= 0x01;

49 
LPC_IOCON
->
PIO0_9
 |= 0x01;

52 
LPC_IOCON
->
SCK_LOC
 = 0x02;

53 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_SSP0
 );

55 
LPC_SYSCON
->
SSP0CLKDIV
 = 0x01;

56 
LPC_SSP0
->
IMSC
 = 0x00;

59 
SSP
 = 
LPC_SSP1
;

62 
	`SSP_£t
(
p‹t
, 
baudøã
, 
bôs
, 
ty≥s
 );

63 
	}
}

65 
uöt16
 
	$SSP_Tøns„rByã
(
p‹t
, 
uöt16
 
d©a
)

67 
uöt16
 
ªt
;

68 
LPC_SSP_Ty≥Def
 *
SSP
 = 
p‹t
==0? 
LPC_SSP0
: 
LPC_SSP1
;

70 (
SSP
->
SR
 & 0x02) == 0);

71 
SSP
->
DR
 = 
d©a
;

72 (
SSP
->
SR
 & 0x10) == 0x10);

73 
ªt
 = 
SSP
->
DR
;

75  
ªt
;

76 
	}
}

	@drive/adc.c

4 
	~"b•.h
"

5 
	~"adc.h
"

6 
	~"m©h.h
"

7 
	~"≠p_cfg.h
"

9 
uöt32_t
 
	gulADCBuf
;

10 
	gADCsize
;

11 
	gADCFœg
;

12 
	gADCch™√l
;

14 
	#ADC_TIMER32
 2000000

	)

15 
	#ACHZ_TIMER
 ( 
ADC_TIMER32
 / 50 )

	)

16 
	#ACHZ_CNT
 64

	)

17 
	#ACHZ_GETCNT
 ( 
ACHZ_CNT
 * 4 )

	)

19 
	#ACHZ_MR0
 ((
ACHZ_TIMER
 ) / (
ACHZ_CNT
))

	)

28 
	$ADCInô
( )

31 
LPC_SYSCON
->
PDRUNCFG
 &= ~(0x1<<4);

32 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_ADC
 );

34 
LPC_IOCON
->
R_PIO0_11
 = 0x02;

35 
LPC_IOCON
->
R_PIO1_0
 = 0x02;

44 
LPC_SYSCON
->
PDRUNCFG
 &= ~(0x01 << 4);

45 
LPC_SYSCON
->
SYSAHBCLKCTRL
 |= (0x01 << 13);

46 
LPC_ADC
->
CR
 = ( 0x01 << 0 ) |

47 (–
FCCLK
 / 1000000 - 1 ) << 8 ) |

53 
	`NVIC_E«bÀIRQ
(
ADC_IRQn
);

54 
	`NVIC_SëPri‹ôy
(
ADC_IRQn
, 2);

55 
LPC_ADC
->
INTEN
 = 
	`BIT
(0) | BIT(1) | BIT(2) | BIT(3) | BIT(5);

56 
	}
}

67 
__AFTER__
 
ADC_IRQH™dÀr
();

68 
	$ADC_IRQH™dÀr
()

70 
uöt32
 
tmp
 = 
LPC_ADC
->
DR
[
ADCch™√l
];

71 
tmp
 = (tmp >> 6) & 0x3FF;

72 
ulADCBuf
 +
tmp
 *Åmp;

73 
ADCsize
--;

74 if–
ADCsize
 == 0 )

76 
	`ADC_DißbÀ
();

77 
ADCFœg
 = 1;

79 
	}
}

82 
	$ADC_En
()

84 
LPC_ADC
->
CR
 |= (1<<24 );

85 
	}
}

90 
	$ADC_E«bÀ
–
uöt8
 
ch™√l
 )

92 
ADCsize
 = 
ACHZ_GETCNT
;

93 
ADCFœg
 = 0;

94 
ulADCBuf
 = 0;

96 if–
ch™√l
 > 5 )

97 
ch™√l
 = 5;

99 
ADCch™√l
 = 
ch™√l
;

101 
LPC_ADC
->
CR
 = ( 1 << 
ch™√l
 ) |

102 (–
FCCLK
 / 1000000 - 1 ) << 8 ) |

108 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_CT32B0
 );

110 
LPC_TMR32B0
->
TC
 = 0;

111 
LPC_TMR32B0
->
PC
 = 0;

112 
LPC_TMR32B0
->
IR
 = 0;

113 
LPC_TMR32B0
->
PR
 = 
FPCLK
/
ADC_TIMER32
-1;

114 
LPC_TMR32B0
->
MCR
 = 3;

115 
LPC_TMR32B0
->
MR0
 = 
ACHZ_MR0
 ;

116 
LPC_TMR32B0
->
EMR
 = 
	`BIT
(0 ) | (2 << 4 );

117 
LPC_TMR32B0
->
PWMC
 = 
	`BIT
(0);

118 
LPC_TMR32B0
->
TCR
 = 1;

120 
	`NVIC_E«bÀIRQ
(
ADC_IRQn
);

121 
	}
}

123 
	$ADC_DißbÀ
( )

125 
LPC_TMR32B0
->
TCR
 = 0;

126 
	`NVIC_DißbÀIRQ
–
ADC_IRQn
 );

127 
	}
}

129 
uöt16
 
	$sqπ_fixed
(
uöt32
 
a
)

131 
uöt32
 
i
,
c
;

132 
uöt32
 
b
 = 0;

133 if(
a
 == 0)  0;

134 
i
=0x40000000; i!=0; i>>=2)

136 
c
 = 
i
+
b
;

137 
b
 >>= 1;

138 if(
c
 <
a
)

140 
a
 -
c
;

141 
b
 +
i
;

144  ((
uöt16
)
b
);

145 
	}
}

147 
	$ADC_Gë
–
ac
 )

149 
ªt
 = 
ACHZ_GETCNT
;

150 if–!
ADCFœg
 )

154 
ADCFœg
 = 0;

155 if–
ac
 )

156 
ªt
 /= 2;

157 
ªt
 = 
	`sqπ_fixed
–
ulADCBuf
 /Ñet );

158  
ªt
;

159 
	}
}

	@drive/adc.h

2 #i‚de‡
__ADC_H__


3 
	#__ADC_H__


	)

6 
ADCInô
( );

7 
ADC_E«bÀ
–
uöt8
 
ch™√l
 );

8 
ADC_DißbÀ
( );

9 
ADC_Gë
–
ac
 );

10 
ADC_En
();

11 
ADC_GëCh™√l
–
ch
, 
ac
 );

	@drive/at24c256.c

2 
	~"myty≥.h
"

3 
	~"I2C.h
"

4 
	~"≠p_cfg.h
"

5 
	~"©24c256.h
"

9 
	#MAX_ADDRESS
 0x8000

	)

10 
	#BUFF_SIZE
 32

	)

11 
	#AT24_ID
 0xA0

	)

12 
	~"Mi¸oOS.h
"

16 
	$AT24C256_Inô
()

18 
	`i2c_öô
–
I2C_200K
 );

19 
	}
}

23 
	$AT24C256_wrôïage
–
addr
, 
uöt8
 *
buff
, 
size
 )

26 
uöt8
 
pd
[18];

27 
ªt
 = 
	`MIN
–
size
, 16 );

29 if–(
ªt
 + (
addr
%256) ) > 256)

30 
ªt
 = 256-(
addr
%256);

32 
pd
[0] = 
addr
/256;

33 
pd
[1] = 
addr
%256;

35 
i
=0; i<
ªt
; i++)

36 
pd
[
i
+2] = *
buff
++;

38 if–
	`i2c_Wrôe
–
AT24_ID
, 
pd
, 
ªt
+2 ))

39  
ªt
;

42 
ªt
 = 
	`MIN
–
size
, 
BUFF_SIZE
 );

43 if–(
ªt
 + (
addr
%256) ) > 256)

44 
ªt
 = 256-(
addr
%256);

46 if–
	`i2c_WrôeExtW‹d
–
AT24_ID
, 
addr
, 
buff
, 
ªt
 ))

47  
ªt
;

50 
	}
}

56 
	#WRITE_BUFF_SIZE
 16

	)

57 
	$AT24C256_wrôïage
–
addr
, 
uöt8
 *
buff
, 
size
 )

59 
uöt8
 
pd
[18];

60 
ªt
 = 64 - (
addr
 % 64);

61 
ªt
 = 
	`MIN
(Ñet, 16 );

62 
ªt
 = 
	`MIN
–ªt, 
size
 );

64 
pd
[0] = 
addr
/256;

65 
pd
[1] = 
addr
%256;

67 
i
=0; i<
ªt
; i++)

68 
pd
[
i
+2] = *
buff
++;

70 if–
	`i2c_Wrôe
–
AT24_ID
, 
pd
, 
ªt
+2 ))

71  
ªt
;

73 
	}
}

77 
	$AT24C256_ªad∑ge
–
addr
, 
uöt8
 *
buff
,
Nbyã
)

79 
uöt8
 
a
[2];

80 
Nbyã
 = 
	`MIN
( Nbyte, 128 );

81 
a
[0] = 
addr
/256;

82 
a
[1] = 
addr
%256;

84 if–
	`i2c_Wrôe
–
AT24_ID
, 
a
, 2 ) )

86 if–
	`i2c_Ród
–
AT24_ID
, 
buff
, 
Nbyã
))

88  
Nbyã
;

92 
	}
}

96 
	$AT24C256_Wrôe
–
addr
, 
uöt8
 *
buff
, 
size
 )

98 
ªt
 = 0;

99 
time
 = 3;

100  
size
 )

102 
tmp
 = 
	`AT24C256_wrôïage
–
addr
, 
buff
, 
size
 );

103 if–
tmp
 )

106 
size
 -
tmp
;

107 
buff
 +
tmp
;

108 
addr
 +
tmp
;

109 
ªt
 +
tmp
;

110 
time
 = 3;

112 if–
time
 == 0 )

114 
	`OSTimeDly
–
HZ
/200 == 0? 1: HZ/200 );

115 
time
--;

117 if–
size
 == 0 ){

118 
	`¥_debug
("w %d\n", 
ªt
 );

120  
ªt
;

121 
	}
}

125 
	$AT24C256_Ród
–
addr
, 
uöt8
 *
buff
, 
size
 )

127 
ªt
 = 0;

128 
time
 = 3;

129  
size
 )

131 
tmp
 = 
	`AT24C256_ªad∑ge
–
addr
, 
buff
, 
size
 );

132 if–
tmp
 )

134 
size
 -
tmp
;

135 
buff
 +
tmp
;

136 
addr
 +
tmp
;

137 
ªt
 +
tmp
;

138 
time
 = 3;

141 if–
time
 == 0 )

144 
time
--;

146  
ªt
;

147 
	}
}

151 #i‡
deföed
–
EE_DEBUG
 )

152 
	~"pcomm™d.h
"

155 
uöt8
 
	gìbuff
[128];

157 
	$ì_ªad
(
addr
, 
size
)

159 
size
 = 
	`MIN
–size, –
ìbuff
 ));

160 if–
	`AT24C256_Ród
–
addr
, 
ìbuff
, 
size
) )

162  
i
=0; i<
size
; i++)

164 
	`¥ötk
("%02x ", 
ìbuff
[
i
] );

166 
	`¥ötk
("ªad 0x%04x\n", 
addr
);

168 
	}
}

170 
	$ì_wrôe
(
addr
, 
size
 )

172 
size
 = 
	`MIN
–size, –
ìbuff
 ));

173 
i
=0; i<
size
; i++)

175 
ìbuff
[
i
] = i;

177 if–
	`AT24C256_Wrôe
–
addr
, 
ìbuff
, 
size
) )

179 
	`¥ötk
("wrôê0x%04x\n", 
addr
);

181 
	}
}

183 
	$ì_cmd
(
¨gs
, **
¨gv
 )

185 
addr
 = 
	`©oi
–
¨gv
[2] );

186 if–!
	`°rcmp
–
¨gv
[1], "i" ) )

188 
	`AT24C256_Inô
();

189 }if–!
	`°rcmp
–
¨gv
[1], "r"))

191 
	`ì_ªad
–
addr
, –
ìbuff
 ));

192 }if–!
	`°rcmp
–
¨gv
[1], "w" ))

194 
	`ì_wrôe
–
addr
, –
ìbuff
));

197 
	}
}

198 
PSHELL_CMD
–
ì
, 
ì_cmd
, "ee [i|r|w]áddress" );

	@drive/at24c256.h

2 #i‚de‡
__AT24C256_H__


3 
	#__AT24C256_H__


	)

6 
AT24C256_Inô
();

7 
AT24C256_Wrôe
–
addr
, 
uöt8
 *
buff
, 
size
 );

8 
AT24C256_Ród
–
addr
, 
uöt8
 *
buff
, 
size
 );

11 
	#ì¥om_öô
 
AT24C256_Inô


	)

12 
	#ì¥om_wrôe
 
AT24C256_Wrôe


	)

13 
	#ì¥om_ªad
 
AT24C256_Ród


	)

	@drive/at24xx.c

2 
	~"myty≥.h
"

3 
	~"I2C.h
"

4 
	~"≠p_cfg.h
"

5 
	~"©24xx.h
"

7 
	#AT24_ID
 0xA0

	)

8 
	~"Mi¸oOS.h
"

11 
uöt16
 
	gAT_Addr
=0;

13 
	$AT24_Inô
()

15 
uöt8
 
i
;

16 
uöt8
 
buff
[2];

17 
uöt8
 
id
 = 
AT24_ID
;

18 
AT_Addr
 = 0;

19 
	`i2c_öô
–
I2C_200K
 );

20 
i
=0; i<8; i++)

22 if–!
	`i2c_RódExt
–
id
, 0, 
buff
, 1))

24 
id
 += 0x02;

25 
AT_Addr
 += 256;

27 
	`¥_debug
("© %d %d\n", 
i
, 
AT_Addr
);

28 
	}
}

30 
	#__size
–
addr
, 
˙t
 ) ((◊ddr+˙tË& (~(˙t-1))Ë-◊ddr))

	)

32 
	$©24_wrôïage
–
addr
, 
uöt8
 *
buff
, 
size
 )

34 
uöt8
 
id
 = (
addr
 >> 7Ë| 
AT24_ID
;

35 
ªt
 = 
	`__size
(
addr
, 16);

36 
ªt
 = 
	`MIN
–ªt, 
size
 );

38 if–
addr
 + 
ªt
 > 
AT_Addr
 )

41 if–
	`i2c_WrôeExt
–
id
, 
addr
 & 0xFF, 
buff
, 
ªt
 ))

43  
ªt
;

46 
	}
}

49 
	$AT24_ªad∑ge
–
addr
, 
uöt8
 *
buff
, 
size
 )

51 
ªt
 = 
size
>256? 256: size;

52 
uöt8
 
id
 = (
addr
 >> 7Ë| 
AT24_ID
;

53 if–(
ªt
 + (
addr
&0xFF) ) & 0x100)

54 
ªt
 = 0x100-(
addr
&0xFF);

55 if–
addr
 + 
ªt
 > 
AT_Addr
 )

58 if–
	`i2c_RódExt
–
id
, 
addr
&0xFF, 
buff
, 
ªt
) )

60  
ªt
;

63 
	}
}

65 
	$AT24_Ród
–
addr
, 
uöt8
 *
buff
, 
size
 )

67 
ªt
 = 0;

68 
time
 = 3;

69  
size
 )

71 
tmp
 = 
	`AT24_ªad∑ge
–
addr
, 
buff
, 
size
 );

72 if–
tmp
 )

74 
ªt
 +
tmp
;

75 
size
 -
tmp
;

76 
buff
 +
tmp
;

77 
addr
 +
tmp
;

78 
time
 = 3;

80 if–
time
 == 0 )

83 
time
--;

85  
ªt
;

86 
	}
}

88 
	$AT24_Wrôe
–
addr
, 
uöt8
 *
buff
, 
size
 )

90 
ªt
 = 0;

91 
time
 = 3;

92  
size
 )

94 
tmp
 = 
	`©24_wrôïage
–
addr
, 
buff
, 
size
 );

95 if–
tmp
 )

97 
	`¥_debug
("ì w %d\t%d\n", 
addr
, 
tmp
 );

98 
size
 -
tmp
;

99 
buff
 +
tmp
;

100 
addr
 +
tmp
;

101 
ªt
 +
tmp
;

102 
time
 = 3;

104 if–
time
 == 0 )

106 
	`OSTimeDly
–
HZ
/20 + 1);

107 
time
--;

109  
ªt
;

110 
	}
}

113 
	~"pcomm™d.h
"

114 
	$U£rCmd
(
¨gs
, **
¨gv
)

116 
uöt8
 
buff
[16];

117 
addr
 = 
	`©oi
–
¨gv
[2] );

118 
˙t
 = 
	`©oi
–
¨gv
[3] );

119 
d©
 = 
	`©oi
–
¨gv
[4] );

120 if(
¨gs
 > 1)

122 if–!
	`°rcmp
–
¨gv
[1], "r" ) )

124 
	`ì¥om_ªad
–
addr
, 
buff
, (buff));

125 
i
=0; i<(
buff
); i++)

127 
	`¥ötk
("%02x ", 
buff
[
i
] );

129 
	`¥ötk
("\n");

130 }if–!
	`°rcmp
–
¨gv
[1], "w") )

132 
d©
 = 
	`MIN
–d©, (
buff
));

133 
i
=0; i<
d©
; i++)

135 
buff
[
i
] = 
˙t
;

137 
	`ì¥om_wrôe
–
addr
, 
buff
, 
d©
 );

141 
	}
}

142 
PSHELL_CMD
(
©
, 
U£rCmd
, "at [r|w]áddr cnt data");

	@drive/at24xx.h

2 #i‚de‡
__AT24XX_h__


3 
	#__AT24XX_h__


	)

6 
AT24_Inô
();

7 
AT24_Ród
–
addr
, 
uöt8
 *
buff
, 
size
 );

8 
AT24_Wrôe
–
addr
, 
uöt8
 *
buff
, 
size
 );

10 
	#ì¥om_öô
 
AT24_Inô


	)

11 
	#ì¥om_wrôe
 
AT24_Wrôe


	)

12 
	#ì¥om_ªad
 
AT24_Ród


	)

	@drive/can.c

3 
	~"b•.h
"

4 
	~"ˇn.h
"

5 
	~"≠p_cfg.h
"

11 
	#_CMDREQ_BUSY
 (1UL << 15)

	)

14 
	#_CNTL_INIT
 (1UL << 0)

	)

15 
	#_CNTL_IE
 (1UL << 1)

	)

16 
	#_CNTL_SIE
 (1UL << 2)

	)

17 
	#_CNTL_EIE
 (1UL << 3)

	)

18 
	#_CNTL_DAR
 (1UL << 5)

	)

19 
	#_CNTL_CCE
 (1UL << 6)

	)

20 
	#_CNTL_TEST
 (1UL << 7)

	)

23 
	#_TEST_BASIC
 (1UL << 2)

	)

24 
	#_TEST_SILENT
 (1UL << 3)

	)

25 
	#_TEST_LBACK
 (1UL << 4)

	)

28 
	#_STAT_LEC
 (7UL << 0)

	)

29 
	#_STAT_TXOK
 (1UL << 3)

	)

30 
	#_STAT_RXOK
 (1UL << 4)

	)

31 
	#_STAT_EPASS
 (1UL << 5)

	)

32 
	#_STAT_EWARN
 (1UL << 6)

	)

33 
	#_STAT_BOFF
 (1UL << 7)

	)

36 
	#_CMDMASK_DATAB
 (1UL << 0)

	)

37 
	#_CMDMASK_DATAA
 (1UL << 1)

	)

38 
	#_CMDMASK_TREQ
 (1UL << 2)

	)

39 
	#_CMDMASK_INTPND
 (1UL << 3)

	)

40 
	#_CMDMASK_CTRL
 (1UL << 4)

	)

41 
	#_CMDMASK_ARB
 (1UL << 5)

	)

42 
	#_CMDMASK_MASK
 (1UL << 6)

	)

43 
	#_CMDMASK_WR
 (1UL << 7)

	)

44 
	#_CMDMASK_RD
 (0UL << 7)

	)

47 
	#_MSK1_MSK
 (0xFFFF)

	)

50 
	#_MSK2_MSK
 (0x1FFF)

	)

51 
	#_MSK2_MXTD
 (1UL << 15)

	)

52 
	#_MSK2_MDIR
 (1UL << 14)

	)

55 
	#_ARB1_ID
 (0xFFFF)

	)

58 
	#_ARB2_ID
 (0x1FFF)

	)

59 
	#_ARB2_DIR
 (1UL << 13)

	)

60 
	#_ARB2_XTD
 (1UL << 14)

	)

61 
	#_ARB2_MSGVAL
 (1UL << 15)

	)

64 
	#_MCTRL_DLC
 (0x0F)

	)

65 
	#_MCTRL_EOB
 (1UL << 7)

	)

66 
	#_MCTRL_TXRQST
 (1UL << 8)

	)

67 
	#_MCTRL_RMTEN
 (1UL << 9)

	)

68 
	#_MCTRL_RXIE
 (1UL << 10)

	)

69 
	#_MCTRL_TXIE
 (1UL << 11)

	)

70 
	#_MCTRL_UMASK
 (1UL << 12)

	)

71 
	#_MCTRL_INTPND
 (1UL << 13)

	)

72 
	#_MCTRL_MSGLST
 (1UL << 14)

	)

73 
	#_MCTRL_NEWDAT
 (1UL << 15)

	)

76 
	#SJW
 2

	)

78 
	#_MSG_OBJ_MAX
 0x0020

	)

80 
	#_STD_FORMAT
 0x000007FF

	)

81 
	#_EXT_FORMAT
 0x1FFFFFFF

	)

84 
	#CAN_TX_NUM
 5

	)

86 
	#LIST_BUF_SIZE
 16

	)

87 
	~"myli°.h
"

89 
LIST_TYPE_EXT
–
TCANli°
, 
CAN_msg
, 16 );

91 
TCANli°
 
	gˇnLi°_rx
;

94 
uöt32
 
	gˇn_baudøã
;

96 
CAN_msg
 
	gCAN_TxMsg
;

97 
CAN_msg
 
	gCAN_RxMsg
;

99 
	gCAN_TxRdy
 = 0;

105 
	$CAN_cfgBaudøã
 (
uöt32_t
 
baud
)

107 
uöt32_t
 
ªsu…
;

108 
uöt8_t
 
NT
, 
T1
, 
T2
;

109 
i
;

110 
uöt32_t
 
bΩ
;

112 
ªsu…
 = 
Sy°emC‹eClock
 / 
baud
;

118 
NT
=24; NT>3; NT=NT-2)

120 i‡((
ªsu…
%
NT
)==0)

122 
bΩ
 = 
ªsu…
 / 
NT
;

123 
T2
 = 
NT
/3;

124 
T2
--;

125 
T1
 = 
NT
-
T2
-3;

127 
i
=1; i<=16; i++ )

129 
uöt32_t
 
a
 = 
bΩ
/
i
;

130 if–(
bΩ
%
i
Ë=0 && 
a
 <= 64 )

132 
	`¥_debug
("div %d\tBRP %ld\n", 
i
, 
a
 );

133 
LPC_CAN
->
CLKDIV
 = 
i
-1;

134 
LPC_CAN
->
BRPE
 = 0;

135 
LPC_CAN
->
BT
 = (((
T2
)<<12Ë| ((
T1
)<<8)Ë| ((
SJW
-1)<<6Ë| (
a
-1) ;

141 
	`¥_debug
("ˇ¿£àbaudøã %ldÉº‹! së 500kBô/s\n", 
baud
);

142 
LPC_CAN
->
BT
 = 0x2301;

143 
LPC_CAN
->
BRPE
 = 0x0000;

144 
LPC_CAN
->
CLKDIV
 = (
Sy°emC‹eClock
 / 8000000UL) - 1;

146 
	}
}

149 
	$CAN_£tup
( )

151 
uöt32_t
 
i
;

152 
ªt
;

156 
LPC_SYSCON
->
PRESETCTRL
 |= (1UL << 3);

157 
LPC_SYSCON
->
SYSAHBCLKCTRL
 |= (1UL << 17);

159 
LPC_CAN
->
CNTL
 = 
_CNTL_INIT
;

160 
LPC_CAN
->
CNTL
 |
_CNTL_CCE
;

161 
ªt
=
	`CAN_cfgBaudøã
–
ˇn_baudøã
 );

162 
LPC_CAN
->
CNTL
 &~
_CNTL_CCE
;

164 
	`NVIC_E«bÀIRQ
(
CAN_IRQn
);

167  
i
 = 0; i < 
_MSG_OBJ_MAX
; i++ )

169 
LPC_CAN
->
IF1_CMDMSK
 = 
_CMDMASK_WR
 | 
_CMDMASK_MASK
 | 
_CMDMASK_ARB
 | 
_CMDMASK_CTRL
 |

170 
_CMDMASK_DATAA
 | 
_CMDMASK_DATAB
;

171 
LPC_CAN
->
IF1_MCTRL
 = 0;

173 
LPC_CAN
->
IF1_MSK1
 = 0;

174 
LPC_CAN
->
IF1_MSK2
 = 0;

176 
LPC_CAN
->
IF1_ARB1
 = 0;

177 
LPC_CAN
->
IF1_ARB2
 = 0;

179 
LPC_CAN
->
IF1_DA1
 = 0;

180 
LPC_CAN
->
IF1_DA2
 = 0;

181 
LPC_CAN
->
IF1_DB1
 = 0;

182 
LPC_CAN
->
IF1_DB2
 = 0;

184 
LPC_CAN
->
IF1_CMDREQ
 = 
i
+1;

185 
LPC_CAN
->
IF1_CMDREQ
 & 
_CMDREQ_BUSY
);

188 
LPC_CAN
->
STAT
 = 0;

189 
LPC_CAN
->
CNTL
 = (

191 
_CNTL_EIE
 |

193 
_CNTL_IE


196 
CAN_TxRdy
 = 1;

198 
	`CAN_wrFûãr
–0, 0, 
EXTENDED_FORMAT
);

199 
	`CAN_wrFûãr
–0, 0, 
EXTENDED_FORMAT
);

200  
ªt
;

201 
	}
}

203 
	$CAN_öô
–
uöt32
 
baud
 )

205 
ˇn_baudøã
 = 
baud
;

206  
	`CAN_£tup
();

207 
	}
}

209 
	$CAN_Inô
(
uöt32
 
addr
, uöt32 
baud
)

211 
	`LIST_BUF_RESET
–
ˇnLi°_rx
 );

212 
	`CAN_öô
–
baud
 );

213 
	}
}

218 
	$CAN_ã°mode
 () {

220 
LPC_CAN
->
CNTL
 |
_CNTL_TEST
;

221 
LPC_CAN
->
TEST
 = 
_TEST_LBACK
;

222 
	}
}

227 
	$CAN_°¨t
 () {

229 
LPC_CAN
->
CNTL
 &~
_CNTL_INIT
;

230 
	}
}

235 
	$CAN_waôRódy
 () {

237 
CAN_TxRdy
 = 1;

238 
	}
}

240 
	$CAN_GëEº
–
í
 )

242 
îrC¡
 = 0;

243 
uöt32_t
 
°©e
 = 
LPC_CAN
->
STAT
;

244 vﬁ©ûê
i
, 
time
 = 100;

246 if–
°©e
 & 
_STAT_BOFF
 )

248 
	`¥_debug
("îr‹:0x%08lx ", 
°©e
);

249 
îrC¡
++;

250 if–
îrC¡
 > 30 )

252 
îrC¡
 = 0;

253 
	`CAN_£tup
();

254 
CAN_TxRdy
 = 1;

255  
°©e
;

257  
time
-- )

259 
LPC_CAN
->
CNTL
 &~
_CNTL_INIT
;

260 
i
=0; i<10000;i++);

261 if(!–
LPC_CAN
->
STAT
 & 
_STAT_BOFF
 )) ;

263  
°©e
;

265 
îrC¡
 = 0;

267 
	}
}

269 
	$CAN_GëEºC¡
–
uöt8
 *
pRxC¡
, uöt8 *
pTxC¡
)

271 *
pRxC¡
 = (
LPC_CAN
->
EC
>>8) & 0x7F;

272 *
pTxC¡
 = (
LPC_CAN
->
EC
 )& 0xFF;

273 
	}
}

278 
	$CAN_wrMsg
 (
CAN_msg
 *
msg
)

280 
öt32_t
 
i
;

281 
uöt32_t
 
ˇn_msgObj
;

282 
uöt32_t
 
ˇn_msgv
;

284 
ˇn_msgv
 = (
LPC_CAN
->
MSGV2
 << 16Ë| LPC_CAN->
MSGV1
;

286 
i
 = 
_MSG_OBJ_MAX
 - 1; i > -1; i--) {

287 i‡((
ˇn_msgv
 & (1 << 
i
)) == 0)

290 i‡(
i
 > -1)

291 
ˇn_msgObj
 = 
i
 + 1;

293 
ˇn_msgObj
 = 0;

295 if–
msg
->
id
 & 
CAN_MSG_RTR
 )

297 
LPC_CAN
->
IF1_CMDMSK
 = 
_CMDMASK_WR
 | 
_CMDMASK_MASK
 | 
_CMDMASK_ARB
 | 
_CMDMASK_CTRL
 |

298 
_CMDMASK_DATAA
 | 
_CMDMASK_DATAB
;

299 
LPC_CAN
->
IF1_MCTRL
 = 
_MCTRL_UMASK
 | 
_MCTRL_RMTEN
 | 
_MCTRL_TXIE
 | 
_MCTRL_EOB
 | (
msg
->
Àn
 & 
_MCTRL_DLC
);

302 
LPC_CAN
->
IF1_CMDMSK
 = 
_CMDMASK_WR
 | 
_CMDMASK_ARB
 | 
_CMDMASK_CTRL
 |

303 
_CMDMASK_TREQ
 | 
_CMDMASK_DATAA
 | 
_CMDMASK_DATAB
;

304 
LPC_CAN
->
IF1_MCTRL
 = 
_MCTRL_TXRQST
 | 
_MCTRL_TXIE
 | 
_MCTRL_EOB
 | (
msg
->
Àn
 & 
_MCTRL_DLC
);

307 i‡–!–
msg
->
id
 & 
CAN_MSG_EXT
 ) ) {

308 
LPC_CAN
->
IF1_ARB1
 = 0;

309 
LPC_CAN
->
IF1_ARB2
 = ((
msg
->
id
 & 
_STD_FORMAT
Ë<< 2Ë| 
_ARB2_DIR
 | 
_ARB2_MSGVAL
;

312 
LPC_CAN
->
IF1_ARB1
 = ( 
msg
->
id
 & 
_ARB1_ID
);

313 
LPC_CAN
->
IF1_ARB2
 = ((
msg
->
id
 >> 16Ë& 
_ARB2_ID
Ë| 
_ARB2_XTD
 | 
_ARB2_DIR
 | 
_ARB2_MSGVAL
;

316 
LPC_CAN
->
IF1_DA1
 = 
msg
->
buff16
[0];

317 
LPC_CAN
->
IF1_DA2
 = 
msg
->
buff16
[1];

318 
LPC_CAN
->
IF1_DB1
 = 
msg
->
buff16
[2];

319 
LPC_CAN
->
IF1_DB2
 = 
msg
->
buff16
[3];

321 i‡(
msg
->
ty≥
 =
REMOTE_FRAME
) {

322 
LPC_CAN
->
IF1_CMDMSK
 &~(
_CMDMASK_DATAA
 | 
_CMDMASK_DATAB
);

323 
LPC_CAN
->
IF1_ARB2
 &~(
_ARB2_DIR
);

326 
LPC_CAN
->
IF1_CMDREQ
 = 
ˇn_msgObj
;

327 
LPC_CAN
->
IF1_CMDREQ
 & 
_CMDREQ_BUSY
);

329 
	}
}

334 
	$CAN_ISRmsg
 (
uöt32_t
 
ˇn_msgObj
)

336 
LPC_CAN
->
IF2_CMDREQ
 & 
_CMDREQ_BUSY
);

337 
LPC_CAN
->
IF2_CMDMSK
 = 
_CMDMASK_RD
 | 
_CMDMASK_MASK
 | 
_CMDMASK_ARB
 | 
_CMDMASK_CTRL
 |

338 
_CMDMASK_INTPND
 | 
_CMDMASK_TREQ
 | 
_CMDMASK_DATAA
 | 
_CMDMASK_DATAB
;

339 
LPC_CAN
->
IF2_CMDREQ
 = 
ˇn_msgObj
;

340 
LPC_CAN
->
IF2_CMDREQ
 & 
_CMDREQ_BUSY
);

343 i‡(
LPC_CAN
->
IF2_MCTRL
 & 
_MCTRL_TXIE
) {

344 
CAN_TxRdy
 = 1;

346 
LPC_CAN
->
IF2_CMDMSK
 = 
_CMDMASK_WR
 | 
_CMDMASK_MASK
 | 
_CMDMASK_ARB
 | 
_CMDMASK_CTRL
 |

347 
_CMDMASK_DATAA
 | 
_CMDMASK_DATAB
;

348 
LPC_CAN
->
IF2_MCTRL
 = 0x0000;

350 
LPC_CAN
->
IF2_MSK1
 = 0x0000;

351 
LPC_CAN
->
IF2_MSK2
 = 0x0000;

353 
LPC_CAN
->
IF2_ARB1
 = 0x0000;

354 
LPC_CAN
->
IF2_ARB2
 = 0x0000;

356 
LPC_CAN
->
IF2_DA1
 = 0x0000;

357 
LPC_CAN
->
IF2_DA2
 = 0x0000;

358 
LPC_CAN
->
IF2_DB1
 = 0x0000;

359 
LPC_CAN
->
IF2_DB2
 = 0x0000;

361 
LPC_CAN
->
IF2_CMDREQ
 = 
ˇn_msgObj
;

362  
LPC_CAN
->
IF2_CMDREQ
 & 
_CMDREQ_BUSY
 );

365 i‡(
LPC_CAN
->
IF2_ARB2
 & (1UL << 14)) {

366 
CAN_RxMsg
.
id
 = ((
LPC_CAN
->
IF2_ARB2
 & 
_ARB2_ID
Ë<< 16Ë| LPC_CAN->
IF2_ARB1
;

369 
CAN_RxMsg
.
id
 = (
LPC_CAN
->
IF2_ARB2
 >> 2Ë& 
_STD_FORMAT
;

372 
CAN_RxMsg
.
Àn
 = 
LPC_CAN
->
IF2_MCTRL
 & 
_MCTRL_DLC
;

373 
CAN_RxMsg
.
buff16
[0] = 
LPC_CAN
->
IF2_DA1
;

374 
CAN_RxMsg
.
buff16
[1] = 
LPC_CAN
->
IF2_DA2
;

375 
CAN_RxMsg
.
buff16
[2] = 
LPC_CAN
->
IF2_DB1
;

376 
CAN_RxMsg
.
buff16
[3] = 
LPC_CAN
->
IF2_DB2
;

378 if–!
	`LIST_BUF_FULL
–
ˇnLi°_rx
 ) )

380 
	`LIST_BUF_WR
–
ˇnLi°_rx
, 
CAN_RxMsg
);

383 
	}
}

388 
	$CAN_wrFûãr
 (
uöt32
 
id
, uöt32 
msk
, 
uöt8
 
f‹m©
) {

389 
öt32_t
 
i
;

390 
uöt32_t
 
ˇn_msgObj
;

391 
uöt32_t
 
ˇn_msgv
;

393 
ˇn_msgv
 = (
LPC_CAN
->
MSGV2
 << 16Ë| LPC_CAN->
MSGV1
;

395 
i
 = 0; i < 
_MSG_OBJ_MAX
; i++) {

396 i‡((
ˇn_msgv
 & (1 << 
i
)) == 0)

399 i‡(
i
 < 
_MSG_OBJ_MAX
)

400 
ˇn_msgObj
 = 
i
 + 1;

402 
ˇn_msgObj
 = 0;

404 
LPC_CAN
->
IF1_CMDMSK
 = 
_CMDMASK_WR
 | 
_CMDMASK_MASK
 | 
_CMDMASK_ARB
 | 
_CMDMASK_CTRL
;

405 
LPC_CAN
->
IF1_MCTRL
 = 
_MCTRL_UMASK
 | 
_MCTRL_RXIE
 | 
_MCTRL_EOB
 | 
_MCTRL_DLC
;

407 i‡(
f‹m©
 =
STANDARD_FORMAT
) {

408 
id
 = id & 
_STD_FORMAT
;

410 
LPC_CAN
->
IF1_MSK1
 = 0;

411 
LPC_CAN
->
IF1_MSK2
 = (
msk
 << 2);

413 
LPC_CAN
->
IF1_ARB1
 = 0;

414 
LPC_CAN
->
IF1_ARB2
 = (
id
 << 2Ë| 
_ARB2_MSGVAL
;

417 
id
 = id & 
_EXT_FORMAT
;

419 
LPC_CAN
->
IF1_MSK1
 = (
msk
 & 
_MSK1_MSK
);

420 
LPC_CAN
->
IF1_MSK2
 = (
msk
 >> 16Ë| 
_MSK2_MXTD
;

422 
LPC_CAN
->
IF1_ARB1
 = (
id
 & 
_ARB1_ID
);

423 
LPC_CAN
->
IF1_ARB2
 = (
id
 >> 16Ë| 
_ARB2_XTD
 | 
_ARB2_MSGVAL
;

426 
LPC_CAN
->
IF1_CMDREQ
 = 
ˇn_msgObj
;

427 
LPC_CAN
->
IF1_CMDREQ
 & 
_CMDREQ_BUSY
);

428 
	}
}

430 
CAN_IRQH™dÀr
();

431 
	$CAN_IRQH™dÀr
()

433 vﬁ©ûê
uöt32_t
 
ˇn_öt
, 
ˇn_°©
;

434 
uöt32_t
 
ˇn_msgObj
;

436 
ˇn_öt
 = 
LPC_CAN
->
INT
;

437 
ˇn_öt
) {

442 
ˇn_°©
 = 
LPC_CAN
->
STAT
;

444 i‡(
ˇn_°©
 & 
_STAT_TXOK
) {

445 
LPC_CAN
->
STAT
 &~
_STAT_TXOK
;

447 i‡(
ˇn_°©
 & 
_STAT_RXOK
) {

448 
LPC_CAN
->
STAT
 &~
_STAT_RXOK
;

452 
ˇn_msgObj
 = 
ˇn_öt
 & 0x7FFF;

453 i‡((
ˇn_msgObj
 >= 1) && (can_msgObj <= 32) )

455 
	`CAN_ISRmsg
 (
ˇn_msgObj
);

459 
	}
}

465 
	$CAN_rdMSG
(
CAN_msg
 *
pMsg
)

467 if–
	`LIST_BUF_COUNT
–
ˇnLi°_rx
 ) )

469 
	`LIST_BUF_RD
–
ˇnLi°_rx
 , *
pMsg
);

470  
TRUE
;

472  
FALSE
;

473 
	}
}

475 
	$CAN_wrMSG
–
CAN_msg
 *
pMsg
 )

477 if–
CAN_TxRdy
 =0 || 
pMsg
 =
NULL
 )

478  
FALSE
;

479 
CAN_TxRdy
 = 0;

480 
	`CAN_wrMsg
–
pMsg
 );

481  
TRUE
;

482 
	}
}

	@drive/can.h

3 #i‚de‡
__CAN_H__


4 
	#__CAN_H__


	)

7 
	#CAN_BAUDRATE
 
BPS_20K


	)

9 
	#STANDARD_FORMAT
 0

	)

10 
	#EXTENDED_FORMAT
 1

	)

12 
	#DATA_FRAME
 0

	)

13 
	#REMOTE_FRAME
 1

	)

15 
	#CAN_MSG_STD
 0x00000000UL

	)

16 
	#CAN_MSG_EXT
 0x20000000UL

	)

17 
	#CAN_MSG_DAT
 0x00000000UL

	)

18 
	#CAN_MSG_RTR
 0x40000000UL

	)

20 
	#__ID
–
°©e
, 
cmd
, 
â
, 
tk
 ) (((
uöt32
)(°©e)<<27Ë| ((uöt32)(cmdË<<19 ) | ((uöt32)—t)<<11 ) | (—k)Ë| 
CAN_MSG_EXT
)

	)

21 
	#__DATA
–
vÆue
, 
ty≥
 ) (((
uöt16
)(vÆueË& 0x1FFFË| ((uöt16)—y≥Ë<<13))

	)

23 
	#CAN_TYPE_NORMAL
 0

	)

24 
	#CAN_TYPE_S
 1

	)

25 
	#CAN_TYPE_I
 2

	)

26 
	#CAN_TYPE_W
 3

	)

27 
	#CAN_TYPE_MS
 4

	)

28 
	#CAN_TYPE_MW
 5

	)

30 
	#CAN_ID_NORMAL
 0

	)

31 
	#CAN_ID_DATA
 1

	)

34 
	~"rom_≠i.h
"

35 
CAN_MSG_OBJ
 
	tCAN_msg
;

40 
	s_CAN_OBJ
 {

42 
uöt32
 
	mmode_id
;

43 
uöt32
 
	mid
;

45 
uöt32
 
	mIDTK
 :11;

46 
uöt32
 
	mIDTT
 :8;

47 
uöt32
 
	mIDcmd
 :8;

48 
uöt32
 
	mID°©e
 :2;

52 
uöt32
 
	mIDty≥
 : 5;

53 
uöt32
 
	mIDRaddr
 : 8;

54 
uöt32
 
	mIDSaddr
 : 8;

55 
uöt32
 
	mIDmod
 : 8;

56 
uöt32
 
	mIDnc
 : 3;

62 
	s__PACKED__


64 
uöt8
 
	mDJsign
;

65 
uöt8
 
	mDJlo›
;

66 
uöt8
 
	mDJaddr
;

67 
uöt8
 
	mDJty≥
;

68 
uöt8
 
	mDJncBuff
[4];

70 
	s__PACKED__


72 
uöt32
 
	mD©aA
;

73 
uöt32
 
	mD©aB
;

75 
	s__PACKED__


77 
uöt8
 
	msign
;

78 
uöt8
 
	mVö
;

79 
uöt8
 
	mVout
;

80 
uöt8
 
	mIout
;

82 
uöt8
 
	mVbt
;

83 
uöt8
 
	mVbt1
;

84 
uöt8
 
	mEPS°©e
;

85 
uöt8
 
	mEPSgz
;

87 
uöt16
 
	mbuff16
[4];

88 
uöt8
 
	mbuff
[8];

92 
uöt8
 
	mdlc
;

93 
uöt8
 
	mÀn
;

94 
uöt8
 
	m˙t
;

96 
uöt8
 
	mty≥
;

97 }
	tCAN_OBJ
;

98 
CAN_OBJ
 
	tCAN_msg
;

101 
CAN_Inô
(
uöt32
 
addr
, uöt32 
baudøã
);

103 
CAN_öô
–
uöt32
 
baudøã
);

108 
CAN_rdMSG
–
CAN_msg
 *
buff
 );

109 
CAN_wrMSG
–
CAN_msg
 *
pMsg
 );

110 
CAN_CÀ™
( );

111 
CAN_GëEº
–
í
 );

113 
CAN_wrMsg
 (
CAN_msg
 *
msg
);

115 
CAN_°¨t
 ();

116 
CAN_waôRódy
 ();

117 
CAN_°Msg
 (
CAN_msg
 *
msg
);

118 
CAN_wrFûãr
 (
uöt32
 
id
, uöt32 
msk
, 
uöt8
 
fûãr_ty≥
);

120 
CAN_ã°mode
 ();

121 
CAN_GëEºC¡
–
uöt8
 *
pRxC¡
, uöt8 *
pTxC¡
);

	@drive/can_api.c

3 
	#CAN_API_GLOBAL


	)

4 
	~"myty≥.h
"

5 
	~"rom_≠i.h
"

6 
	~"b•.h
"

7 
	~"≠p_cfg.h
"

8 
	~"mi¸oOS.h
"

9 
	~"ˇn.h
"

12 
	#CAN_TX_NUM
 5

	)

14 
	#LIST_BUF_SIZE
 16

	)

15 
	~"myli°.h
"

17 
LIST_TYPE_EXT
–
TCANli°
, 
CAN_MSG_OBJ
, 16 );

19 
TCANli°
 
	gˇnLi°_rx
;

21 
uöt32
 
	gCANID
;

22 
uöt32
 
	g£ndEn
;

23 
uöt32
 
	gCANEºC¡
;

24 
uöt32
 
	gCANEº
;

26 
	#CAN_BAUD
 5000

	)

28 
	#SET_CFG
 1

	)

31 #i‡
CAN_BAUD
 == 5000

38 
	#TSEG2
 8

	)

39 
	#TSEG1
 15

	)

40 
	#BRP
 50

	)

41 
	#SJW
 1

	)

42 
	#CLKDIV
 7

	)

44 #ñi‡
CAN_BAUD
 == 20000

51 
	#TSEG2
 8

	)

52 
	#TSEG1
 15

	)

53 
	#BRP
 50

	)

54 
	#SJW
 1

	)

55 
	#CLKDIV
 1

	)

63 
	#TSEG2
 4

	)

64 
	#TSEG1
 7

	)

65 
	#BRP
 50

	)

66 
	#SJW
 1

	)

67 
	#CLKDIV
 2

	)

71 #i‡(
TSEG2
 > 8Ë|| (
TSEG1
 > 16Ë|| (
BRP
 > 64Ë|| (
SJW
 > 4)

75 
uöt32
 
	gC™ClkInô
[2] = {

76 
CLKDIV
,

77 ((
TSEG2
-1)<<12Ë| ((
TSEG1
-1)<<8Ë| ((
SJW
-1)<<6Ë| (
BRP
-1)

84 
CAN_rx
(
uöt8
 
msg_obj_num
);

85 
CAN_tx
(
uöt8
 
msg_obj_num
);

86 
CAN_îr‹
(
uöt32
 
îr‹_öfo
);

92 c⁄° 
CAN_CALLBACKS
 
	gˇŒbacks
 = {

93 
CAN_rx
,

94 
CAN_tx
,

95 
CAN_îr‹


108 
CAN_IRQH™dÀr
();

109 
	$CAN_IRQH™dÀr
()

111 
PROM
->
pCANAPI
->
	`i§
();

112 
	}
}

121 
	$CAN_rx
(
uöt8
 
msg_obj_num
)

123 
CAN_MSG_OBJ
 
msg_obj
;

124 
msg_obj
.
msgobj
 = 
msg_obj_num
;

125 
PROM
->
pCANAPI
->
	`ˇn_ª˚ive
(&
msg_obj
);

127 if–!
	`LIST_BUF_FULL
–
ˇnLi°_rx
 ) )

129 
	`LIST_BUF_WR
–
ˇnLi°_rx
, 
msg_obj
);

131 
	}
}

140 
	$CAN_tx
(
uöt8
 
msg_obj_num
)

143 if–
msg_obj_num
 =
CAN_TX_NUM
 )

145 
£ndEn
 = 1;

147 
	}
}

158 #i‡
SET_CFG
 > 0

159 
	$ˇn_SëBaudøã
 ( 
uöt32_t
 
baudøã
)

161 
uöt32
 
ªsu…
;

162 
uöt8
 
NT
, 
T1
, 
T2
;

163 
i
;

164 
uöt32
 
bΩ
;

166 
ªsu…
 = 
FPCLK
 / 
baudøã
;

173 
NT
=24; NT>3; NT=NT-2)

175 i‡((
ªsu…
%
NT
)==0)

177 
bΩ
 = 
ªsu…
 / 
NT
;

178 
T2
 = 
NT
/3;

179 
T2
--;

180 
T1
 = 
NT
-
T2
-3;

181 
i
=1; i<=16; i++ )

183 
uöt32
 
a
 = 
bΩ
/
i
;

184 if–(
bΩ
%
i
Ë=0 && 
a
 <= 64 )

186 
	`¥_debug
("T1 %d\tT2 %d\tNT %d\tBRP %d\n", 
T1
, 
T2
, 
NT
, 
bΩ
 );

187 
	`¥_debug
("div %d\tBRP %d\n", 
i
, 
a
 );

188 
C™ClkInô
[0] = 
i
-1;

189 
C™ClkInô
[1] = (((
T2
)<<12Ë| ((
T1
)<<8)Ë| ((
SJW
-1)<<6Ë| (
a
-1) ;

195 
	`¥_debug
("can set baudrateÉrror\n");

196 
	}
}

199 
	$CAN_ª£t
()

201 
CAN_MSG_OBJ
 
msg_obj
;

202 
OS_SREG_VAR
;

203 
	`OS_ENTER_CRITICAL
();

205 
PROM
->
pCANAPI
->
	`öô_ˇn
–
C™ClkInô
);

206 
PROM
->
pCANAPI
->
	`c⁄fig_ˇlb
–&
ˇŒbacks
);

208 
msg_obj
.
mode_id
 = 0 | 
CAN_MSGOBJ_EXT
;

209 
msg_obj
.
mask
 = 0;

210 
msg_obj
.
msgobj
 = 1;

211 
PROM
->
pCANAPI
->
	`c⁄fig_rxmsgobj
(&
msg_obj
);

213 
msg_obj
.
mode_id
 = 0 ;

214 
msg_obj
.
mask
 = 0;

215 
msg_obj
.
msgobj
 = 2;

216 
PROM
->
pCANAPI
->
	`c⁄fig_rxmsgobj
(&
msg_obj
);

218 
msg_obj
.
mode_id
 = 
CANID
 ;

219 
msg_obj
.
mask
 = 0x7FF;

220 
msg_obj
.
msgobj
 = 3;

221 
PROM
->
pCANAPI
->
	`c⁄fig_rxmsgobj
(&
msg_obj
);

224 
£ndEn
 = 1;

225 
CANEº
 = 0;

226 
CANEºC¡
 = 0;

228 
	`OS_EXIT_CRITICAL
();

229 
	`¥_debug
("CANÑeset\n");

230 
	}
}

232 
	$CAN_îr‹
–
uöt32
 
îr‹_öfo
 )

234 
CANEº
 |
îr‹_öfo
;

235 
	`DEBUG2
("ˇ¿î∏0x%08x\n", 
CANEº
);

237 
	}
}

239 
	$CAN_Inô
(
uöt32
 
addr
, uöt32 
baudøã
)

241 #i‡
SET_CFG
 > 0

242 
	`ˇn_SëBaudøã
–
baudøã
 );

245 
	`LIST_BUF_RESET
–
ˇnLi°_rx
 );

246 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_CAN
 );

248 
CANID
 = 
addr
;

249 
	`CAN_ª£t
();

252 
	`NVIC_E«bÀIRQ
(
CAN_IRQn
);

254 
	`¥_debug
("ˇ¿öô %d\n", 
baudøã
);

255 
	}
}

264 
	$CAN_rdMSG
(
CAN_msg
 *
pMsg
)

266 if–
	`LIST_BUF_COUNT
–
ˇnLi°_rx
 ) )

268 
	`LIST_BUF_RD
–
ˇnLi°_rx
 , *
pMsg
);

269  
TRUE
;

271  
FALSE
;

272 
	}
}

275 
	$CAN_CÀ™
( )

277 
CANEºC¡
 = 0;

278 
	}
}

280 
	$CAN_GëEº
–
í
 )

282 
uöt32
 
ªt
;

283 
ªt
 = 
CANEº
;

284 if–
ªt
 & 
CAN_ERROR_BOFF
 || 
í
 )

286 
CANEºC¡
 = 0;

287 
	`¥_debug
("îr‹:0x%08x ", 
ªt
);

288 
	`CAN_ª£t
();

290  
ªt
;

291 
	}
}

293 
	$CAN_wrMSG
–
CAN_msg
 *
pMsg
 )

295 
OS_SREG_VAR
;

296 if–
£ndEn
 =0 || 
pMsg
 =
NULL
 )

297  
FALSE
;

298 
£ndEn
 = 0;

299 
pMsg
->
mask
 = 0;

300 
pMsg
->
msgobj
 = 
CAN_TX_NUM
;

301 
	`OS_ENTER_CRITICAL
();

302 
PROM
->
pCANAPI
->
	`ˇn_å™smô
(
pMsg
);

303 
	`OS_EXIT_CRITICAL
();

304  
TRUE
;

305 
	}
}

	@drive/can_reg_cfg.h

19 #i‚de‡
__HW_CAN_H


20 
	#__HW_CAN_H


	)

27 
	#CNTL
 0x00000000

28 
	#STAT
 0x00000004

29 
	#EC
 0x00000008

30 
	#BT
 0x0000000C

31 
	#INT
 0x00000010

32 
	#TEST
 0x00000014

33 
	#BRPE
 0x00000018

34 
	#IF1_CMDREQ
 0x00000020

35 
	#IF1_CMDMSK
 0x00000024

36 
	#IF1_MSK1
 0x00000028

37 
	#IF1_MSK2
 0x0000002C

38 
	#IF1_ARB1
 0x00000030

39 
	#IF1_ARB2
 0x00000034

40 
	#IF1_MCTRL
 0x00000038

41 
	#IF1_DA1
 0x0000003C

42 
	#IF1_DA2
 0x00000040

43 
	#IF1_DB1
 0x00000044

44 
	#IF1_DB2
 0x00000048

45 
	#IF2_CMDREQ
 0x00000080

46 
	#IF2_CMDMSK
 0x00000084

47 
	#IF2_MSK1
 0x00000088

48 
	#IF2_MSK2
 0x0000008C

49 
	#IF2_ARB1
 0x00000090

50 
	#IF2_ARB2
 0x00000094

51 
	#IF2_MCTRL
 0x00000098

52 
	#IF2_DA1
 0x0000009C

53 
	#IF2_DA2
 0x000000A0

54 
	#IF2_DB1
 0x000000A4

55 
	#IF2_DB2
 0x000000A8

56 
	#TXREQ1
 0x00000100

57 
	#TXREQ2
 0x00000104

58 
	#ND1
 0x00000120

59 
	#ND2
 0x00000124

60 
	#IR1
 0x00000140

61 
	#IR2
 0x00000144

62 
	#MSGV1
 0x00000160

63 
	#MSGV2
 0x00000164

64 

	)

71 
	#CAN_CTL_TEST
 0x00000080

72 
	#CAN_CTL_CCE
 0x00000040

73 
	#CAN_CTL_DAR
 0x00000020

74 
	#CAN_CTL_EIE
 0x00000008

75 
	#CAN_CTL_SIE
 0x00000004

76 
	#CAN_CTL_IE
 0x00000002

77 
	#CAN_CTL_INIT
 0x00000001

78 

	)

84 
	#CAN_STS_BOFF
 0x00000080

85 
	#CAN_STS_EWARN
 0x00000040

86 
	#CAN_STS_EPASS
 0x00000020

87 
	#CAN_STS_RXOK
 0x00000010

88 
	#CAN_STS_TXOK
 0x00000008

89 
	#CAN_STS_LEC_M
 0x00000007

90 
	#CAN_STS_LEC_NONE
 0x00000000

91 
	#CAN_STS_LEC_STUFF
 0x00000001

92 
	#CAN_STS_LEC_FORM
 0x00000002

93 
	#CAN_STS_LEC_ACK
 0x00000003

94 
	#CAN_STS_LEC_BIT1
 0x00000004

95 
	#CAN_STS_LEC_BIT0
 0x00000005

96 
	#CAN_STS_LEC_CRC
 0x00000006

97 
	#CAN_STS_LEC_NOEVENT
 0x00000007

98 

	)

104 
	#CAN_ERR_RP
 0x00008000

105 
	#CAN_ERR_REC_M
 0x00007F00

106 
	#CAN_ERR_TEC_M
 0x000000FF

107 
	#CAN_ERR_REC_S
 8

108 
	#CAN_ERR_TEC_S
 0

109 

	)

115 
	#CAN_BIT_TSEG2_M
 0x00007000

116 
	#CAN_BIT_TSEG1_M
 0x00000F00

118 
	#CAN_BIT_SJW_M
 0x000000C0

119 
	#CAN_BIT_BRP_M
 0x0000003F

120 
	#CAN_BIT_TSEG2_S
 12

	)

121 
	#CAN_BIT_TSEG1_S
 8

	)

122 
	#CAN_BIT_SJW_S
 6

	)

123 
	#CAN_BIT_BRP_S
 0

	)

130 
	#CAN_INT_INTID_M
 0x0000FFFF

131 
	#CAN_INT_INTID_NONE
 0x00000000

132 
	#CAN_INT_INTID_STATUS
 0x00008000

133 

	)

139 
	#CAN_TST_RX
 0x00000080

140 
	#CAN_TST_TX_M
 0x00000060

141 
	#CAN_TST_TX_CANCTL
 0x00000000

142 
	#CAN_TST_TX_SAMPLE
 0x00000020

143 
	#CAN_TST_TX_DOMINANT
 0x00000040

144 
	#CAN_TST_TX_RECESSIVE
 0x00000060

145 
	#CAN_TST_LBACK
 0x00000010

146 
	#CAN_TST_SILENT
 0x00000008

147 
	#CAN_TST_BASIC
 0x00000004

148 

	)

154 
	#CAN_BRPE_BRPE_M
 0x0000000F

155 
	#CAN_BRPE_BRPE_S
 0

	)

162 
	#CAN_TXRQ1_TXRQST_M
 0x0000FFFF

163 
	#CAN_TXRQ1_TXRQST_S
 0

	)

170 
	#CAN_TXRQ2_TXRQST_M
 0x0000FFFF

171 
	#CAN_TXRQ2_TXRQST_S
 0

	)

178 
	#CAN_NWDA1_NEWDAT_M
 0x0000FFFF

179 
	#CAN_NWDA1_NEWDAT_S
 0

	)

186 
	#CAN_NWDA2_NEWDAT_M
 0x0000FFFF

187 
	#CAN_NWDA2_NEWDAT_S
 0

	)

194 
	#CAN_IF1CRQ_BUSY
 0x00008000

195 
	#CAN_IF1CRQ_MNUM_M
 0x0000003F

196 
	#CAN_IF1CRQ_MNUM_RSVD
 0x00000000

199 

	)

205 
	#CAN_IF1CMSK_WRNRD
 0x00000080

206 
	#CAN_IF1CMSK_MASK
 0x00000040

207 
	#CAN_IF1CMSK_ARB
 0x00000020

208 
	#CAN_IF1CMSK_CONTROL
 0x00000010

209 
	#CAN_IF1CMSK_CLRINTPND
 0x00000008

210 
	#CAN_IF1CMSK_NEWDAT
 0x00000004

211 
	#CAN_IF1CMSK_TXRQST
 0x00000004

212 
	#CAN_IF1CMSK_DATAA
 0x00000002

213 
	#CAN_IF1CMSK_DATAB
 0x00000001

214 

	)

220 
	#CAN_IF1MSK1_IDMSK_M
 0x0000FFFF

221 
	#CAN_IF1MSK1_IDMSK_S
 0

	)

228 
	#CAN_IF1MSK2_MXTD
 0x00008000

229 
	#CAN_IF1MSK2_MDIR
 0x00004000

230 
	#CAN_IF1MSK2_IDMSK_M
 0x00001FFF

231 
	#CAN_IF1MSK2_IDMSK_S
 0

	)

238 
	#CAN_IF1ARB1_ID_M
 0x0000FFFF

239 
	#CAN_IF1ARB1_ID_S
 0

	)

246 
	#CAN_IF1ARB2_MSGVAL
 0x00008000

247 
	#CAN_IF1ARB2_XTD
 0x00004000

248 
	#CAN_IF1ARB2_DIR
 0x00002000

249 
	#CAN_IF1ARB2_ID_M
 0x00001FFF

250 
	#CAN_IF1ARB2_ID_S
 0

	)

257 
	#CAN_IF1MCTL_NEWDAT
 0x00008000

258 
	#CAN_IF1MCTL_MSGLST
 0x00004000

259 
	#CAN_IF1MCTL_INTPND
 0x00002000

260 
	#CAN_IF1MCTL_UMASK
 0x00001000

261 
	#CAN_IF1MCTL_TXIE
 0x00000800

262 
	#CAN_IF1MCTL_RXIE
 0x00000400

263 
	#CAN_IF1MCTL_RMTEN
 0x00000200

264 
	#CAN_IF1MCTL_TXRQST
 0x00000100

265 
	#CAN_IF1MCTL_EOB
 0x00000080

266 
	#CAN_IF1MCTL_DLC_M
 0x0000000F

267 
	#CAN_IF1MCTL_DLC_S
 0

	)

274 
	#CAN_IF1DA1_DATA_M
 0x0000FFFF

275 
	#CAN_IF1DA1_DATA_S
 0

	)

282 
	#CAN_IF1DA2_DATA_M
 0x0000FFFF

283 
	#CAN_IF1DA2_DATA_S
 0

	)

290 
	#CAN_IF1DB1_DATA_M
 0x0000FFFF

291 
	#CAN_IF1DB1_DATA_S
 0

	)

298 
	#CAN_IF1DB2_DATA_M
 0x0000FFFF

299 
	#CAN_IF1DB2_DATA_S
 0

	)

306 
	#CAN_IF2CRQ_BUSY
 0x00008000

307 
	#CAN_IF2CRQ_MNUM_M
 0x0000003F

308 
	#CAN_IF2CRQ_MNUM_RSVD
 0x00000000

311 

	)

317 
	#CAN_IF2CMSK_WRNRD
 0x00000080

318 
	#CAN_IF2CMSK_MASK
 0x00000040

319 
	#CAN_IF2CMSK_ARB
 0x00000020

320 
	#CAN_IF2CMSK_CONTROL
 0x00000010

321 
	#CAN_IF2CMSK_CLRINTPND
 0x00000008

322 
	#CAN_IF2CMSK_NEWDAT
 0x00000004

323 
	#CAN_IF2CMSK_TXRQST
 0x00000004

324 
	#CAN_IF2CMSK_DATAA
 0x00000002

325 
	#CAN_IF2CMSK_DATAB
 0x00000001

326 

	)

332 
	#CAN_IF2MSK1_IDMSK_M
 0x0000FFFF

333 
	#CAN_IF2MSK1_IDMSK_S
 0

	)

340 
	#CAN_IF2MSK2_MXTD
 0x00008000

341 
	#CAN_IF2MSK2_MDIR
 0x00004000

342 
	#CAN_IF2MSK2_IDMSK_M
 0x00001FFF

343 
	#CAN_IF2MSK2_IDMSK_S
 0

	)

350 
	#CAN_IF2ARB1_ID_M
 0x0000FFFF

351 
	#CAN_IF2ARB1_ID_S
 0

	)

358 
	#CAN_IF2ARB2_MSGVAL
 0x00008000

359 
	#CAN_IF2ARB2_XTD
 0x00004000

360 
	#CAN_IF2ARB2_DIR
 0x00002000

361 
	#CAN_IF2ARB2_ID_M
 0x00001FFF

362 
	#CAN_IF2ARB2_ID_S
 0

	)

369 
	#CAN_IF2MCTL_NEWDAT
 0x00008000

370 
	#CAN_IF2MCTL_MSGLST
 0x00004000

371 
	#CAN_IF2MCTL_INTPND
 0x00002000

372 
	#CAN_IF2MCTL_UMASK
 0x00001000

373 
	#CAN_IF2MCTL_TXIE
 0x00000800

374 
	#CAN_IF2MCTL_RXIE
 0x00000400

375 
	#CAN_IF2MCTL_RMTEN
 0x00000200

376 
	#CAN_IF2MCTL_TXRQST
 0x00000100

377 
	#CAN_IF2MCTL_EOB
 0x00000080

378 
	#CAN_IF2MCTL_DLC_M
 0x0000000F

379 
	#CAN_IF2MCTL_DLC_S
 0

	)

386 
	#CAN_IF2DA1_DATA_M
 0x0000FFFF

387 
	#CAN_IF2DA1_DATA_S
 0

	)

394 
	#CAN_IF2DA2_DATA_M
 0x0000FFFF

395 
	#CAN_IF2DA2_DATA_S
 0

	)

402 
	#CAN_IF2DB1_DATA_M
 0x0000FFFF

403 
	#CAN_IF2DB1_DATA_S
 0

	)

410 
	#CAN_IF2DB2_DATA_M
 0x0000FFFF

411 
	#CAN_IF2DB2_DATA_S
 0

	)

418 
	#CAN_MSG1INT_INTPND_M
 0x0000FFFF

419 
	#CAN_MSG1INT_INTPND_S
 0

	)

426 
	#CAN_MSG2INT_INTPND_M
 0x0000FFFF

427 
	#CAN_MSG2INT_INTPND_S
 0

	)

434 
	#CAN_MSG1VAL_MSGVAL_M
 0x0000FFFF

435 
	#CAN_MSG1VAL_MSGVAL_S
 0

	)

442 
	#CAN_MSG2VAL_MSGVAL_M
 0x0000FFFF

443 
	#CAN_MSG2VAL_MSGVAL_S
 0

	)

450 #i‚de‡
DEPRECATED


457 
	#CAN_O_MSGINT1
 0x00000140

458 
	#CAN_O_MSGINT2
 0x00000144

459 
	#CAN_O_MSGVAL1
 0x00000160

460 
	#CAN_O_MSGVAL2
 0x00000164

461 

	)

468 
	#CAN_RV_IF1MSK2
 0x0000FFFF

	)

469 
	#CAN_RV_IF1MSK1
 0x0000FFFF

	)

470 
	#CAN_RV_IF2MSK1
 0x0000FFFF

	)

471 
	#CAN_RV_IF2MSK2
 0x0000FFFF

	)

472 
	#CAN_RV_BIT
 0x00002301

	)

473 
	#CAN_RV_CTL
 0x00000001

	)

474 
	#CAN_RV_IF1CRQ
 0x00000001

	)

475 
	#CAN_RV_IF2CRQ
 0x00000001

	)

476 
	#CAN_RV_TXRQ2
 0x00000000

	)

477 
	#CAN_RV_IF2DB1
 0x00000000

	)

478 
	#CAN_RV_INT
 0x00000000

	)

479 
	#CAN_RV_IF1DB2
 0x00000000

	)

480 
	#CAN_RV_BRPE
 0x00000000

	)

481 
	#CAN_RV_IF2DA2
 0x00000000

	)

482 
	#CAN_RV_MSGVAL2
 0x00000000

	)

483 
	#CAN_RV_TXRQ1
 0x00000000

	)

484 
	#CAN_RV_IF1MCTL
 0x00000000

	)

485 
	#CAN_RV_IF1DB1
 0x00000000

	)

486 
	#CAN_RV_STS
 0x00000000

	)

487 
	#CAN_RV_MSGINT1
 0x00000000

	)

488 
	#CAN_RV_IF1DA2
 0x00000000

	)

489 
	#CAN_RV_TST
 0x00000000

	)

490 
	#CAN_RV_IF1ARB1
 0x00000000

	)

491 
	#CAN_RV_IF1ARB2
 0x00000000

	)

492 
	#CAN_RV_NWDA2
 0x00000000

	)

493 
	#CAN_RV_IF2CMSK
 0x00000000

	)

494 
	#CAN_RV_NWDA1
 0x00000000

	)

495 
	#CAN_RV_IF1DA1
 0x00000000

	)

496 
	#CAN_RV_IF2DA1
 0x00000000

	)

497 
	#CAN_RV_IF2MCTL
 0x00000000

	)

498 
	#CAN_RV_MSGVAL1
 0x00000000

	)

499 
	#CAN_RV_IF1CMSK
 0x00000000

	)

500 
	#CAN_RV_ERR
 0x00000000

	)

501 
	#CAN_RV_IF2ARB2
 0x00000000

	)

502 
	#CAN_RV_MSGINT2
 0x00000000

	)

503 
	#CAN_RV_IF2ARB1
 0x00000000

	)

504 
	#CAN_RV_IF2DB2
 0x00000000

	)

512 
	#CAN_STS_LEC_MSK
 0x00000007

513 

	)

520 
	#CAN_ERR_REC_MASK
 0x00007F00

521 
	#CAN_ERR_TEC_MASK
 0x000000FF

522 
	#CAN_ERR_REC_SHIFT
 8

523 
	#CAN_ERR_TEC_SHIFT
 0

524 

	)

531 
	#CAN_BIT_TSEG2
 0x00007000

532 
	#CAN_BIT_TSEG1
 0x00000F00

533 
	#CAN_BIT_SJW
 0x000000C0

534 
	#CAN_BIT_BRP
 0x0000003F

535 

	)

542 
	#CAN_INT_INTID_MSK
 0x0000FFFF

543 

	)

550 
	#CAN_TST_TX_MSK
 0x00000060

551 

	)

558 
	#CAN_BRPE_BRPE
 0x0000000F

559 

	)

567 
	#CAN_IFCRQ_BUSY
 0x00008000

568 
	#CAN_IFCRQ_MNUM_MSK
 0x0000003F

569 

	)

577 
	#CAN_IFCMSK_WRNRD
 0x00000080

578 
	#CAN_IFCMSK_MASK
 0x00000040

579 
	#CAN_IFCMSK_ARB
 0x00000020

580 
	#CAN_IFCMSK_CONTROL
 0x00000010

581 
	#CAN_IFCMSK_CLRINTPND
 0x00000008

582 
	#CAN_IFCMSK_TXRQST
 0x00000004

583 
	#CAN_IFCMSK_NEWDAT
 0x00000004

584 
	#CAN_IFCMSK_DATAA
 0x00000002

585 
	#CAN_IFCMSK_DATAB
 0x00000001

586 

	)

594 
	#CAN_IFMSK1_MSK
 0x0000FFFF

595 

	)

603 
	#CAN_IFMSK2_MXTD
 0x00008000

604 
	#CAN_IFMSK2_MDIR
 0x00004000

605 
	#CAN_IFMSK2_MSK
 0x00001FFF

606 

	)

614 
	#CAN_IFARB1_ID
 0x0000FFFF

615 

	)

623 
	#CAN_IFARB2_MSGVAL
 0x00008000

624 
	#CAN_IFARB2_XTD
 0x00004000

625 
	#CAN_IFARB2_DIR
 0x00002000

626 
	#CAN_IFARB2_ID
 0x00001FFF

627 

	)

635 
	#CAN_IFMCTL_NEWDAT
 0x00008000

636 
	#CAN_IFMCTL_MSGLST
 0x00004000

637 
	#CAN_IFMCTL_INTPND
 0x00002000

638 
	#CAN_IFMCTL_UMASK
 0x00001000

639 
	#CAN_IFMCTL_TXIE
 0x00000800

640 
	#CAN_IFMCTL_RXIE
 0x00000400

641 
	#CAN_IFMCTL_RMTEN
 0x00000200

642 
	#CAN_IFMCTL_TXRQST
 0x00000100

643 
	#CAN_IFMCTL_EOB
 0x00000080

644 
	#CAN_IFMCTL_DLC
 0x0000000F

645 

	)

653 
	#CAN_IFDA1_DATA
 0x0000FFFF

654 

	)

662 
	#CAN_IFDA2_DATA
 0x0000FFFF

663 

	)

671 
	#CAN_IFDB1_DATA
 0x0000FFFF

672 

	)

680 
	#CAN_IFDB2_DATA
 0x0000FFFF

681 

	)

688 
	#CAN_TXRQ1_TXRQST
 0x0000FFFF

689 

	)

696 
	#CAN_TXRQ2_TXRQST
 0x0000FFFF

697 

	)

704 
	#CAN_NWDA1_NEWDATA
 0x0000FFFF

705 

	)

712 
	#CAN_NWDA2_NEWDATA
 0x0000FFFF

713 

	)

720 
	#CAN_MSGINT1_INTPND
 0x0000FFFF

721 

	)

728 
	#CAN_MSGINT2_INTPND
 0x0000FFFF

729 

	)

736 
	#CAN_MSGVAL1_MSGVAL
 0x0000FFFF

737 

	)

744 
	#CAN_MSGVAL2_MSGVAL
 0x0000FFFF

745 

	)

	@drive/hardware.c

3 
	~"h¨dw¨e.h
"

4 
	~"s•0.h
"

5 
	~"Mi¸oOS.h
"

8 
	#LCD_CS_H
 
CS0_H


	)

9 
	#LCD_CS_L
 
CS0_L


	)

10 
	#LCD_A0_H
 
CD_H


	)

11 
	#LCD_A0_L
 
CD_L


	)

13 
	#LCD_SPICLK
 500000

	)

14 
	#LED_SPICLK
 1000000

	)

16 
OS_EVENT
 *
	gSPI_Sem
;

17 
uöt8
 
	gÀd_out
;

19 
	#IOSET
(
a
Ë–®| (2<<3Ë| (1<<7Ë)

	)

21 
	$IO_Inô
()

23 
LPC_IOCON
->
R_PIO1_0
 = 
	`IOSET
(1);

24 
LPC_IOCON
->
R_PIO1_1
 = 
	`IOSET
(1);

25 
LPC_IOCON
->
R_PIO1_2
 = 
	`IOSET
(1);

26 
LPC_IOCON
->
SWDIO_PIO1_3
 = 
	`IOSET
(1);

27 
LPC_IOCON
->
SWCLK_PIO0_10
 = 
	`IOSET
(1);

30 
LPC_GPIO0
->
DIR
 = 
	`BIT
(2) | BIT(7) | BIT(10);

31 
LPC_GPIO1
->
DIR
 = 
	`BIT
(1) | BIT(2) | BIT(4) | BIT(5) | BIT(8) | BIT(10);

32 
LPC_GPIO2
->
DIR
 = 
	`BIT
(3) | BIT(6) | BIT(7) | BIT(8) | BIT(9) | BIT(10);

33 
LPC_GPIO2
->
DATA
 |–
	`BIT
(9)|BIT(10) );

34 
LPC_GPIO1
->
DATA
 &~–
	`BIT
(8)|BIT(10) );

35 
LPC_GPIO0
->
DATA
 &~–
	`BIT
(2) | BIT(7) | BIT(10) );

37 
ADO_L
;

38 
CLK_H
;

39 
FIRE_OUTL
;

40 
BTOUT_L
;

41 
BTGD_L
;

42 
Àd_out
 = 0x8E;

44 
SPI_Sem
 = 
	`OSSemCª©e
( 1 );

45 
	`SSP0_öô
(1000000, 8, 3);

46 
	}
}

55 
	$SSP_Tøns
(c⁄° 
uöt8
 *
buff
, 
size
, 
TSSPFunc
 
func
, 
uöt32
 
˛k
 )

57 
	`OSSemPíd
–
SPI_Sem
, 0 );

58 
	`SSP0_£t
(
˛k
, 8, 3);

59 
	`func
(1);

60  
size
--)

62 
	`SSP0_Tøns„rByã
–*
buff
++ );

64 
	`func
(0);

65 
	`OSSemPo°
–
SPI_Sem
 );

66 
	}
}

68 
	$LCD_•iCS
–
í
 )

70 if–
í
 ){

71 
LCD_CS_L
;

73 
LCD_CS_H
;

75 
	}
}

78 
	$LCDWrCMD
–c⁄° 
uöt8
 *
buff
, 
size
 )

80 
LCD_A0_L
;

81 
	`SSP_Tøns
–
buff
, 
size
, 
LCD_•iCS
, 
LCD_SPICLK
);

82 
	}
}

84 
	$LCDWrD©a
–c⁄° 
uöt8
 *
buff
, 
size
 )

86 
LCD_A0_H
;

87 
	`SSP_Tøns
–
buff
, 
size
, 
LCD_•iCS
, 
LCD_SPICLK
 );

88 
	}
}

90 
	$LED_CS
–
í
 )

92 if–
í
 ){

93 
CS1_L
;

95 
CS1_H
;

97 
	}
}

99 
uöt8
 
	$LED_Out
–
uöt8
 
d©a
 )

101 
uöt8
 
ªt
 = 
Àd_out
;

102 
Àd_out
 = 
d©a
;

103 
	`SSP_Tøns
–&
Àd_out
, 1, 
LED_CS
, 
LED_SPICLK
 );

104  
ªt
;

105 
	}
}

107 
uöt8
 
	$LCD_Gë
( )

109  
Àd_out
 & 
LCD_LED
;

110 
	}
}

112 
uöt8
 
	$LED_Së
–
uöt8
 
d©a
 )

114 
uöt8
 
d
 = 
Àd_out
 | 
d©a
;

115  
	`LED_Out
–
d
 );

116 
	}
}

118 
uöt8
 
	$LED_CÃ
–
uöt8
 
d©a
 )

120 
uöt8
 
d
 = 
Àd_out
 & (~
d©a
);

121  
	`LED_Out
–
d
 );

122 
	}
}

124 
uöt8
 
	$LED_NŸ
–
uöt8
 
d©a
 )

126 
uöt8
 
d
 = 
Àd_out
 ^ 
d©a
;

127  
	`LED_Out
–
d
 );

128 
	}
}

	@drive/hardware.h

3 #i‚de‡
__HARDWARE_H__


4 
	#__HARDWARE_H__


	)

6 
	~"b•.h
"

7 
	~"≠p_cfg.h
"

8 
	~"Mi¸oOS.h
"

10 
	#CS1_H
 
	`SBI_P
–1, 2 )

	)

11 
	#CS1_L
 
	`CBI_P
–1, 2 )

	)

12 
	#CS0_H
 
	`SBI_P
–1, 4 )

	)

13 
	#CS0_L
 
	`CBI_P
–1, 4 )

	)

14 
	#BJ_H
 
	`SBI_P
–1, 5 )

	)

15 
	#BJ_L
 
	`CBI_P
–1, 5 )

	)

17 
	#CD_H
 
	`SBI_P
–2, 3 )

	)

18 
	#CD_L
 
	`CBI_P
–2, 3 )

	)

19 
	#LED_H
 
	`SBI_P
–2, 6 )

	)

20 
	#LED_L
 
	`CBI_P
–2, 6 )

	)

21 
	#LED_NOT
 
	`NBI_P
–2, 6 )

	)

23 
	#AD_IN
 
	`PBI_P
–0, 1 )

	)

24 
	#ERROR_IN
 
	`PBI_P
–0, 3 )

	)

25 
	#VCDERR_IN
 
	`PBI_P
–1, 3 )

	)

26 
	#YJ_IN
 
	`PBI_P
–1, 11 )

	)

27 
	#VINERR_IN
 
	`PBI_P
–2, 8 )

	)

28 
	#VOUTERR_IN
 
	`PBI_P
–2, 11 )

	)

30 
	#ADO_H
 
	`SBI_P
–0, 2 )

	)

31 
	#ADO_L
 
	`CBI_P
–0, 2 )

	)

32 
	#ADO_NOT
 
	`NBI_P
–0, 2 )

	)

33 
	#CLK_H
 
	`SBI_P
–1, 8 )

	)

34 
	#CLK_L
 
	`CBI_P
–1, 8 )

	)

35 
	#BTOUT_H
 
	`SBI_P
–1, 10 )

	)

36 
	#BTOUT_L
 
	`CBI_P
–1, 10 )

	)

37 
	#BTGD_H
 
	`SBI_P
–0, 10 )

	)

38 
	#BTGD_L
 
	`CBI_P
–0, 10 )

	)

40 
	#LED_POWER
 
	`BIT
(0)

	)

41 
	#LED_COM
 
	`BIT
(1)

	)

42 
	#LED_GZ
 
	`BIT
(2)

	)

43 
	#LED_BJ
 
	`BIT
(3)

	)

45 
	#LCD_LED
 
	`BIT
(7)

	)

46 
	#CALL_OUT
 
	`BIT
(6)

	)

48 
	#LED_POWER_ON
 
	`LED_CÃ
–
LED_POWER
 )

	)

49 
	#LED_POWER_OFF
 
	`LED_Së
–
LED_POWER
 )

	)

50 
	#LED_COM_ON
 
	`LED_CÃ
–
LED_COM
 )

	)

51 
	#LED_COM_OFF
 
	`LED_Së
–
LED_COM
 )

	)

52 
	#LED_BJ_ON
 
	`LED_CÃ
–
LED_BJ
 )

	)

53 
	#LED_BJ_OFF
 
	`LED_Së
–
LED_BJ
 )

	)

54 
	#LED_BJ_NOT
 
	`LED_NŸ
–
LED_BJ
 )

	)

55 
	#LED_GZ_ON
 
	`LED_CÃ
–
LED_GZ
 )

	)

56 
	#LED_GZ_OFF
 
	`LED_Së
–
LED_GZ
 )

	)

58 
	#LED_SY
 
	`LED_CÃ
–
LED_COM
 | 
LED_BJ
 | 
LED_GZ
 );

	)

59 
	#LED_SY_DIS
 
	`LED_Së
–
LED_COM
 | 
LED_BJ
 | 
LED_GZ
 );

	)

61 
	#LCD_LED_ON
 
	`LED_Së
–
LCD_LED
 )

	)

62 
	#LCD_LED_OFF
 
	`LED_CÃ
–
LCD_LED
 )

	)

63 
	#LCD_LED_IN
 
	`LCD_Gë
()

	)

65 
	#CALL_ON
 
	`LED_Së
–
CALL_OUT
 )

	)

66 
	#CALL_OFF
 
	`LED_CÃ
–
CALL_OUT
 )

	)

67 
	#CALL_NOT
 
	`LED_NŸ
–
CALL_OUT
 )

	)

69 
	#FIRE_OUTH
 
	`SBI_P
–1, 5 )

	)

70 
	#FIRE_OUTL
 
	`CBI_P
–1, 5 )

	)

71 
	#FIRE_IN
 (!
	`PBI_P
–2, 7 ))

	)

73 
	#KEY_IN
 ( (~(
	`PIN
(3))Ë& 0xF )

	)

76 
OS_EVENT
 *
SPI_Sem
;

77 
	#OSSPI_Lock
(Ë
	`OSSemPíd
–
SPI_Sem
, 0 )

	)

78 
	#OSSPI_U∆ock
(Ë
	`OSSemPo°
–
SPI_Sem
 )

	)

81 
IO_Inô
();

83 
uöt8
 
LED_Out
–uöt8 
d©a
 );

84 
uöt8
 
LED_Së
–uöt8 
d©a
 );

85 
uöt8
 
LED_CÃ
–uöt8 
d©a
 );

86 
uöt8
 
LED_NŸ
–uöt8 
d©a
 );

88 
uöt8
 
LCD_Gë
( );

90 
LCDWrCMD
–c⁄° 
uöt8
 *
buff
, 
size
 );

91 
LCDWrD©a
–c⁄° 
uöt8
 *
buff
, 
size
 );

	@drive/mylist.h

4 #i‚de‡
__MYLIST_H__


5 
	#__MYLIST_H__


	)

8 #i‚de‡
ARRAY_SIZE


9 
	#ARRAY_SIZE
(
a
 ) (–aË/ –a[0] ))

	)

13 #i‚de‡
LIST_BUF_SIZE


14 
	#LIST_BUF_SIZE
 (128)

16 

	)

17 
	#LIST_BUF_MASK
 (
LIST_BUF_SIZE
-1ul)

18 

	)

20 
	#LIST_BUF_RESET
(
£rBuf
Ë(£rBuf.
rd
 = sîBuf.
˙t
 = sîBuf.
wr
 = 0)

	)

21 
	#LIST_BUF_COUNT
(
£rBuf
Ë(£rBuf.
˙t
)

	)

22 
	#LIST_BUF_FULL
(
£rBuf
Ë(£rBuf.
˙t
 >
	`ARRAY_SIZE
–£rBuf.
d©a
Ë)

	)

25 
	#LIST_BUF_GET
–
£rBuf
, 
pd©a
) \

26 if–!
	`LIST_BUF_FULL
–
£rBuf
 ) ) { \

27 
£rBuf
.
˙t
++; 
pd©a
 = &£rBuf.
d©a
[£rBuf.
wr
++]; \

28 if–
£rBuf
.
wr
 >
	`ARRAY_SIZE
–£rBuf.
d©a
 )) serBuf.wr=0; \

29 }
pd©a
 = 
NULL
;

	)

31 
	#LIST_BUF_RD
(
£rBuf
, 
d©aOut
) \

32 { (
d©aOut
Ë
£rBuf
.
d©a
[£rBuf.
rd
++]; if–£rBuf.rd >
	`ARRAY_SIZE
(serBuf.data)) serBuf.rd=0; \

33 
£rBuf
.
˙t
--; \

34 }

	)

36 
	#LIST_BUF_WR
(
£rBuf
, 
d©aIn
) \

37 if–
£rBuf
.
˙t
 < 
	`ARRAY_SIZE
–£rBuf.
d©a
 ) ){ \

38 
£rBuf
.
˙t
++; \

39 
£rBuf
.
d©a
[£rBuf.
wr
++] = (
d©aIn
); \

40 if–
£rBuf
.
wr
 >
	`ARRAY_SIZE
(£rBuf.
d©a
)Ë£rBuf.wr=0; }

	)

42 
	#LIST_TYPE
–
__«me
, 
__ty≥
 ) \

43 
__
 ## 
	t__«me
 { \

44 
__ty≥
 
d©a
[
LIST_BUF_SIZE
]; \

45 
uöt16
 
wr
; \

46 
uöt16
 
rd
; \

47 
uöt16
 
˙t
; \

48 } 
	t__«me
;

	)

51 
	#LIST_TYPE_EXT
–
__«me
, 
__ty≥
, 
size
 ) \

52 
__
 ## 
	t__«me
 { \

53 
__ty≥
 
d©a
[
size
]; \

54 
uöt16
 
wr
; \

55 
uöt16
 
rd
; \

56 
uöt16
 
˙t
; \

57 } 
	t__«me
;

	)

	@drive/portlcd.c

7 
	#LCD_SOURCE


	)

9 
	~"b•.h
"

10 
	~"p‹écd.h
"

11 
	~"≠p_cfg.h
"

12 
	~"u£r.h
"

14 
	~"h¨dw¨e.h
"

15 
	#OS_LCD_LOCK
()

	)

16 
	#OS_LCD_UNLOCK
()

	)

56 
	#LCD_A0SPLAY_ON
 0xAF

	)

57 
	#LCD_A0SPLAY_OFF
 0xAE

	)

59 
	#LCD_SET_START
 0x40

	)

61 
	#LCD_SET_PAGE_ADDR
 0xB0

	)

62 
	#LCD_SET_COLUMN_ADDRH
 0x10

	)

63 
	#LCD_SET_COLUMN_ADDRL
 0x00

	)

66 
	#LCD_END
 0xEE

	)

67 
	#LCD_RESET
 0xE2

	)

69 
uöt8
 
	glcd_x
;

70 
uöt8
 
	glcd_buff
[
GUI_LCM_XMAX
];

72 
uöt8
 
	gPageAddr
 = 
LCD_SET_PAGE_ADDR
;

74 
	$LCD_Wrôe
(
uöt8
 
x
,uöt8 
y
,uöt8 
d©
)

76 
uöt8
 
xH
,
xL
;

78 if(
x
 >
GUI_LCM_XMAX
) ;

79 if(
y
 >
GUI_LCM_YMAX
) ;

81 
xH
 = 
LCD_SET_COLUMN_ADDRH
 + ((
x
>>4)&0x0F);

82 
xL
 = 
LCD_SET_COLUMN_ADDRL
 + (
x
 & 0x0F);

83 
y
 +
PageAddr
;

84 
lcd_x
 = 
x
+1;

86 
lcd_buff
[0] = 
xH
;

87 
lcd_buff
[1] = 
xL
;

88 
lcd_buff
[2] = 
y
;

89 
	`LCDWrCMD
–
lcd_buff
, 3 );

90 
	`LCDWrD©a
–&
d©
, 1 );

91 
	}
}

93 
	$LCD_VLöe
(
uöt8
 
x
, uöt8 
y0
, uöt8 
y1
, uöt8 
cﬁ‹
)

95 ; 
y0
<=
y1
; y0++)

97 if(
cﬁ‹
)

98 
	`LCD_Wrôe
(
x
,
y0
,0xFF);

100 
	`LCD_Wrôe
(
x
,
y0
,0x00);

102 
	}
}

104 
uöt8
 
	$LCD_SëPos
(
uöt8
 
x
,uöt8 
y
)

106 
uöt8
 
xH
,
xL
;

107 if(
x
 >
GUI_LCM_XMAX
 || 
y
 >
GUI_LCM_YMAX
)

111 
lcd_x
 = 
x
;

112 
xH
 = 
LCD_SET_COLUMN_ADDRH
 + ((
x
>>4)&0x0F);

113 
xL
 = 
LCD_SET_COLUMN_ADDRL
 + (
x
 & 0x0F);

114 
y
 +
PageAddr
;

116 
lcd_buff
[0] = 
xH
;

117 
lcd_buff
[1] = 
xL
;

118 
lcd_buff
[2] = 
y
;

120 
	`LCDWrCMD
–
lcd_buff
, 3 );

122 
	}
}

124 
	$LCD_WrôeD©a
(
uöt8
 
d©
,uöt8 
Àn
)

126 
size
 = (
Àn
+
lcd_x
Ë>
GUI_LCM_XMAX
? GUI_LCM_XMAX-lcd_x:Üen;

127 
i
;

128 
i
=0; i<
size
; i++)

130 
lcd_buff
[
i
] = 
d©
;

132 
	`LCDWrD©a
–
lcd_buff
, 
size
 );

133 
lcd_x
 +
size
;

134 
	}
}

136 
	$LCD_Tøns_P
(
CONST_UINT8
 *
buff
,
uöt8
 
Àn
,uöt8 
cﬁ‹
)

138 
size
 = (
Àn
+
lcd_x
Ë>
GUI_LCM_XMAX
? GUI_LCM_XMAX-lcd_x:Üen;

139 
i
;

140 
uöt8
 
d©
;

141 
i
=0; i<
size
; i++)

143 
d©
 = 
	`pgm_ªad_byã
(
buff
++);

144 
lcd_buff
[
i
] = 
cﬁ‹
? 
d©
: ~dat;

146 
	`LCDWrD©a
–
lcd_buff
, 
size
 );

147 
lcd_x
 +
size
;

148 
	}
}

169 c⁄° 
uöt8
 
	g¢7503
[]={

187 c⁄° 
uöt8
 
	gST7565P
[]={

218 
	#SN_INIT
 
ST7565P


	)

221 
	$LCD_Inô
()

223 if–
pU§Cfg
->
lcdTy≥
 == 0 )

225 
	`LCDWrCMD
–
¢7503
, ( sn7503 ));

226 
PageAddr
 = 
LCD_SET_PAGE_ADDR
+4;

229 
	`LCDWrCMD
–
ST7565P
, ( ST7565P ));

231 
	`LCD_SëV
–
pU§Cfg
->
bg_˙t
 );

232 
	}
}

234 
	$LCD_Clo£
()

238 
	}
}

241 
	$LCD_CÀ¨
(
uöt8
 
d©
)

243 
uöt8
 
i
,
j
;

244 
uöt8
 
∑ge
 = 
PageAddr
;

245 
	`LCD_Inô
();

249 
i
=0; i<
GUI_LCM_YMAX
; i++)

251 
lcd_buff
[0] = 
∑ge
++;

252 
lcd_buff
[1] = 
LCD_SET_COLUMN_ADDRH
;

253 
lcd_buff
[2] = 
LCD_SET_COLUMN_ADDRL
;

254 
	`LCDWrCMD
–
lcd_buff
, 3 );

255 
j
=0; j<
GUI_LCM_XMAX
; j++)

257 
lcd_buff
[
j
] = 
d©
;

259 
	`LCDWrD©a
–
lcd_buff
, 
GUI_LCM_XMAX
 );

261 
	}
}

263 
uöt8
 
	$LCD_SëV
–
uöt8
 
Vd©
 )

265 if–
Vd©
 < 10 ) Vdat = 10;

266 
lcd_buff
[0] = 0x81;

267 
lcd_buff
[1] = 
Vd©
 & 0x3F;

268 
	`LCDWrCMD
–
lcd_buff
, 2 );

269  
Vd©
;

270 
	}
}

	@drive/portlcd.h

1 #i‚de‡
__MCG12864_H__


2 
	#__MCG12864_H__


	)

4 #ifde‡ 
MCG12864_GLOBALS


5 
	#MCG12864_EXT


	)

7 
	#MCG12864_EXT
 

	)

9 
	~"myty≥.h
"

12 
	#GUI_LCM_XMAX
 128

	)

13 
	#GUI_LCM_YMAX
 4

	)

15 
MCG12864_EXT
 
LCD_Inô
 ();

16 
MCG12864_EXT
 
LCD_Clo£
 ();

17 
MCG12864_EXT
 
LCD_CÀ¨
 (
uöt8
 
cﬁ‹
);

18 
MCG12864_EXT
 
uöt8
 
LCD_SëV
 (uöt8 
lcd_v
);

20 
MCG12864_EXT
 
LCD_Wrôe
 (
uöt8
 
x
,uöt8 
y
,uöt8 
d©
);

21 
MCG12864_EXT
 
uöt8
 
LCD_SëPos
 (uöt8 
x
,uöt8 
y
);

22 
MCG12864_EXT
 
LCD_Tøns_P
 (
CONST_UINT8
 *
buff
,
uöt8
 
Àn
, uöt8 
cﬁ‹
);

23 
MCG12864_EXT
 
LCD_WrôeD©a
(
uöt8
 
d©
,uöt8 
Àn
);

25 
MCG12864_EXT
 
LCD_VLöe
 (
uöt8
 
x
, uöt8 
y0
, uöt8 
y1
, uöt8 
cﬁ‹
);

	@drive/pwm.c

2 
	~"b•.h
"

3 
	~"pwm.h
"

4 
	~"≠p_cfg.h
"

6 
	#EMC0
 4

	)

7 
	#EMC1
 6

	)

8 
	#EMC2
 8

	)

9 
	#EMC3
 10

	)

11 
	#MATCH0
 (1<<0)

	)

12 
	#MATCH1
 (1<<1)

	)

13 
	#MATCH2
 (1<<2)

	)

14 
	#MATCH3
 (1<<3)

	)

16 
	#TIMER16_HZ
 1000000

	)

17 
	#TIMER16_PR
 (
FPCLK
/(
TIMER16_HZ
))

	)

19 
TIMER16_1_IRQH™dÀr
();

20 
	$TIMER16_1_IRQH™dÀr
()

22 i‡–
LPC_TMR16B1
->
IR
 & 
	`BIT
(3) )

24 
LPC_TMR16B1
->
IR
 = 
	`BIT
(3);

27 
	}
}

30 
	$pwm1_öô
–
uöt16
 
time
 )

32 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_CT16B1
 );

34 
LPC_IOCON
->
PIO1_9
 = 1;

36 
LPC_TMR16B1
->
TC
 = 0;

37 
LPC_TMR16B1
->
PC
 = 0;

38 
LPC_TMR16B1
->
IR
 = 0xFF;

39 
LPC_TMR16B1
->
PR
 = 
TIMER16_PR
-1;

43 
LPC_TMR16B1
->
MCR
 = \

49 
LPC_TMR16B1
->
EMR
 = (1<<
EMC3
)|(1<<
EMC2
)|(1<<
EMC1
)|(1<<
EMC0
)|(1<<3)|(1<<0);

55 
LPC_TMR16B1
->
PWMC
 = (1<<3)|(1<<0);

58 
LPC_TMR16B1
->
MR0
 = 
time
;

59 
LPC_TMR16B1
->
MR3
 = 
PWM_MAX
;

61 
LPC_TMR16B1
->
TCR
 = 0x01;

65 
	}
}

67 
	$pwm1_£t
–
uöt16
 
time
)

69 
LPC_TMR16B1
->
MR0
 = 
time
;

70 
	}
}

72 
	$pwm1_£tB
–
uöt32
 
time
 )

74 
time
 = 
	`MIN
–timê, 
PWM_MAXTIME
 );

75 if–
time
 == 0 )

77 
LPC_TMR16B1
->
MR0
 = 
PWM_MAX
+1;

80 
time
 = (
PWM_MAXTIME
-timeË* (
PWM_MAX
+1) / PWM_MAXTIME;

81 
LPC_TMR16B1
->
MR0
 = 
time
;

83 
	}
}

85 
	$pwm1_í
–
í
 )

87 
LPC_TMR16B1
->
TCR
 = 
í
? 1: 0;

88 
	}
}

91 
	~"pcomm™d.h
"

92 
	$time_cmd
–
¨gs
, **
¨gv
)

94 if–
¨gs
 > 1 )

96 if–!
	`°rcmp
–
¨gv
[1], "i" ))

98 
˙t
 = 
	`©oi
–
¨gv
[2] );

99 if–
˙t
 == 0 )

100 
˙t
 = 
PWM_MAX
+1;

101 
	`pwm1_öô
–
˙t
 );

102 }if–!
	`°rcmp
–
¨gv
[1], "get"))

104 
	`¥ötk
("MR0 :\à%ld\n", 
LPC_TMR16B1
->
MR0
 );

105 
	`¥ötk
("IR :\à%ld\n", 
LPC_TMR16B1
->
IR
 );

106 
	`¥ötk
("PR :\à%ld\n", 
LPC_TMR16B1
->
PR
 );

107 
	`¥ötk
("MCR :\à%ld\n", 
LPC_TMR16B1
->
MCR
 );

108 
	`¥ötk
("TCR :\à%ld\n", 
LPC_TMR16B1
->
TCR
 );

109 
	`¥ötk
("TC :\à%ld\n", 
LPC_TMR16B1
->
TC
 );

110 
	`¥ötk
("PC :\à%ld\n", 
LPC_TMR16B1
->
PC
 );

111 }if–!
	`°rcmp
–
¨gv
[1], "set"))

113 
˙t
 = 
	`©oi
–
¨gv
[2] );

114 if–
˙t
 == 0 )

115 
˙t
 = 100;

116 
	`pwm1_£tB
–
˙t
 );

120 
	}
}

121 
PSHELL_CMD
–
pwm
, 
time_cmd
, "pwm [i|set|get]" );

	@drive/pwm.h

3 #i‚de‡
__PWM_H__


4 
	#__PWM_H__


	)

6 
	#PWM_MAX
 0x7FFF

	)

7 
	#PWM_MAXTIME
 1000

	)

9 
pwm1_öô
–
uöt16
 
time
 );

10 
pwm1_£t
–
uöt16
 
time
);

11 
pwm1_í
–
í
 );

12 
pwm1_£tB
–
uöt32
 
time
 );

	@drive/ssp0.c

2 
	#SSP0_GLOBAL


	)

4 
	~"myty≥.h
"

5 
	~"b•.h
"

6 
	~"s•0.h
"

7 
	~"≠p_cfg.h
"

13 
	#USE_CS
 0

	)

14 
	#SSP_DEBUG
 0

	)

17 
	#SSP_BUFSIZE
 16

	)

18 
	#FIFOSIZE
 8

	)

20 
	#DELAY_COUNT
 10

	)

21 
	#MAX_TIMEOUT
 0xFF

	)

24 
	#SSP0_SEL
 (0x1<<2)

	)

27 
	#SSPSR_TFE
 (0x1<<0)

	)

28 
	#SSPSR_TNF
 (0x1<<1)

	)

29 
	#SSPSR_RNE
 (0x1<<2)

	)

30 
	#SSPSR_RFF
 (0x1<<3)

	)

31 
	#SSPSR_BSY
 (0x1<<4)

	)

34 
	#SSPCR0_DSS
 (0x1<<0)

	)

35 
	#SSPCR0_FRF
 (0x1<<4)

	)

36 
	#SSPCR0_SPO
 (0x1<<6)

	)

37 
	#SSPCR0_SPH
 (0x1<<7)

	)

38 
	#SSPCR0_SCR
 (0x1<<8)

	)

41 
	#SSPCR1_LBM
 (0x1<<0)

	)

42 
	#SSPCR1_SSE
 (0x1<<1)

	)

43 
	#SSPCR1_MS
 (0x1<<2)

	)

44 
	#SSPCR1_SOD
 (0x1<<3)

	)

47 
	#SSPIMSC_RORIM
 (0x1<<0)

	)

48 
	#SSPIMSC_RTIM
 (0x1<<1)

	)

49 
	#SSPIMSC_RXIM
 (0x1<<2)

	)

50 
	#SSPIMSC_TXIM
 (0x1<<3)

	)

53 
	#SSPRIS_RORRIS
 (0x1<<0)

	)

54 
	#SSPRIS_RTRIS
 (0x1<<1)

	)

55 
	#SSPRIS_RXRIS
 (0x1<<2)

	)

56 
	#SSPRIS_TXRIS
 (0x1<<3)

	)

59 
	#SSPMIS_RORMIS
 (0x1<<0)

	)

60 
	#SSPMIS_RTMIS
 (0x1<<1)

	)

61 
	#SSPMIS_RXMIS
 (0x1<<2)

	)

62 
	#SSPMIS_TXMIS
 (0x1<<3)

	)

65 
	#SSPICR_RORIC
 (0x1<<0)

	)

66 
	#SSPICR_RTIC
 (0x1<<1)

	)

69 
	#WREN
 0x06

	)

70 
	#WRDI
 0x04

	)

71 
	#RDSR
 0x05

	)

72 
	#WRSR
 0x01

	)

73 
	#READ
 0x03

	)

74 
	#WRITE
 0x02

	)

77 
	#RDSR_RDY
 0x01

	)

78 
	#RDSR_WEN
 0x02

	)

81 
TSSPFunc
 
	gSSPfunc
;

82 
uöt8
 *
	gpSSPRx
;

83 
uöt8
 *
	gpSSPTx
;

84 
	gSSP_TxSize
, 
	gSSP_RxSize
;

86 
	$SSP0_£t
(
uöt32
 
baudøã
,
uöt8
 
bôs
, uöt8 
ty≥s
)

88 
uöt32
 
˙t
;

89 if(
bôs
 < 4 || bits>16)

90 
bôs
 = 8;

91 
bôs
--;

93 if–
ty≥s
 > 3 )

94 
ty≥s
 = 3;

96 
˙t
 = (
FCCLK
)/
baudøã
 - 1;

100 
LPC_SSP0
->
CR0
 = (
bôs
<<0Ë| (0<<4Ë| (
ty≥s
<<6Ë| (
˙t
<<8);

101 
LPC_SSP0
->
CPSR
 = 0x02;

102 
LPC_SSP0
->
CR1
 |= (1<<1);

103 
	}
}

115 
	$SSP0_öô
(
uöt32
 
baudøã
,
uöt8
 
bôs
, uöt8 
ty≥s
)

117 
LPC_SYSCON
->
PRESETCTRL
 |= 0x01;

120 
LPC_IOCON
->
PIO0_6
 |= 0x02;

121 
LPC_IOCON
->
PIO0_8
 |= 0x01;

122 
LPC_IOCON
->
PIO0_9
 |= 0x01;

125 
LPC_IOCON
->
SCK_LOC
 = 0x02;

126 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_SSP0
 );

128 
LPC_SYSCON
->
SSP0CLKDIV
 = 0x01;

129 
LPC_SSP0
->
IMSC
 = 0x00;

131 
	`SSP0_£t
–
baudøã
, 
bôs
, 
ty≥s
 );

132 
	}
}

134 
uöt16
 
	$SSP0_Tøns„rByã
(
uöt16
 
d©a
)

136 
uöt16
 
ªt
;

138 (
LPC_SSP0
->
SR
 & 0x02) == 0);

139 
LPC_SSP0
->
DR
 = 
d©a
;

140 (
LPC_SSP0
->
SR
 & 0x10) == 0x10);

141 
ªt
 = 
LPC_SSP0
->
DR
;

143  
ªt
;

144 
	}
}

146 
	$SSP0_Po°
( )

148 if–
SSP_TxSize
 )

150 
SSP_TxSize
--;

151 if–
pSSPTx
 )

153 
LPC_SSP0
->
DR
 = *
pSSPTx
++;

156 
LPC_SSP0
->
DR
 = 0xFF;

159 
	}
}

160 
	$SSP0_Gë
( )

162 
uöt8
 
tmp
;

163 
tmp
 = 
LPC_SSP0
->
DR
;

164 if–
SSP_RxSize
 )

166 
SSP_RxSize
--;

167 if–
pSSPRx
 )

169 *
pSSPRx
++ = 
tmp
;

172 if–
SSP_RxSize
 == 0 )

174 
LPC_SSP0
->
IMSC
 = 0x00;

175 
	`SSPfunc
(0);

176 
SSPfunc
 = 
NULL
;

178 
	}
}

180 
	$SSP0_Tøns„r
–
uöt8
 *
Txbuff
, uöt8 *
Rxbuff
, 
Àn
, 
TSSPFunc
 
func
 )

182 
uöt8
 
tmp
;

183 if–
func
 =
NULL
 || 
SSPfunc
 !NULL || 
Àn
 == 0 )

184  
FALSE
;

185 
tmp
 = 
LPC_SSP0
->
DR
;

186 
	`func
( 1 );

187 
LPC_SSP0
->
IMSC
 = 
SSPIMSC_RXIM
 | 
SSPIMSC_TXIM
;

188 
SSPfunc
 = 
func
;

189 
pSSPRx
 = 
Rxbuff
;

190 
pSSPTx
 = 
Txbuff
;

191 
SSP_TxSize
 = 
Àn
;

192 
SSP_RxSize
 = 
Àn
;

193 
	`SSP0_Po°
();

194 
tmp
 =
TRUE
;

195  
tmp
;

196 
	}
}

198 
SSP0_IRQH™dÀr
();

199 
	$SSP0_IRQH™dÀr
()

201 
uöt32_t
 
ªgVÆue
;

203 
ªgVÆue
 = 
LPC_SSP0
->
MIS
;

204 i‡–
ªgVÆue
 & 
SSPMIS_TXMIS
 )

206 
	`SSP0_Po°
();

209 i‡–
ªgVÆue
 & 
SSPMIS_RORMIS
 )

211 
LPC_SSP0
->
ICR
 = 
SSPICR_RORIC
;

213 i‡–
ªgVÆue
 & 
SSPMIS_RTMIS
 )

215 
	`SSP0_Gë
();

216 
LPC_SSP0
->
ICR
 = 
SSPICR_RTIC
;

218 
	}
}

	@drive/ssp0.h

3 #i‚de‡
__SSP0_H__


4 
	#__SSP0_H__


	)

6 
	~"myty≥.h
"

8 (*
	tTSSPFunc
Ë(
	tí
 );

10 
	`SSP0_öô
 (
uöt32
 
baudøã
,
uöt8
 
bôs
, uöt8 
ty≥s
);

11 
	`SSP0_£t
 (
uöt32
 
baudøã
,
uöt8
 
bôs
, uöt8 
ty≥s
);

12 
uöt16
 
	`SSP0_Tøns„rByã
 (uöt16 
d©a
);

13 
	`SSP0_Tøns„r
 (
uöt8
 *
Txbuff
, uöt8 *
Rxbuff
, 
Àn
, 
TSSPFunc
 
func
 );

	@drive/time16.c

3 
	~"b•.h
"

4 
	~"time16.h
"

5 
	~"≠p_cfg.h
"

7 
	#TIMER16_PR
 (
FPCLK
/(
TIMER16_HZ
))

	)

9 
TIMER16_0_IRQH™dÀr
();

10 
	$TIMER16_0_IRQH™dÀr
()

12 i‡–
LPC_TMR16B0
->
IR
 & 0x1 )

14 
LPC_TMR16B0
->
IR
 = 1;

15 
	`NBI_P
( 0, 2);

17 
	}
}

19 
	$timî16_öô
–
uöt16
 
time
 )

21 
	`PORT_OUT
(1, 8);

22 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_CT16B0
 );

24 
LPC_TMR16B0
->
TC
 = 0;

25 
LPC_TMR16B0
->
PC
 = 0;

26 
LPC_TMR16B0
->
IR
 = 0xFF;

27 
LPC_TMR16B0
->
PR
 = 
TIMER16_PR
-1;

28 
LPC_TMR16B0
->
MCR
 = 3;

29 
LPC_TMR16B0
->
MR0
 = 
time
;

31 
LPC_TMR16B0
->
TCR
 = 0x01;

32 
	`NVIC_E«bÀIRQ
(
TIMER_16_0_IRQn
);

33 
	`NVIC_SëPri‹ôy
(
TIMER_16_0_IRQn
, 2);

34 
	}
}

36 
	$timî16_£t
–
uöt16
 
time
)

38 
LPC_TMR16B0
->
MR0
 = 
time
;

39 
LPC_TMR16B0
->
TCR
 |= 2;

40 if–
LPC_TMR16B0
->
IR
 & 1)

42 
LPC_TMR16B0
->
IR
 = 1;

44 
	}
}

46 
	$timî16_í
–
í
 )

48 
LPC_TMR16B0
->
TCR
 = 
í
? 1: 0;

49 
	}
}

51 
	~"pcomm™d.h
"

52 
	$time_cmd
–
¨gs
, **
¨gv
)

54 if–
¨gs
 > 1 )

56 if–!
	`°rcmp
–
¨gv
[1], "i" ))

58 
˙t
 = 
	`©oi
–
¨gv
[2] );

59 if–
˙t
 == 0 )

60 
˙t
 = 1000;

61 
	`timî16_öô
–
˙t
 );

62 }if–!
	`°rcmp
–
¨gv
[1], "get"))

64 
	`¥ötk
("MR0 :\à%ld\n", 
LPC_TMR16B0
->
MR0
 );

65 
	`¥ötk
("IR :\à%ld\n", 
LPC_TMR16B0
->
IR
 );

66 
	`¥ötk
("PR :\à%ld\n", 
LPC_TMR16B0
->
PR
 );

67 
	`¥ötk
("MCR :\à%ld\n", 
LPC_TMR16B0
->
MCR
 );

68 
	`¥ötk
("TCR :\à%ld\n", 
LPC_TMR16B0
->
TCR
 );

69 
	`¥ötk
("TC :\à%ld\n", 
LPC_TMR16B0
->
TC
 );

70 
	`¥ötk
("PC :\à%ld\n", 
LPC_TMR16B0
->
PC
 );

71 }if–!
	`°rcmp
–
¨gv
[1], "set"))

73 
˙t
 = 
	`©oi
–
¨gv
[2] );

74 if–
˙t
 == 0 )

75 
˙t
 = 1000;

76 
	`timî16_£t
–
˙t
 );

80 
	}
}

81 
PSHELL_CMD
–
t16
, 
time_cmd
, "t16 [i|set|get]" );

	@drive/time16.h

3 #i‚de‡
__TIME16_H__


4 
	#__TIME16_H__


	)

6 
	#TIMER16_HZ
 100000

	)

8 
timî16_öô
–
uöt16
 
time
 );

9 
timî16_£t
–
uöt16
 
time
);

10 
timî16_í
–
í
 );

	@drive/timer32.c

2 
	~"b•.h
"

3 
	~"timî32.h
"

4 
	~"≠p_cfg.h
"

8 
	#TIMER32_PR
 (
FPCLK
/(
TIMER32_HZ
))

	)

17 
TIMER32_0_IRQH™dÀr
 ();

18 
	$TIMER32_0_IRQH™dÀr
 ()

20 
LPC_TMR32B0
->
IR
 = 1;

21 
	`NBI_P
( 2, 6 );

22 
	}
}

24 
	$timî32_öô
 ( 
time
 )

26 
	`PORT_OUT
(2, 6);

27 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_CT32B0
 );

29 
LPC_TMR32B0
->
TC
 = 0;

30 
LPC_TMR32B0
->
PC
 = 0;

31 
LPC_TMR32B0
->
IR
 = 1;

32 
LPC_TMR32B0
->
PR
 = 
TIMER32_PR
-1;

33 
LPC_TMR32B0
->
MCR
 = 3;

34 
LPC_TMR32B0
->
MR0
 = 
time
 ;

35 
LPC_TMR32B0
->
TCR
 = 0x01;

36 
	`NVIC_E«bÀIRQ
(
TIMER_32_0_IRQn
);

37 
	`NVIC_SëPri‹ôy
(
TIMER_32_0_IRQn
, 2);

38 
	}
}

40 
	$timî32_£t
–
time
 )

42 
LPC_TMR32B0
->
MR0
 = 
time
;

43 
LPC_TMR32B0
->
TC
 = 0;

44 i‡–
LPC_TMR32B0
->
IR
 & 0x1 )

46 
LPC_TMR32B0
->
IR
 = 1;

48 
	}
}

50 
	$timî32_í
–
í
 )

52 
LPC_TMR32B0
->
TCR
 = 
í
? 1: 0;

53 
	}
}

55 
	~"pcomm™d.h
"

56 
	$time_cmd
–
¨gs
, **
¨gv
)

58 if–
¨gs
 > 1 )

60 if–!
	`°rcmp
–
¨gv
[1], "i" ))

62 
˙t
 = 
	`©oi
–
¨gv
[2] );

63 if–
˙t
 == 0 )

64 
˙t
 = 1000;

65 
	`timî32_öô
–
˙t
 );

66 }if–!
	`°rcmp
–
¨gv
[1], "get"))

68 
t32_gë
:

69 
	`¥ötk
("MR0 :\à%ld\n", 
LPC_TMR32B0
->
MR0
 );

70 
	`¥ötk
("IR :\à%ld\n", 
LPC_TMR32B0
->
IR
 );

71 
	`¥ötk
("PR :\à%ld\n", 
LPC_TMR32B0
->
PR
 );

72 
	`¥ötk
("MCR :\à%ld\n", 
LPC_TMR32B0
->
MCR
 );

73 
	`¥ötk
("TCR :\à%ld\n", 
LPC_TMR32B0
->
TCR
 );

74 
	`¥ötk
("TC :\à%ld\n", 
LPC_TMR32B0
->
TC
 );

75 
	`¥ötk
("PC :\à%ld\n", 
LPC_TMR32B0
->
PC
 );

76 }if–!
	`°rcmp
–
¨gv
[1], "set"))

78 
˙t
 = 
	`©oi
–
¨gv
[2] );

79 if–
˙t
 == 0 )

80 
˙t
 = 1000;

81 
LPC_TMR32B0
->
MR0
 = 
˙t
;

82 
LPC_TMR32B0
->
TC
 = 0;

84 i‡–
LPC_TMR32B0
->
IR
 & 0x1 )

86 
LPC_TMR32B0
->
IR
 = 1;

90 
t32_gë
;

92 
	}
}

93 
PSHELL_CMD
–
t32
, 
time_cmd
, "t32 [i|set|get]" );

	@drive/timer32.h

3 #i‚de‡
__TIMER32_H__


4 
	#__TIMER32_H__


	)

6 
	#TIMER32_HZ
 1000000

	)

8 
timî32_öô
 ( 
time
 );

9 
timî32_£t
–
time
 );

10 
timî32_í
–
í
 );

	@drive/uart.c

3 
	#UART_GLOBAL


	)

4 
	~"myty≥.h
"

5 
	~"b•.h
"

6 
	~"u¨t.h
"

9 
	$U¨t_Inô
 (
uöt32
 
baudøã
 )

11 
uöt16
 
usFdiv
;

13 
	`NVIC_DißbÀIRQ
(
UART_IRQn
);

14 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_UART
 );

16 
LPC_IOCON
->
PIO1_6
 |= 0x01;

17 
LPC_IOCON
->
PIO1_7
 |= 0x01;

19 
LPC_SYSCON
->
UARTCLKDIV
 = 0x01;

21 
LPC_UART
->
LCR
 = 0x83;

22 
usFdiv
 = (
FAHBCLK
 / 
LPC_SYSCON
->
UARTCLKDIV
 / 16Ë/ 
baudøã
;

23 
LPC_UART
->
DLM
 = (
usFdiv
 >> 8);

24 
LPC_UART
->
DLL
 = (
usFdiv
 & 0xFF);

25 
LPC_UART
->
LCR
 = 0x03;

26 
LPC_UART
->
FCR
 = 0x07;

27 
LPC_UART
->
IER
 = 0x00;

28 
	}
}

30 
	$U¨t_GëCh¨_nb
( )

32 if(
LPC_UART
->
LSR
 & 0x01)

33  
LPC_UART
->
RBR
;

35 
	}
}

37 
	$U¨t_SídByã
 (
uöt8
 
ucD©
)

39 
LPC_UART
->
THR
 = 
ucD©
;

40 (
LPC_UART
->
LSR
 & 0x40) == 0) {

42 
	}
}

44 
	$U¨t_SídSåög
(
uöt8
 *
p°r
)

46 *
p°r
)

48 
	`U¨t_SídByã
(*
p°r
++);

50 
	}
}

	@drive/uart.h

3 #i‚de‡
__UART_H__


4 
	#__UART_H__


	)

7 #i‚de‡
UART_GLOBAL


8 
	#EXT


	)

10 
	#EXT
 

	)

14 
EXT
 
U¨t_Inô
 (
uöt32
 
baudøã
 );

15 
EXT
 
U¨t_GëCh¨_nb
( );

16 
EXT
 
U¨t_SídByã
(
uöt8
 
d©
);

17 
EXT
 
U¨t_SídSåög
(
uöt8
 *
p°r
);

22 #unde‡
EXT


	@drive/wdt.c

7 
	~"b•.h
"

8 
	~"wdt.h
"

9 
	~"≠p_cfg.h
"

10 
	~"Mi¸oOS.h
"

12 
	#WDEN
 (0x1<<0)

	)

13 
	#WDRESET
 (0x1<<1)

	)

14 
	#WDTOF
 (0x1<<2)

	)

15 
	#WDINT
 (0x1<<3)

	)

16 
	#WDPROTECT
 (0x1<<4)

	)

18 #i‚de‡
WDT_FEED_VALUE


19 
	#WDT_FEED_VALUE
 0x003FFFFF

	)

22 
	#WINDOW_MODE
 0

	)

23 
	#PROTECT_MODE
 1

	)

24 
	#WATCHDOG_RESET
 0

	)

26 
__AFTER__


27 
WDT_IRQH™dÀr
();

28 
	$WDT_IRQH™dÀr
()

30 
	`DEBUG1
( "wdt IRQ\n" );

32 
LPC_WDT
->
FEED
 = 0xAA;

33 
LPC_WDT
->
FEED
 = 0x55;

35 
LPC_WDT
->
MOD
 &~
WDTOF
;

36 
LPC_WDT
->
MOD
 &~
WDINT
;

37 
	}
}

39 
	$wdt_öô
( )

41 
OS_SREG_VAR
;

43 
LPC_SYSCON
->
WDTOSCCTRL
 = 0x03F;

44 
LPC_SYSCON
->
PDRUNCFG
 &= ~(0x1<<6);

46 
LPC_SYSCON
->
WDTCLKSEL
 = 0x02;

47 
LPC_SYSCON
->
WDTCLKUEN
 = 0x01;

48 
LPC_SYSCON
->
WDTCLKUEN
 = 0x00;

49 
LPC_SYSCON
->
WDTCLKUEN
 = 0x01;

50  !(
LPC_SYSCON
->
WDTCLKUEN
 & 0x01) );

51 
LPC_SYSCON
->
WDTCLKDIV
 = 1;

53 
	`OS_ENTER_CRITICAL
();

54 
	`SYSAHBCLKCTRL_SET
–
AHBCLK_WDT
 );

56 
LPC_WDT
->
TC
 = 0x0FFF;

57 
LPC_WDT
->
MOD
 = (0x01 << 0)

59 
LPC_WDT
->
FEED
 = 0xAA;

60 
LPC_WDT
->
FEED
 = 0x55;

61 
	`OS_EXIT_CRITICAL
();

62 
	}
}

64 
	$wdt_ª£t
( )

66 
OS_SREG_VAR
;

67 
	`OS_ENTER_CRITICAL
();

68 
LPC_WDT
->
FEED
 = 0xAA;

69 
LPC_WDT
->
FEED
 = 0x55;

70 
	`OS_EXIT_CRITICAL
();

71 
	}
}

	@drive/wdt.h

2 #i‚de‡
__WDT_H__


3 
	#__WDT_H__


	)

7 
wdt_öô
( );

8 
wdt_ª£t
( );

	@
1
.
0
76
1118
OS_CPU/os_cpu.h
OS_CPU/os_cpu_c.c
app/LPC1100PinCfg.h
app/LPC1700PinCfg.h
app/Protocol3.h
app/app_cfg.h
app/debug.c
app/global.h
app/gui_config.h
app/main.c
app/main_mac.h
app/os_cfg.h
app/shell.c
bsp/LPC11xx.h
bsp/LPC11xx_mac.h
bsp/bsp.c
bsp/bsp.h
bsp/bsp_int.c
bsp/bsp_int.h
bsp/core_cm0.h
bsp/cr_startup_lpc11.c
bsp/mytype.h
bsp/rom_api.h
bsp/system_LPC11xx.c
bsp/system_LPC11xx.h
data/data.c
data/data.h
data/djPro.c
data/djPro.h
data/drcom.c
data/drcom.h
data/protocol.h
data/rcom.c
data/rcom.h
data/user.c
data/user.h
dataGUI/FONT_CN.c
dataGUI/dataGUI.c
dataGUI/dataGUI.h
dataGUI/gui.h
dataGUI/hz16.c
dataGUI/interface.c
dataGUI/interface.h
dataGUI/setGUI.c
drive/I2C.c
drive/I2C.h
drive/IAP.c
drive/IAP.h
drive/LPCssp.c
drive/adc.c
drive/adc.h
drive/at24c256.c
drive/at24c256.h
drive/at24xx.c
drive/at24xx.h
drive/can.c
drive/can.h
drive/can_api.c
drive/can_reg_cfg.h
drive/hardware.c
drive/hardware.h
drive/mylist.h
drive/portlcd.c
drive/portlcd.h
drive/pwm.c
drive/pwm.h
drive/ssp0.c
drive/ssp0.h
drive/time16.c
drive/time16.h
drive/timer32.c
drive/timer32.h
drive/uart.c
drive/uart.h
drive/wdt.c
drive/wdt.h
