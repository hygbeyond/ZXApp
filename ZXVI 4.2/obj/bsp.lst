   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bsp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.BSP_Init,"ax",%progbits
  20              		.align	1
  21              		.global	BSP_Init
  22              		.code	16
  23              		.thumb_func
  25              	BSP_Init:
  26              	.LFB59:
  27              		.file 1 "./bsp/bsp.c"
   1:./bsp/bsp.c   **** 
   2:./bsp/bsp.c   **** 
   3:./bsp/bsp.c   **** 
   4:./bsp/bsp.c   **** #define BS_GLOBAL
   5:./bsp/bsp.c   **** #include "mytype.h"
   6:./bsp/bsp.c   **** #include "bsp.h"
   7:./bsp/bsp.c   **** #include "bsp_int.h"
   8:./bsp/bsp.c   **** #include "app_cfg.h"
   9:./bsp/bsp.c   **** 
  10:./bsp/bsp.c   **** 
  11:./bsp/bsp.c   **** extern void *__GpvVectorTable[];
  12:./bsp/bsp.c   **** 
  13:./bsp/bsp.c   **** void BSP_Init(void)
  14:./bsp/bsp.c   **** {
  28              		.loc 1 14 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  15:./bsp/bsp.c   ****     SystemInit();
  37              		.loc 1 15 0
  38 0002 FFF7FEFF 		bl	SystemInit
  39              	.LVL0:
  16:./bsp/bsp.c   **** }
  40              		.loc 1 16 0
  41              		@ sp needed
  42 0006 10BD     		pop	{r4, pc}
  43              		.cfi_endproc
  44              	.LFE59:
  46              		.section	.text.BSP_Reset,"ax",%progbits
  47              		.align	1
  48              		.global	BSP_Reset
  49              		.code	16
  50              		.thumb_func
  52              	BSP_Reset:
  53              	.LFB60:
  17:./bsp/bsp.c   **** 
  18:./bsp/bsp.c   **** /*
  19:./bsp/bsp.c   ****  * BSP_Reset   通过软件复位单片机
  20:./bsp/bsp.c   ****  */
  21:./bsp/bsp.c   **** void BSP_Reset (void)
  22:./bsp/bsp.c   **** {   /*  此系统上电复位等同硬件复位  */
  54              		.loc 1 22 0
  55              		.cfi_startproc
  56              		@ Volatile: function does not return.
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LBB8:
  61              	.LBB9:
  62              		.file 2 "./bsp/core_cm0.h"
   1:./bsp/core_cm0.h **** /**************************************************************************//**
   2:./bsp/core_cm0.h ****  * @file     core_cm0.h
   3:./bsp/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./bsp/core_cm0.h ****  * @version  V1.30
   5:./bsp/core_cm0.h ****  * @date     30. October 2009
   6:./bsp/core_cm0.h ****  *
   7:./bsp/core_cm0.h ****  * @note
   8:./bsp/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./bsp/core_cm0.h ****  *
  10:./bsp/core_cm0.h ****  * @par
  11:./bsp/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./bsp/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./bsp/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./bsp/core_cm0.h ****  *
  15:./bsp/core_cm0.h ****  * @par
  16:./bsp/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./bsp/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./bsp/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./bsp/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./bsp/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./bsp/core_cm0.h ****  *
  22:./bsp/core_cm0.h ****  ******************************************************************************/
  23:./bsp/core_cm0.h **** 
  24:./bsp/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./bsp/core_cm0.h **** #define __CM0_CORE_H__
  26:./bsp/core_cm0.h **** 
  27:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./bsp/core_cm0.h ****  *
  29:./bsp/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./bsp/core_cm0.h ****  *   - not yet checked
  31:./bsp/core_cm0.h ****  * .
  32:./bsp/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./bsp/core_cm0.h ****  *
  34:./bsp/core_cm0.h ****  */
  35:./bsp/core_cm0.h **** 
  36:./bsp/core_cm0.h **** 
  37:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./bsp/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./bsp/core_cm0.h ****     - CMSIS version number
  40:./bsp/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./bsp/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./bsp/core_cm0.h ****   @{
  43:./bsp/core_cm0.h ****  */
  44:./bsp/core_cm0.h **** 
  45:./bsp/core_cm0.h **** #ifdef __cplusplus
  46:./bsp/core_cm0.h ****  extern "C" {
  47:./bsp/core_cm0.h **** #endif 
  48:./bsp/core_cm0.h **** 
  49:./bsp/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./bsp/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./bsp/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./bsp/core_cm0.h **** 
  53:./bsp/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
  54:./bsp/core_cm0.h **** 
  55:./bsp/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./bsp/core_cm0.h **** 
  57:./bsp/core_cm0.h **** #if defined (__ICCARM__)
  58:./bsp/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./bsp/core_cm0.h **** #endif
  60:./bsp/core_cm0.h **** 
  61:./bsp/core_cm0.h **** 
  62:./bsp/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./bsp/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./bsp/core_cm0.h **** #endif
  65:./bsp/core_cm0.h **** 
  66:./bsp/core_cm0.h **** 
  67:./bsp/core_cm0.h **** 
  68:./bsp/core_cm0.h **** 
  69:./bsp/core_cm0.h **** /**
  70:./bsp/core_cm0.h ****  * IO definitions
  71:./bsp/core_cm0.h ****  *
  72:./bsp/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./bsp/core_cm0.h ****  */
  74:./bsp/core_cm0.h **** 
  75:./bsp/core_cm0.h **** #ifdef __cplusplus
  76:./bsp/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./bsp/core_cm0.h **** #else
  78:./bsp/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./bsp/core_cm0.h **** #endif
  80:./bsp/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./bsp/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./bsp/core_cm0.h **** 
  83:./bsp/core_cm0.h **** /*******************************************************************************
  84:./bsp/core_cm0.h ****  *                 Register Abstraction
  85:./bsp/core_cm0.h ****  ******************************************************************************/
  86:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  87:./bsp/core_cm0.h ****  @{
  88:./bsp/core_cm0.h **** */
  89:./bsp/core_cm0.h **** 
  90:./bsp/core_cm0.h **** 
  91:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  92:./bsp/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  93:./bsp/core_cm0.h ****   @{
  94:./bsp/core_cm0.h ****  */
  95:./bsp/core_cm0.h **** typedef struct
  96:./bsp/core_cm0.h **** {
  97:./bsp/core_cm0.h ****   __IO uint32_t ISER[1];                      /*!< (Offset: 0x000) Interrupt Set Enable Register   
  98:./bsp/core_cm0.h ****        uint32_t RESERVED0[31];
  99:./bsp/core_cm0.h ****   __IO uint32_t ICER[1];                      /*!< (Offset: 0x080) Interrupt Clear Enable Register 
 100:./bsp/core_cm0.h ****        uint32_t RSERVED1[31];
 101:./bsp/core_cm0.h ****   __IO uint32_t ISPR[1];                      /*!< (Offset: 0x100) Interrupt Set Pending Register  
 102:./bsp/core_cm0.h ****        uint32_t RESERVED2[31];
 103:./bsp/core_cm0.h ****   __IO uint32_t ICPR[1];                      /*!< (Offset: 0x180) Interrupt Clear Pending Register
 104:./bsp/core_cm0.h ****        uint32_t RESERVED3[31];
 105:./bsp/core_cm0.h ****        uint32_t RESERVED4[64];
 106:./bsp/core_cm0.h ****   __IO uint32_t IPR[8];                       /*!< (Offset: 0x3EC) Interrupt Priority Register     
 107:./bsp/core_cm0.h **** }  NVIC_Type;
 108:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 109:./bsp/core_cm0.h **** 
 110:./bsp/core_cm0.h **** 
 111:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 112:./bsp/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 113:./bsp/core_cm0.h ****   @{
 114:./bsp/core_cm0.h ****  */
 115:./bsp/core_cm0.h **** typedef struct
 116:./bsp/core_cm0.h **** {
 117:./bsp/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 118:./bsp/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 119:./bsp/core_cm0.h ****        uint32_t RESERVED0;                                      
 120:./bsp/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 121:./bsp/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 122:./bsp/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 123:./bsp/core_cm0.h ****        uint32_t RESERVED1;                                      
 124:./bsp/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 125:./bsp/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 126:./bsp/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 127:./bsp/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 128:./bsp/core_cm0.h **** } SCB_Type;                                                
 129:./bsp/core_cm0.h **** 
 130:./bsp/core_cm0.h **** /* SCB CPUID Register Definitions */
 131:./bsp/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 132:./bsp/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 133:./bsp/core_cm0.h **** 
 134:./bsp/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 135:./bsp/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 136:./bsp/core_cm0.h **** 
 137:./bsp/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 138:./bsp/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 139:./bsp/core_cm0.h **** 
 140:./bsp/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 141:./bsp/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 142:./bsp/core_cm0.h **** 
 143:./bsp/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 144:./bsp/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 145:./bsp/core_cm0.h **** 
 146:./bsp/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 147:./bsp/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 148:./bsp/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 149:./bsp/core_cm0.h **** 
 150:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 151:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 152:./bsp/core_cm0.h **** 
 153:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 154:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 155:./bsp/core_cm0.h **** 
 156:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 157:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 158:./bsp/core_cm0.h **** 
 159:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 160:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 161:./bsp/core_cm0.h **** 
 162:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 163:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 164:./bsp/core_cm0.h **** 
 165:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 166:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 167:./bsp/core_cm0.h **** 
 168:./bsp/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 169:./bsp/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 170:./bsp/core_cm0.h **** 
 171:./bsp/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 172:./bsp/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 173:./bsp/core_cm0.h **** 
 174:./bsp/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 175:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 176:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 177:./bsp/core_cm0.h **** 
 178:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 179:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 180:./bsp/core_cm0.h **** 
 181:./bsp/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 182:./bsp/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 183:./bsp/core_cm0.h **** 
 184:./bsp/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 185:./bsp/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 186:./bsp/core_cm0.h **** 
 187:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 188:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 189:./bsp/core_cm0.h **** 
 190:./bsp/core_cm0.h **** /* SCB System Control Register Definitions */
 191:./bsp/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 192:./bsp/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 193:./bsp/core_cm0.h **** 
 194:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 195:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 196:./bsp/core_cm0.h **** 
 197:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 198:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 199:./bsp/core_cm0.h **** 
 200:./bsp/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 201:./bsp/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 202:./bsp/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 203:./bsp/core_cm0.h **** 
 204:./bsp/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 205:./bsp/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 206:./bsp/core_cm0.h **** 
 207:./bsp/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 208:./bsp/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 209:./bsp/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 210:./bsp/core_cm0.h **** 
 211:./bsp/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 212:./bsp/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 213:./bsp/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 214:./bsp/core_cm0.h **** 
 215:./bsp/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 216:./bsp/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 217:./bsp/core_cm0.h **** 
 218:./bsp/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 219:./bsp/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 220:./bsp/core_cm0.h **** 
 221:./bsp/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 222:./bsp/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 223:./bsp/core_cm0.h **** 
 224:./bsp/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 225:./bsp/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 226:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 227:./bsp/core_cm0.h **** 
 228:./bsp/core_cm0.h **** 
 229:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 230:./bsp/core_cm0.h ****   memory mapped structure for SysTick
 231:./bsp/core_cm0.h ****   @{
 232:./bsp/core_cm0.h ****  */
 233:./bsp/core_cm0.h **** typedef struct
 234:./bsp/core_cm0.h **** {
 235:./bsp/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 236:./bsp/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 237:./bsp/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 238:./bsp/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 239:./bsp/core_cm0.h **** } SysTick_Type;
 240:./bsp/core_cm0.h **** 
 241:./bsp/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 242:./bsp/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 243:./bsp/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 244:./bsp/core_cm0.h **** 
 245:./bsp/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 246:./bsp/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 247:./bsp/core_cm0.h **** 
 248:./bsp/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 249:./bsp/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 250:./bsp/core_cm0.h **** 
 251:./bsp/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 252:./bsp/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 253:./bsp/core_cm0.h **** 
 254:./bsp/core_cm0.h **** /* SysTick Reload Register Definitions */
 255:./bsp/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 256:./bsp/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 257:./bsp/core_cm0.h **** 
 258:./bsp/core_cm0.h **** /* SysTick Current Register Definitions */
 259:./bsp/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 260:./bsp/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 261:./bsp/core_cm0.h **** 
 262:./bsp/core_cm0.h **** /* SysTick Calibration Register Definitions */
 263:./bsp/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 264:./bsp/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 265:./bsp/core_cm0.h **** 
 266:./bsp/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 267:./bsp/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 268:./bsp/core_cm0.h **** 
 269:./bsp/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 270:./bsp/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 271:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 272:./bsp/core_cm0.h **** 
 273:./bsp/core_cm0.h **** 
 274:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 275:./bsp/core_cm0.h ****   memory mapped structure for Core Debug Register
 276:./bsp/core_cm0.h ****   @{
 277:./bsp/core_cm0.h ****  */
 278:./bsp/core_cm0.h **** typedef struct
 279:./bsp/core_cm0.h **** {
 280:./bsp/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 281:./bsp/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 282:./bsp/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 283:./bsp/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 284:./bsp/core_cm0.h **** } CoreDebug_Type;
 285:./bsp/core_cm0.h **** 
 286:./bsp/core_cm0.h **** /* Debug Halting Control and Status Register */
 287:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 288:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 289:./bsp/core_cm0.h **** 
 290:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 291:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 292:./bsp/core_cm0.h **** 
 293:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 294:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 295:./bsp/core_cm0.h **** 
 296:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 297:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 298:./bsp/core_cm0.h **** 
 299:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 300:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 301:./bsp/core_cm0.h **** 
 302:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 303:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 304:./bsp/core_cm0.h **** 
 305:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 306:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 307:./bsp/core_cm0.h **** 
 308:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 309:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 310:./bsp/core_cm0.h **** 
 311:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 312:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 313:./bsp/core_cm0.h **** 
 314:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 315:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 316:./bsp/core_cm0.h **** 
 317:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 318:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 319:./bsp/core_cm0.h **** 
 320:./bsp/core_cm0.h **** /* Debug Core Register Selector Register */
 321:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 322:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 323:./bsp/core_cm0.h **** 
 324:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 325:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 326:./bsp/core_cm0.h **** 
 327:./bsp/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 328:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 329:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 330:./bsp/core_cm0.h **** 
 331:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 332:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 333:./bsp/core_cm0.h **** 
 334:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 335:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 336:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 337:./bsp/core_cm0.h **** 
 338:./bsp/core_cm0.h **** 
 339:./bsp/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 340:./bsp/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 341:./bsp/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 342:./bsp/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 343:./bsp/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 344:./bsp/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 345:./bsp/core_cm0.h **** 
 346:./bsp/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 347:./bsp/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 348:./bsp/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 349:./bsp/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 350:./bsp/core_cm0.h **** 
 351:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 352:./bsp/core_cm0.h **** 
 353:./bsp/core_cm0.h **** 
 354:./bsp/core_cm0.h **** /*******************************************************************************
 355:./bsp/core_cm0.h ****  *                Hardware Abstraction Layer
 356:./bsp/core_cm0.h ****  ******************************************************************************/
 357:./bsp/core_cm0.h **** 
 358:./bsp/core_cm0.h **** 
 359:./bsp/core_cm0.h **** #if defined ( __CC_ARM   )
 360:./bsp/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 361:./bsp/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 362:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static __inline
 363:./bsp/core_cm0.h **** #elif defined ( __ICCARM__ )
 364:./bsp/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 365:./bsp/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 366:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static inline
 367:./bsp/core_cm0.h **** #elif defined   (  __GNUC__  )
 368:./bsp/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 369:./bsp/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 370:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static inline
 371:./bsp/core_cm0.h **** #elif defined   (  __TASKING__  )
 372:./bsp/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 373:./bsp/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 374:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static inline
 375:./bsp/core_cm0.h **** #endif
 376:./bsp/core_cm0.h **** 
 377:./bsp/core_cm0.h **** 
 378:./bsp/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 379:./bsp/core_cm0.h **** 
 380:./bsp/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 381:./bsp/core_cm0.h **** /* ARM armcc specific functions */
 382:./bsp/core_cm0.h **** 
 383:./bsp/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 384:./bsp/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 385:./bsp/core_cm0.h **** 
 386:./bsp/core_cm0.h **** #define __NOP                             __nop
 387:./bsp/core_cm0.h **** #define __WFI                             __wfi
 388:./bsp/core_cm0.h **** #define __WFE                             __wfe
 389:./bsp/core_cm0.h **** #define __SEV                             __sev
 390:./bsp/core_cm0.h **** #define __ISB()                           __isb(0)
 391:./bsp/core_cm0.h **** #define __DSB()                           __dsb(0)
 392:./bsp/core_cm0.h **** #define __DMB()                           __dmb(0)
 393:./bsp/core_cm0.h **** #define __REV                             __rev
 394:./bsp/core_cm0.h **** 
 395:./bsp/core_cm0.h **** 
 396:./bsp/core_cm0.h **** /* intrinsic void __enable_irq();     */
 397:./bsp/core_cm0.h **** /* intrinsic void __disable_irq();    */
 398:./bsp/core_cm0.h **** 
 399:./bsp/core_cm0.h **** 
 400:./bsp/core_cm0.h **** /**
 401:./bsp/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 402:./bsp/core_cm0.h ****  *
 403:./bsp/core_cm0.h ****  * @return ProcessStackPointer
 404:./bsp/core_cm0.h ****  *
 405:./bsp/core_cm0.h ****  * Return the actual process stack pointer
 406:./bsp/core_cm0.h ****  */
 407:./bsp/core_cm0.h **** extern uint32_t __get_PSP(void);
 408:./bsp/core_cm0.h **** 
 409:./bsp/core_cm0.h **** /**
 410:./bsp/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 411:./bsp/core_cm0.h ****  *
 412:./bsp/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 413:./bsp/core_cm0.h ****  *
 414:./bsp/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 415:./bsp/core_cm0.h ****  * (process stack pointer) Cortex processor register
 416:./bsp/core_cm0.h ****  */
 417:./bsp/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 418:./bsp/core_cm0.h **** 
 419:./bsp/core_cm0.h **** /**
 420:./bsp/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 421:./bsp/core_cm0.h ****  *
 422:./bsp/core_cm0.h ****  * @return Main Stack Pointer
 423:./bsp/core_cm0.h ****  *
 424:./bsp/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 425:./bsp/core_cm0.h ****  * Cortex processor register
 426:./bsp/core_cm0.h ****  */
 427:./bsp/core_cm0.h **** extern uint32_t __get_MSP(void);
 428:./bsp/core_cm0.h **** 
 429:./bsp/core_cm0.h **** /**
 430:./bsp/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 431:./bsp/core_cm0.h ****  *
 432:./bsp/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 433:./bsp/core_cm0.h ****  *
 434:./bsp/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 435:./bsp/core_cm0.h ****  * (main stack pointer) Cortex processor register
 436:./bsp/core_cm0.h ****  */
 437:./bsp/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 438:./bsp/core_cm0.h **** 
 439:./bsp/core_cm0.h **** /**
 440:./bsp/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 441:./bsp/core_cm0.h ****  *
 442:./bsp/core_cm0.h ****  * @param   value  value to reverse
 443:./bsp/core_cm0.h ****  * @return         reversed value
 444:./bsp/core_cm0.h ****  *
 445:./bsp/core_cm0.h ****  * Reverse byte order in unsigned short value
 446:./bsp/core_cm0.h ****  */
 447:./bsp/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 448:./bsp/core_cm0.h **** 
 449:./bsp/core_cm0.h **** /**
 450:./bsp/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 451:./bsp/core_cm0.h ****  *
 452:./bsp/core_cm0.h ****  * @param   value  value to reverse
 453:./bsp/core_cm0.h ****  * @return         reversed value
 454:./bsp/core_cm0.h ****  *
 455:./bsp/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 456:./bsp/core_cm0.h ****  */
 457:./bsp/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 458:./bsp/core_cm0.h **** 
 459:./bsp/core_cm0.h **** 
 460:./bsp/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 461:./bsp/core_cm0.h **** 
 462:./bsp/core_cm0.h **** /**
 463:./bsp/core_cm0.h ****  * @brief  Return the Priority Mask value
 464:./bsp/core_cm0.h ****  *
 465:./bsp/core_cm0.h ****  * @return PriMask
 466:./bsp/core_cm0.h ****  *
 467:./bsp/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 468:./bsp/core_cm0.h ****  */
 469:./bsp/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 470:./bsp/core_cm0.h **** 
 471:./bsp/core_cm0.h **** /**
 472:./bsp/core_cm0.h ****  * @brief  Set the Priority Mask value
 473:./bsp/core_cm0.h ****  *
 474:./bsp/core_cm0.h ****  * @param   priMask  PriMask
 475:./bsp/core_cm0.h ****  *
 476:./bsp/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 477:./bsp/core_cm0.h ****  */
 478:./bsp/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 479:./bsp/core_cm0.h **** 
 480:./bsp/core_cm0.h **** /**
 481:./bsp/core_cm0.h ****  * @brief  Return the Control Register value
 482:./bsp/core_cm0.h ****  * 
 483:./bsp/core_cm0.h ****  * @return Control value
 484:./bsp/core_cm0.h ****  *
 485:./bsp/core_cm0.h ****  * Return the content of the control register
 486:./bsp/core_cm0.h ****  */
 487:./bsp/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 488:./bsp/core_cm0.h **** 
 489:./bsp/core_cm0.h **** /**
 490:./bsp/core_cm0.h ****  * @brief  Set the Control Register value
 491:./bsp/core_cm0.h ****  *
 492:./bsp/core_cm0.h ****  * @param  control  Control value
 493:./bsp/core_cm0.h ****  *
 494:./bsp/core_cm0.h ****  * Set the control register
 495:./bsp/core_cm0.h ****  */
 496:./bsp/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 497:./bsp/core_cm0.h **** 
 498:./bsp/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 499:./bsp/core_cm0.h **** 
 500:./bsp/core_cm0.h **** 
 501:./bsp/core_cm0.h **** /**
 502:./bsp/core_cm0.h ****  * @brief  Return the Priority Mask value
 503:./bsp/core_cm0.h ****  *
 504:./bsp/core_cm0.h ****  * @return PriMask
 505:./bsp/core_cm0.h ****  *
 506:./bsp/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 507:./bsp/core_cm0.h ****  */
 508:./bsp/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 509:./bsp/core_cm0.h **** {
 510:./bsp/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 511:./bsp/core_cm0.h ****   return(__regPriMask);
 512:./bsp/core_cm0.h **** }
 513:./bsp/core_cm0.h **** 
 514:./bsp/core_cm0.h **** /**
 515:./bsp/core_cm0.h ****  * @brief  Set the Priority Mask value
 516:./bsp/core_cm0.h ****  *
 517:./bsp/core_cm0.h ****  * @param  priMask  PriMask
 518:./bsp/core_cm0.h ****  *
 519:./bsp/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 520:./bsp/core_cm0.h ****  */
 521:./bsp/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 522:./bsp/core_cm0.h **** {
 523:./bsp/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 524:./bsp/core_cm0.h ****   __regPriMask = (priMask);
 525:./bsp/core_cm0.h **** }
 526:./bsp/core_cm0.h **** 
 527:./bsp/core_cm0.h **** /**
 528:./bsp/core_cm0.h ****  * @brief  Return the Control Register value
 529:./bsp/core_cm0.h ****  * 
 530:./bsp/core_cm0.h ****  * @return Control value
 531:./bsp/core_cm0.h ****  *
 532:./bsp/core_cm0.h ****  * Return the content of the control register
 533:./bsp/core_cm0.h ****  */
 534:./bsp/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 535:./bsp/core_cm0.h **** {
 536:./bsp/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 537:./bsp/core_cm0.h ****   return(__regControl);
 538:./bsp/core_cm0.h **** }
 539:./bsp/core_cm0.h **** 
 540:./bsp/core_cm0.h **** /**
 541:./bsp/core_cm0.h ****  * @brief  Set the Control Register value
 542:./bsp/core_cm0.h ****  *
 543:./bsp/core_cm0.h ****  * @param  control  Control value
 544:./bsp/core_cm0.h ****  *
 545:./bsp/core_cm0.h ****  * Set the control register
 546:./bsp/core_cm0.h ****  */
 547:./bsp/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 548:./bsp/core_cm0.h **** {
 549:./bsp/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 550:./bsp/core_cm0.h ****   __regControl = control;
 551:./bsp/core_cm0.h **** }
 552:./bsp/core_cm0.h **** 
 553:./bsp/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 554:./bsp/core_cm0.h **** 
 555:./bsp/core_cm0.h **** 
 556:./bsp/core_cm0.h **** 
 557:./bsp/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 558:./bsp/core_cm0.h **** /* IAR iccarm specific functions */
 559:./bsp/core_cm0.h **** 
 560:./bsp/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 561:./bsp/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 562:./bsp/core_cm0.h **** 
 563:./bsp/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 564:./bsp/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 565:./bsp/core_cm0.h **** 
 566:./bsp/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 567:./bsp/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 568:./bsp/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 569:./bsp/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 570:./bsp/core_cm0.h **** 
 571:./bsp/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 572:./bsp/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 573:./bsp/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 574:./bsp/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 575:./bsp/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 576:./bsp/core_cm0.h **** 
 577:./bsp/core_cm0.h **** 
 578:./bsp/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 579:./bsp/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 580:./bsp/core_cm0.h **** 
 581:./bsp/core_cm0.h **** 
 582:./bsp/core_cm0.h **** /**
 583:./bsp/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 584:./bsp/core_cm0.h ****  *
 585:./bsp/core_cm0.h ****  * @return ProcessStackPointer
 586:./bsp/core_cm0.h ****  *
 587:./bsp/core_cm0.h ****  * Return the actual process stack pointer
 588:./bsp/core_cm0.h ****  */
 589:./bsp/core_cm0.h **** extern uint32_t __get_PSP(void);
 590:./bsp/core_cm0.h **** 
 591:./bsp/core_cm0.h **** /**
 592:./bsp/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 593:./bsp/core_cm0.h ****  *
 594:./bsp/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 595:./bsp/core_cm0.h ****  *
 596:./bsp/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 597:./bsp/core_cm0.h ****  * (process stack pointer) Cortex processor register
 598:./bsp/core_cm0.h ****  */
 599:./bsp/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 600:./bsp/core_cm0.h **** 
 601:./bsp/core_cm0.h **** /**
 602:./bsp/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 603:./bsp/core_cm0.h ****  *
 604:./bsp/core_cm0.h ****  * @return Main Stack Pointer
 605:./bsp/core_cm0.h ****  *
 606:./bsp/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 607:./bsp/core_cm0.h ****  * Cortex processor register
 608:./bsp/core_cm0.h ****  */
 609:./bsp/core_cm0.h **** extern uint32_t __get_MSP(void);
 610:./bsp/core_cm0.h **** 
 611:./bsp/core_cm0.h **** /**
 612:./bsp/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 613:./bsp/core_cm0.h ****  *
 614:./bsp/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 615:./bsp/core_cm0.h ****  *
 616:./bsp/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 617:./bsp/core_cm0.h ****  * (main stack pointer) Cortex processor register
 618:./bsp/core_cm0.h ****  */
 619:./bsp/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 620:./bsp/core_cm0.h **** 
 621:./bsp/core_cm0.h **** /**
 622:./bsp/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 623:./bsp/core_cm0.h ****  *
 624:./bsp/core_cm0.h ****  * @param  value  value to reverse
 625:./bsp/core_cm0.h ****  * @return        reversed value
 626:./bsp/core_cm0.h ****  *
 627:./bsp/core_cm0.h ****  * Reverse byte order in unsigned short value
 628:./bsp/core_cm0.h ****  */
 629:./bsp/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 630:./bsp/core_cm0.h **** 
 631:./bsp/core_cm0.h **** 
 632:./bsp/core_cm0.h **** 
 633:./bsp/core_cm0.h **** 
 634:./bsp/core_cm0.h **** 
 635:./bsp/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 636:./bsp/core_cm0.h **** /* GNU gcc specific functions */
 637:./bsp/core_cm0.h **** 
 638:./bsp/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 639:./bsp/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 640:./bsp/core_cm0.h **** 
 641:./bsp/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 642:./bsp/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 643:./bsp/core_cm0.h **** 
 644:./bsp/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 645:./bsp/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 646:./bsp/core_cm0.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
 647:./bsp/core_cm0.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
 648:./bsp/core_cm0.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
 649:./bsp/core_cm0.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
 650:./bsp/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
 651:./bsp/core_cm0.h **** 
 652:./bsp/core_cm0.h **** 
 653:./bsp/core_cm0.h **** /**
 654:./bsp/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 655:./bsp/core_cm0.h ****  *
 656:./bsp/core_cm0.h ****  * @return ProcessStackPointer
 657:./bsp/core_cm0.h ****  *
 658:./bsp/core_cm0.h ****  * Return the actual process stack pointer
 659:./bsp/core_cm0.h ****  */
 660:./bsp/core_cm0.h **** extern uint32_t __get_PSP(void);
 661:./bsp/core_cm0.h **** 
 662:./bsp/core_cm0.h **** /**
 663:./bsp/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 664:./bsp/core_cm0.h ****  *
 665:./bsp/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 666:./bsp/core_cm0.h ****  *
 667:./bsp/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 668:./bsp/core_cm0.h ****  * (process stack pointer) Cortex processor register
 669:./bsp/core_cm0.h ****  */
 670:./bsp/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 671:./bsp/core_cm0.h **** 
 672:./bsp/core_cm0.h **** /**
 673:./bsp/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 674:./bsp/core_cm0.h ****  *
 675:./bsp/core_cm0.h ****  * @return Main Stack Pointer
 676:./bsp/core_cm0.h ****  *
 677:./bsp/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 678:./bsp/core_cm0.h ****  * Cortex processor register
 679:./bsp/core_cm0.h ****  */
 680:./bsp/core_cm0.h **** extern uint32_t __get_MSP(void);
 681:./bsp/core_cm0.h **** 
 682:./bsp/core_cm0.h **** /**
 683:./bsp/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 684:./bsp/core_cm0.h ****  *
 685:./bsp/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 686:./bsp/core_cm0.h ****  *
 687:./bsp/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 688:./bsp/core_cm0.h ****  * (main stack pointer) Cortex processor register
 689:./bsp/core_cm0.h ****  */
 690:./bsp/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 691:./bsp/core_cm0.h **** 
 692:./bsp/core_cm0.h **** /**
 693:./bsp/core_cm0.h ****  * @brief  Return the Priority Mask value
 694:./bsp/core_cm0.h ****  *
 695:./bsp/core_cm0.h ****  * @return PriMask
 696:./bsp/core_cm0.h ****  *
 697:./bsp/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 698:./bsp/core_cm0.h ****  */
 699:./bsp/core_cm0.h **** extern uint32_t  __get_PRIMASK(void);
 700:./bsp/core_cm0.h **** 
 701:./bsp/core_cm0.h **** /**
 702:./bsp/core_cm0.h ****  * @brief  Set the Priority Mask value
 703:./bsp/core_cm0.h ****  *
 704:./bsp/core_cm0.h ****  * @param  priMask  PriMask
 705:./bsp/core_cm0.h ****  *
 706:./bsp/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 707:./bsp/core_cm0.h ****  */
 708:./bsp/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 709:./bsp/core_cm0.h **** 
 710:./bsp/core_cm0.h **** /**
 711:./bsp/core_cm0.h ****  * @brief  Return the Control Register value
 712:./bsp/core_cm0.h **** * 
 713:./bsp/core_cm0.h **** *  @return Control value
 714:./bsp/core_cm0.h ****  *
 715:./bsp/core_cm0.h ****  * Return the content of the control register
 716:./bsp/core_cm0.h ****  */
 717:./bsp/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 718:./bsp/core_cm0.h **** 
 719:./bsp/core_cm0.h **** /**
 720:./bsp/core_cm0.h ****  * @brief  Set the Control Register value
 721:./bsp/core_cm0.h ****  *
 722:./bsp/core_cm0.h ****  * @param  control  Control value
 723:./bsp/core_cm0.h ****  *
 724:./bsp/core_cm0.h ****  * Set the control register
 725:./bsp/core_cm0.h ****  */
 726:./bsp/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 727:./bsp/core_cm0.h **** 
 728:./bsp/core_cm0.h **** /**
 729:./bsp/core_cm0.h ****  * @brief  Reverse byte order in integer value
 730:./bsp/core_cm0.h ****  *
 731:./bsp/core_cm0.h ****  * @param  value  value to reverse
 732:./bsp/core_cm0.h ****  * @return        reversed value
 733:./bsp/core_cm0.h ****  *
 734:./bsp/core_cm0.h ****  * Reverse byte order in integer value
 735:./bsp/core_cm0.h ****  */
 736:./bsp/core_cm0.h **** extern uint32_t __REV(uint32_t value);
 737:./bsp/core_cm0.h **** 
 738:./bsp/core_cm0.h **** /**
 739:./bsp/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 740:./bsp/core_cm0.h ****  *
 741:./bsp/core_cm0.h ****  * @param  value  value to reverse
 742:./bsp/core_cm0.h ****  * @return        reversed value
 743:./bsp/core_cm0.h ****  *
 744:./bsp/core_cm0.h ****  * Reverse byte order in unsigned short value
 745:./bsp/core_cm0.h ****  */
 746:./bsp/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 747:./bsp/core_cm0.h **** 
 748:./bsp/core_cm0.h **** /**
 749:./bsp/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 750:./bsp/core_cm0.h ****  *
 751:./bsp/core_cm0.h ****  * @param  value  value to reverse
 752:./bsp/core_cm0.h ****  * @return        reversed value
 753:./bsp/core_cm0.h ****  *
 754:./bsp/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 755:./bsp/core_cm0.h ****  */
 756:./bsp/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 757:./bsp/core_cm0.h **** 
 758:./bsp/core_cm0.h **** 
 759:./bsp/core_cm0.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
 760:./bsp/core_cm0.h **** /* TASKING carm specific functions */
 761:./bsp/core_cm0.h **** 
 762:./bsp/core_cm0.h **** /*
 763:./bsp/core_cm0.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
 764:./bsp/core_cm0.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
 765:./bsp/core_cm0.h ****  * Including the CMSIS ones.
 766:./bsp/core_cm0.h ****  */
 767:./bsp/core_cm0.h **** 
 768:./bsp/core_cm0.h **** #endif
 769:./bsp/core_cm0.h **** 
 770:./bsp/core_cm0.h **** 
 771:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_Core_FunctionInterface CMSIS CM0 Core Function Interface
 772:./bsp/core_cm0.h ****   Core  Function Interface containing:
 773:./bsp/core_cm0.h ****   - Core NVIC Functions
 774:./bsp/core_cm0.h ****   - Core SysTick Functions
 775:./bsp/core_cm0.h ****   - Core Reset Functions
 776:./bsp/core_cm0.h **** */
 777:./bsp/core_cm0.h **** /*@{*/
 778:./bsp/core_cm0.h **** 
 779:./bsp/core_cm0.h **** /* ##########################   NVIC functions  #################################### */
 780:./bsp/core_cm0.h **** 
 781:./bsp/core_cm0.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 782:./bsp/core_cm0.h **** /* The following MACROS handle generation of the register offset and byte masks */
 783:./bsp/core_cm0.h **** #define _BIT_SHIFT(IRQn)         (  (((uint32_t)(IRQn)       )    &  0x03) * 8 )
 784:./bsp/core_cm0.h **** #define _SHP_IDX(IRQn)           ( ((((uint32_t)(IRQn) & 0x0F)-8) >>    2)     )
 785:./bsp/core_cm0.h **** #define _IP_IDX(IRQn)            (   ((uint32_t)(IRQn)            >>    2)     )
 786:./bsp/core_cm0.h **** 
 787:./bsp/core_cm0.h **** 
 788:./bsp/core_cm0.h **** /**
 789:./bsp/core_cm0.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
 790:./bsp/core_cm0.h ****  *
 791:./bsp/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to enable
 792:./bsp/core_cm0.h ****  *
 793:./bsp/core_cm0.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
 794:./bsp/core_cm0.h ****  * The interrupt number cannot be a negative value.
 795:./bsp/core_cm0.h ****  */
 796:./bsp/core_cm0.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 797:./bsp/core_cm0.h **** {
 798:./bsp/core_cm0.h ****   NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
 799:./bsp/core_cm0.h **** }
 800:./bsp/core_cm0.h **** 
 801:./bsp/core_cm0.h **** /**
 802:./bsp/core_cm0.h ****  * @brief  Disable the interrupt line for external interrupt specified
 803:./bsp/core_cm0.h ****  * 
 804:./bsp/core_cm0.h ****  * @param  IRQn   The positive number of the external interrupt to disable
 805:./bsp/core_cm0.h ****  * 
 806:./bsp/core_cm0.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
 807:./bsp/core_cm0.h ****  * The interrupt number cannot be a negative value.
 808:./bsp/core_cm0.h ****  */
 809:./bsp/core_cm0.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
 810:./bsp/core_cm0.h **** {
 811:./bsp/core_cm0.h ****   NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
 812:./bsp/core_cm0.h **** }
 813:./bsp/core_cm0.h **** 
 814:./bsp/core_cm0.h **** /**
 815:./bsp/core_cm0.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
 816:./bsp/core_cm0.h ****  * 
 817:./bsp/core_cm0.h ****  * @param  IRQn    The number of the device specifc interrupt
 818:./bsp/core_cm0.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
 819:./bsp/core_cm0.h ****  *
 820:./bsp/core_cm0.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
 821:./bsp/core_cm0.h ****  * otherwise it returns 0
 822:./bsp/core_cm0.h ****  */
 823:./bsp/core_cm0.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
 824:./bsp/core_cm0.h **** {
 825:./bsp/core_cm0.h ****   return((uint32_t) ((NVIC->ISPR[0] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /* Return 1 if pendi
 826:./bsp/core_cm0.h **** }
 827:./bsp/core_cm0.h **** 
 828:./bsp/core_cm0.h **** /**
 829:./bsp/core_cm0.h ****  * @brief  Set the pending bit for an external interrupt
 830:./bsp/core_cm0.h ****  * 
 831:./bsp/core_cm0.h ****  * @param  IRQn    The number of the interrupt for set pending
 832:./bsp/core_cm0.h ****  *
 833:./bsp/core_cm0.h ****  * Set the pending bit for the specified interrupt.
 834:./bsp/core_cm0.h ****  * The interrupt number cannot be a negative value.
 835:./bsp/core_cm0.h ****  */
 836:./bsp/core_cm0.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
 837:./bsp/core_cm0.h **** {
 838:./bsp/core_cm0.h ****   NVIC->ISPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending */
 839:./bsp/core_cm0.h **** }
 840:./bsp/core_cm0.h **** 
 841:./bsp/core_cm0.h **** /**
 842:./bsp/core_cm0.h ****  * @brief  Clear the pending bit for an external interrupt
 843:./bsp/core_cm0.h ****  *
 844:./bsp/core_cm0.h ****  * @param  IRQn    The number of the interrupt for clear pending
 845:./bsp/core_cm0.h ****  *
 846:./bsp/core_cm0.h ****  * Clear the pending bit for the specified interrupt. 
 847:./bsp/core_cm0.h ****  * The interrupt number cannot be a negative value.
 848:./bsp/core_cm0.h ****  */
 849:./bsp/core_cm0.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
 850:./bsp/core_cm0.h **** {
 851:./bsp/core_cm0.h ****   NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
 852:./bsp/core_cm0.h **** }
 853:./bsp/core_cm0.h **** 
 854:./bsp/core_cm0.h **** /**
 855:./bsp/core_cm0.h ****  * @brief  Set the priority for an interrupt
 856:./bsp/core_cm0.h ****  *
 857:./bsp/core_cm0.h ****  * @param  IRQn      The number of the interrupt for set priority
 858:./bsp/core_cm0.h ****  * @param  priority  The priority to set
 859:./bsp/core_cm0.h ****  *
 860:./bsp/core_cm0.h ****  * Set the priority for the specified interrupt. The interrupt 
 861:./bsp/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 862:./bsp/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 863:./bsp/core_cm0.h ****  *
 864:./bsp/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 865:./bsp/core_cm0.h ****  */
 866:./bsp/core_cm0.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
 867:./bsp/core_cm0.h **** {
 868:./bsp/core_cm0.h ****   if(IRQn < 0) {
 869:./bsp/core_cm0.h ****     SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) | 
 870:./bsp/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 871:./bsp/core_cm0.h ****   else {
 872:./bsp/core_cm0.h ****     NVIC->IPR[_IP_IDX(IRQn)] = (NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 873:./bsp/core_cm0.h ****         (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 874:./bsp/core_cm0.h **** }
 875:./bsp/core_cm0.h **** 
 876:./bsp/core_cm0.h **** /**
 877:./bsp/core_cm0.h ****  * @brief  Read the priority for an interrupt
 878:./bsp/core_cm0.h ****  *
 879:./bsp/core_cm0.h ****  * @param  IRQn      The number of the interrupt for get priority
 880:./bsp/core_cm0.h ****  * @return           The priority for the interrupt
 881:./bsp/core_cm0.h ****  *
 882:./bsp/core_cm0.h ****  * Read the priority for the specified interrupt. The interrupt 
 883:./bsp/core_cm0.h ****  * number can be positive to specify an external (device specific) 
 884:./bsp/core_cm0.h ****  * interrupt, or negative to specify an internal (core) interrupt.
 885:./bsp/core_cm0.h ****  *
 886:./bsp/core_cm0.h ****  * The returned priority value is automatically aligned to the implemented
 887:./bsp/core_cm0.h ****  * priority bits of the microcontroller.
 888:./bsp/core_cm0.h ****  *
 889:./bsp/core_cm0.h ****  * Note: The priority cannot be set for every core interrupt.
 890:./bsp/core_cm0.h ****  */
 891:./bsp/core_cm0.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
 892:./bsp/core_cm0.h **** {
 893:./bsp/core_cm0.h **** 
 894:./bsp/core_cm0.h ****   if(IRQn < 0) {
 895:./bsp/core_cm0.h ****     return((uint32_t)((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 896:./bsp/core_cm0.h ****   else {
 897:./bsp/core_cm0.h ****     return((uint32_t)((NVIC->IPR[_IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) >> (8 - __NVIC_PRIO_BITS))); 
 898:./bsp/core_cm0.h **** }
 899:./bsp/core_cm0.h **** 
 900:./bsp/core_cm0.h **** 
 901:./bsp/core_cm0.h **** 
 902:./bsp/core_cm0.h **** /* ##################################    SysTick function  ########################################
 903:./bsp/core_cm0.h **** 
 904:./bsp/core_cm0.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
 905:./bsp/core_cm0.h **** 
 906:./bsp/core_cm0.h **** /**
 907:./bsp/core_cm0.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
 908:./bsp/core_cm0.h ****  *
 909:./bsp/core_cm0.h ****  * @param   ticks   number of ticks between two interrupts
 910:./bsp/core_cm0.h ****  * @return  1 = failed, 0 = successful
 911:./bsp/core_cm0.h ****  *
 912:./bsp/core_cm0.h ****  * Initialise the system tick timer and its interrupt and start the
 913:./bsp/core_cm0.h ****  * system tick timer / counter in free running mode to generate 
 914:./bsp/core_cm0.h ****  * periodical interrupts.
 915:./bsp/core_cm0.h ****  */
 916:./bsp/core_cm0.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
 917:./bsp/core_cm0.h **** { 
 918:./bsp/core_cm0.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 919:./bsp/core_cm0.h ****                                                                
 920:./bsp/core_cm0.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 921:./bsp/core_cm0.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 922:./bsp/core_cm0.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 923:./bsp/core_cm0.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
 924:./bsp/core_cm0.h ****                    SysTick_CTRL_TICKINT_Msk   | 
 925:./bsp/core_cm0.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 926:./bsp/core_cm0.h ****   return (0);                                                  /* Function successful */
 927:./bsp/core_cm0.h **** }
 928:./bsp/core_cm0.h **** 
 929:./bsp/core_cm0.h **** #endif
 930:./bsp/core_cm0.h **** 
 931:./bsp/core_cm0.h **** 
 932:./bsp/core_cm0.h **** 
 933:./bsp/core_cm0.h **** 
 934:./bsp/core_cm0.h **** /* ##################################    Reset function  ##########################################
 935:./bsp/core_cm0.h **** 
 936:./bsp/core_cm0.h **** /**
 937:./bsp/core_cm0.h ****  * @brief  Initiate a system reset request.
 938:./bsp/core_cm0.h ****  *
 939:./bsp/core_cm0.h ****  * Initiate a system reset request to reset the MCU
 940:./bsp/core_cm0.h ****  */
 941:./bsp/core_cm0.h **** static __INLINE void NVIC_SystemReset(void)
 942:./bsp/core_cm0.h **** {
 943:./bsp/core_cm0.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      | 
  63              		.loc 2 943 0
  64 0000 024A     		ldr	r2, .L5
  65 0002 034B     		ldr	r3, .L5+4
  66 0004 DA60     		str	r2, [r3, #12]
  67              	.LBB10:
  68              	.LBB11:
 649:./bsp/core_cm0.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
  69              		.loc 2 649 0
  70              		.syntax divided
  71              	@ 649 "./bsp/core_cm0.h" 1
  72 0006 BFF34F8F 		dsb
  73              	@ 0 "" 2
  74              		.thumb
  75              		.syntax unified
  76              	.L3:
  77 000a FEE7     		b	.L3
  78              	.L6:
  79              		.align	2
  80              	.L5:
  81 000c 0400FA05 		.word	100270084
  82 0010 00ED00E0 		.word	-536810240
  83              	.LBE11:
  84              	.LBE10:
  85              	.LBE9:
  86              	.LBE8:
  87              		.cfi_endproc
  88              	.LFE60:
  90              		.text
  91              	.Letext0:
  92              		.file 3 "d:\\wingcc\\arm-none-eabi\\include\\machine\\_default_types.h"
  93              		.file 4 "d:\\wingcc\\arm-none-eabi\\include\\sys\\_stdint.h"
  94              		.file 5 "./bsp/system_NUC131.h"
DEFINED SYMBOLS
                            *ABS*:00000000 bsp.c
C:\Users\beyond\AppData\Local\Temp\cchkUFLf.s:20     .text.BSP_Init:00000000 $t
C:\Users\beyond\AppData\Local\Temp\cchkUFLf.s:25     .text.BSP_Init:00000000 BSP_Init
C:\Users\beyond\AppData\Local\Temp\cchkUFLf.s:47     .text.BSP_Reset:00000000 $t
C:\Users\beyond\AppData\Local\Temp\cchkUFLf.s:52     .text.BSP_Reset:00000000 BSP_Reset
C:\Users\beyond\AppData\Local\Temp\cchkUFLf.s:81     .text.BSP_Reset:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemInit
