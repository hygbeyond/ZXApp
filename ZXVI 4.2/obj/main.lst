   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Can_Task,"ax",%progbits
  20              		.align	1
  21              		.global	Can_Task
  22              		.code	16
  23              		.thumb_func
  25              	Can_Task:
  26              	.LFB62:
  27              		.file 1 "./app/main.c"
   1:./app/main.c  **** /*
   2:./app/main.c  **** ********************************************************************************
   3:./app/main.c  **** **				                   MicroOS(ARM)
   4:./app/main.c  **** **                      The Real-Time Kernel(For ARM cortex-m0)
   5:./app/main.c  **** **
   6:./app/main.c  **** **                     (c) Copyright 2006-2007, hygbeyond
   7:./app/main.c  **** **                             All Rights Reserved
   8:./app/main.c  **** **
   9:./app/main.c  **** **                                    V0.9
  10:./app/main.c  **** **                       基于周立功TinyM0  LPC1114/301
  11:./app/main.c  **** ********************************************************************************
  12:./app/main.c  **** **创 建 人：胡勇刚
  13:./app/main.c  **** **文 件 名：main.c
  14:./app/main.c  **** **创建日期：2010-11-23
  15:./app/main.c  **** **描    述：移植到LPC1114，实现了任务切换，shell接口。
  16:./app/main.c  **** **  main源代码，实现了基于MicroOS（ARM）的任务函数。
  17:./app/main.c  **** **  OSTASK(Dis_Task);  显示处理任务
  18:./app/main.c  **** **  OSTASK(Key_Task);  键盘扫描任务
  19:./app/main.c  **** **  OSTASK(BJ_Task);   报警处理任务
  20:./app/main.c  **** **  OSTASK(GetValue_Task);  采集数据任务
  21:./app/main.c  **** ********************************************************************************
  22:./app/main.c  **** ********************************************************************************
  23:./app/main.c  **** */
  24:./app/main.c  **** 
  25:./app/main.c  **** #include "MicroOS.h"
  26:./app/main.c  **** 
  27:./app/main.c  **** #include "../drive/nuc_can.h"
  28:./app/main.c  **** #include "app_cfg.h"
  29:./app/main.c  **** #include "bsp.h"
  30:./app/main.c  **** #include "hardware.h"
  31:./app/main.c  **** #include "protocol.h"
  32:./app/main.c  **** #include "data.h"
  33:./app/main.c  **** #include "user.h"
  34:./app/main.c  **** #include "nuc_wdt.h"
  35:./app/main.c  **** 
  36:./app/main.c  **** 
  37:./app/main.c  **** 
  38:./app/main.c  **** 
  39:./app/main.c  **** /**************************************************************************************************
  40:./app/main.c  ****   宏定义
  41:./app/main.c  **** ***************************************************************************************************
  42:./app/main.c  **** /*
  43:./app/main.c  ****  * 任务优先级定义
  44:./app/main.c  ****  */
  45:./app/main.c  **** #define LCD_PRO             7
  46:./app/main.c  **** #define SHELL_PRO           6
  47:./app/main.c  **** #define DIS_PRO             5
  48:./app/main.c  **** #define CANTRANS_PRO        4
  49:./app/main.c  **** #define BJ_PRO              3
  50:./app/main.c  **** #define GET_PRO             2
  51:./app/main.c  **** #define FILE_PRO            1
  52:./app/main.c  **** #define KEY_PRO             0
  53:./app/main.c  **** 
  54:./app/main.c  **** 
  55:./app/main.c  **** OSTASK_STK( Dis,   256 );     /* 液晶显示，人机交互 */
  56:./app/main.c  **** OSTASK_STK( Can,   192 );     /* can总线处理        */
  57:./app/main.c  **** OSTASK_STK( DataCJ, 96 );     /*                    */
  58:./app/main.c  **** 
  59:./app/main.c  **** uint16   MemStart __NOINIT__;
  60:./app/main.c  **** 
  61:./app/main.c  **** #define VERSION_STR    __stringify(HNAME) " " __stringify(VERSION) "." __stringify( PATCHLEVEL )
  62:./app/main.c  **** 
  63:./app/main.c  **** //******************************************************************************
  64:./app/main.c  **** void Init_Devices(void);
  65:./app/main.c  **** extern void GotoISP(void );
  66:./app/main.c  **** void data_cmd( void );
  67:./app/main.c  **** 
  68:./app/main.c  **** static int printk_put( int ch, FILE * p_file)
  69:./app/main.c  **** {
  70:./app/main.c  ****     if( ch == '\n' )
  71:./app/main.c  ****         Uart_SendByte( '\r' );
  72:./app/main.c  ****     Uart_SendByte( ch );
  73:./app/main.c  ****     return 0;
  74:./app/main.c  **** }
  75:./app/main.c  **** 
  76:./app/main.c  **** 
  77:./app/main.c  **** int main (void)
  78:./app/main.c  **** {
  79:./app/main.c  **** 	OSInit();
  80:./app/main.c  ****     OSTASK_CREATE( Dis, 5 );
  81:./app/main.c  ****     OSStart();
  82:./app/main.c  **** 	return 0;
  83:./app/main.c  **** }
  84:./app/main.c  **** 
  85:./app/main.c  **** /*
  86:./app/main.c  ****  * 功能: shell接口
  87:./app/main.c  ****  */
  88:./app/main.c  **** void shell(int);
  89:./app/main.c  **** #define LCDLED_DLY        (30*2)                       /*设置液晶背光显示时间*/
  90:./app/main.c  **** void Dis_Task(void)
  91:./app/main.c  **** {
  92:./app/main.c  ****     int dly;
  93:./app/main.c  **** 
  94:./app/main.c  ****     int delay;
  95:./app/main.c  ****     Init_Devices();
  96:./app/main.c  **** 
  97:./app/main.c  ****     Pro_Init();
  98:./app/main.c  ****     UsrInit();
  99:./app/main.c  **** 
 100:./app/main.c  ****     if(MemStart != 0x55AA)
 101:./app/main.c  ****     {
 102:./app/main.c  ****         Data_Init(1);
 103:./app/main.c  ****         MemStart = 0x55AA;
 104:./app/main.c  ****     }else
 105:./app/main.c  ****     	Data_Init(0);
 106:./app/main.c  **** 
 107:./app/main.c  ****     dly = OSTASK_CREATE( Can,   0 );
 108:./app/main.c  ****     ASSERT(dly == OS_NO_ERR);
 109:./app/main.c  ****    
 110:./app/main.c  ****     dly = OSTASK_CREATE( DataCJ, 4 );
 111:./app/main.c  ****     ASSERT( dly == OS_NO_ERR );
 112:./app/main.c  **** 
 113:./app/main.c  ****     dly = HZ/10;
 114:./app/main.c  **** 
 115:./app/main.c  ****     TRACE( "\n%s\n"
 116:./app/main.c  ****             VERSION_STR \
 117:./app/main.c  ****             "\ncmd>"
 118:./app/main.c  ****             , GetObjName( pUsrCfg->type )
 119:./app/main.c  ****           );
 120:./app/main.c  ****     while(1)
 121:./app/main.c  ****     {
 122:./app/main.c  ****         wdt_reset();
 123:./app/main.c  ****         shell( Uart_GetChar_nb() );
 124:./app/main.c  ****         OSTimeDly(HZ/10);
 125:./app/main.c  ****         if( --dly == 0 )
 126:./app/main.c  ****         {
 127:./app/main.c  **** //        	LED_NOT;
 128:./app/main.c  ****             dly = HZ/10;
 129:./app/main.c  ****             if( Data_PD() )
 130:./app/main.c  ****             {
 131:./app/main.c  ****                 LED_ON;
 132:./app/main.c  ****             }else
 133:./app/main.c  ****             	LED_OFF;
 134:./app/main.c  ****             Data_Trans();
 135:./app/main.c  ****         }
 136:./app/main.c  **** 
 137:./app/main.c  ****         if( KEY_IN == 0)
 138:./app/main.c  ****         {
 139:./app/main.c  ****         	data_cmd();
 140:./app/main.c  ****             LED_OFF; //LED_H;
 141:./app/main.c  ****             OSTimeDly(10);
 142:./app/main.c  ****             if( KEY_IN == 0 )
 143:./app/main.c  ****             {
 144:./app/main.c  ****                 LED_ON;
 145:./app/main.c  ****                 delay = 0;
 146:./app/main.c  ****                 while( KEY_IN == 0 )
 147:./app/main.c  ****                 {
 148:./app/main.c  ****                     wdt_reset();
 149:./app/main.c  ****                     OSTimeDly(10);
 150:./app/main.c  ****                     delay++;
 151:./app/main.c  ****                     if( delay > 20 )
 152:./app/main.c  ****                     {
 153:./app/main.c  ****                         LED_OFF;
 154:./app/main.c  ****                         if( SetAddress )
 155:./app/main.c  ****                         {
 156:./app/main.c  ****                             UsrSetAddr( SetAddress );
 157:./app/main.c  ****                             CAN_Init( UsrSetAddr( SetAddress ), 10000);
 158:./app/main.c  ****                             TK_Trans( TCMDDATA_SETADDR );
 159:./app/main.c  ****                             SetAddress = 0;
 160:./app/main.c  ****                             wdt_reset();
 161:./app/main.c  ****                             OSTimeDly(HZ);
 162:./app/main.c  ****                             wdt_reset();
 163:./app/main.c  ****                             OSTimeDly(HZ);
 164:./app/main.c  ****                             wdt_reset();
 165:./app/main.c  ****                             break;
 166:./app/main.c  ****                         }
 167:./app/main.c  ****                     }
 168:./app/main.c  ****                 }
 169:./app/main.c  ****             }
 170:./app/main.c  ****             LED_OFF;
 171:./app/main.c  ****         }
 172:./app/main.c  **** 
 173:./app/main.c  ****     }
 174:./app/main.c  **** }
 175:./app/main.c  **** 
 176:./app/main.c  **** void Can_Task(void)
 177:./app/main.c  **** {
  28              		.loc 1 177 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 16
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 32
  36              		.cfi_offset 0, -32
  37              		.cfi_offset 1, -28
  38              		.cfi_offset 2, -24
  39              		.cfi_offset 3, -20
  40              		.cfi_offset 4, -16
  41              		.cfi_offset 5, -12
  42              		.cfi_offset 6, -8
  43              		.cfi_offset 14, -4
 178:./app/main.c  ****     CAN_msg msg;
 179:./app/main.c  ****     int dly = 0;
 180:./app/main.c  **** 
 181:./app/main.c  ****     while(1)
 182:./app/main.c  ****     {
 183:./app/main.c  **** 		CAN_GetErr(0);
 184:./app/main.c  **** 
 185:./app/main.c  **** 		if (++dly > HZ * 5) {
  44              		.loc 1 185 0
  45 0002 FA25     		movs	r5, #250
 179:./app/main.c  **** 
  46              		.loc 1 179 0
  47 0004 0024     		movs	r4, #0
 186:./app/main.c  **** 			dly = 0;
 187:./app/main.c  ****             TK_AutoTrans();
 188:./app/main.c  **** 		}
 189:./app/main.c  **** 
 190:./app/main.c  **** 		if (CAN_WriteAll())
 191:./app/main.c  **** 			dly = 0;
 192:./app/main.c  **** 
 193:./app/main.c  **** 		if (CAN_rdMSG(&msg)) {
 194:./app/main.c  **** 			DEBUG2("can %08x, %08x %08x\n", msg.id, msg.DataA, msg.DataB);
  48              		.loc 1 194 0
  49 0006 0426     		movs	r6, #4
 185:./app/main.c  **** 			dly = 0;
  50              		.loc 1 185 0
  51 0008 AD00     		lsls	r5, r5, #2
  52              	.LVL1:
  53              	.L6:
 183:./app/main.c  **** 
  54              		.loc 1 183 0
  55 000a 0020     		movs	r0, #0
 185:./app/main.c  **** 			dly = 0;
  56              		.loc 1 185 0
  57 000c 0134     		adds	r4, r4, #1
  58              	.LVL2:
 183:./app/main.c  **** 
  59              		.loc 1 183 0
  60 000e FFF7FEFF 		bl	CAN_GetErr
  61              	.LVL3:
 185:./app/main.c  **** 			dly = 0;
  62              		.loc 1 185 0
  63 0012 AC42     		cmp	r4, r5
  64 0014 03DD     		ble	.L2
  65              	.LVL4:
 187:./app/main.c  **** 		}
  66              		.loc 1 187 0
  67 0016 A420     		movs	r0, #164
  68 0018 FFF7FEFF 		bl	TK_Trans
  69              	.LVL5:
 186:./app/main.c  ****             TK_AutoTrans();
  70              		.loc 1 186 0
  71 001c 0024     		movs	r4, #0
  72              	.LVL6:
  73              	.L2:
 190:./app/main.c  **** 			dly = 0;
  74              		.loc 1 190 0
  75 001e FFF7FEFF 		bl	CAN_WriteAll
  76              	.LVL7:
 191:./app/main.c  **** 
  77              		.loc 1 191 0
  78 0022 4342     		rsbs	r3, r0, #0
  79 0024 5841     		adcs	r0, r0, r3
  80 0026 4042     		rsbs	r0, r0, #0
  81 0028 0440     		ands	r4, r0
  82              	.LVL8:
 193:./app/main.c  **** 			DEBUG2("can %08x, %08x %08x\n", msg.id, msg.DataA, msg.DataB);
  83              		.loc 1 193 0
  84 002a 6846     		mov	r0, sp
  85 002c FFF7FEFF 		bl	CAN_rdMSG
  86              	.LVL9:
  87 0030 0028     		cmp	r0, #0
  88 0032 0CD0     		beq	.L4
  89              		.loc 1 194 0
  90 0034 084B     		ldr	r3, .L16
  91 0036 1B68     		ldr	r3, [r3]
  92 0038 3342     		tst	r3, r6
  93 003a 05D0     		beq	.L5
  94              		.loc 1 194 0 is_stmt 0 discriminator 1
  95 003c 029B     		ldr	r3, [sp, #8]
  96 003e 019A     		ldr	r2, [sp, #4]
  97 0040 0099     		ldr	r1, [sp]
  98 0042 0648     		ldr	r0, .L16+4
  99 0044 FFF7FEFF 		bl	dbg_print
 100              	.LVL10:
 101              	.L5:
 195:./app/main.c  **** 			CanCmdMsg(&msg);
 102              		.loc 1 195 0 is_stmt 1
 103 0048 6846     		mov	r0, sp
 104 004a FFF7FEFF 		bl	CanCmdMsg
 105              	.LVL11:
 106              	.L4:
 196:./app/main.c  **** 		}
 197:./app/main.c  **** 		OSTimeDly(1);
 107              		.loc 1 197 0
 108 004e 0120     		movs	r0, #1
 109 0050 FFF7FEFF 		bl	OSTimeDly
 110              	.LVL12:
 198:./app/main.c  **** 	}
 111              		.loc 1 198 0
 112 0054 D9E7     		b	.L6
 113              	.L17:
 114 0056 C046     		.align	2
 115              	.L16:
 116 0058 00000000 		.word	debug_en
 117 005c 00000000 		.word	.LC1
 118              		.cfi_endproc
 119              	.LFE62:
 121              		.section	.text.printk_put,"ax",%progbits
 122              		.align	1
 123              		.code	16
 124              		.thumb_func
 126              	printk_put:
 127              	.LFB59:
  69:./app/main.c  ****     if( ch == '\n' )
 128              		.loc 1 69 0
 129              		.cfi_startproc
 130              		@ args = 0, pretend = 0, frame = 0
 131              		@ frame_needed = 0, uses_anonymous_args = 0
 132              	.LVL13:
 133 0000 10B5     		push	{r4, lr}
 134              	.LCFI1:
 135              		.cfi_def_cfa_offset 8
 136              		.cfi_offset 4, -8
 137              		.cfi_offset 14, -4
  69:./app/main.c  ****     if( ch == '\n' )
 138              		.loc 1 69 0
 139 0002 0400     		movs	r4, r0
  70:./app/main.c  ****         Uart_SendByte( '\r' );
 140              		.loc 1 70 0
 141 0004 0A28     		cmp	r0, #10
 142 0006 02D1     		bne	.L19
  71:./app/main.c  ****     Uart_SendByte( ch );
 143              		.loc 1 71 0
 144 0008 0D20     		movs	r0, #13
 145              	.LVL14:
 146 000a FFF7FEFF 		bl	Uart_SendByte
 147              	.LVL15:
 148              	.L19:
  72:./app/main.c  ****     return 0;
 149              		.loc 1 72 0
 150 000e E0B2     		uxtb	r0, r4
 151 0010 FFF7FEFF 		bl	Uart_SendByte
 152              	.LVL16:
  74:./app/main.c  **** 
 153              		.loc 1 74 0
 154              		@ sp needed
 155 0014 0020     		movs	r0, #0
 156              	.LVL17:
 157 0016 10BD     		pop	{r4, pc}
 158              		.cfi_endproc
 159              	.LFE59:
 161              		.section	.text.reset_cmd,"ax",%progbits
 162              		.align	1
 163              		.global	reset_cmd
 164              		.code	16
 165              		.thumb_func
 167              	reset_cmd:
 168              	.LFB65:
 199:./app/main.c  **** }
 200:./app/main.c  **** 
 201:./app/main.c  **** /*
 202:./app/main.c  ****  * 初始化硬件
 203:./app/main.c  ****  */
 204:./app/main.c  **** void Init_Devices(void)
 205:./app/main.c  **** {
 206:./app/main.c  ****     OS_SREG_VAR;
 207:./app/main.c  **** 
 208:./app/main.c  ****     OS_ENTER_CRITICAL();
 209:./app/main.c  ****     BSP_Init();
 210:./app/main.c  **** 
 211:./app/main.c  ****     OS_CPU_SysTickInit( FCCLK/HZ );
 212:./app/main.c  ****     OS_EXIT_CRITICAL();
 213:./app/main.c  **** 
 214:./app/main.c  ****     IO_Init(); 
 215:./app/main.c  ****    
 216:./app/main.c  ****     Uart_Init( 9600 );
 217:./app/main.c  ****     printk_set( printk_put, NULL );
 218:./app/main.c  **** 
 219:./app/main.c  ****     wdt_init();
 220:./app/main.c  ****     CAN_Init( 1 , 10000 );
 221:./app/main.c  **** }
 222:./app/main.c  **** 
 223:./app/main.c  **** #include "pcommand.h"
 224:./app/main.c  **** 
 225:./app/main.c  **** /*
 226:./app/main.c  ****  * 最低任务钩子函数，主要是低功耗控制
 227:./app/main.c  ****  */
 228:./app/main.c  **** #if OS_TASK_HOOK_EN > 0
 229:./app/main.c  **** void OS_TaskIdle_Hook(void)
 230:./app/main.c  **** {
 231:./app/main.c  ****     __WFI();
 232:./app/main.c  **** }
 233:./app/main.c  **** #endif 
 234:./app/main.c  **** 
 235:./app/main.c  **** 
 236:./app/main.c  **** int reset_cmd(void);
 237:./app/main.c  **** int reset_cmd(void)
 238:./app/main.c  **** {
 169              		.loc 1 238 0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173 0000 10B5     		push	{r4, lr}
 174              	.LCFI2:
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 4, -8
 177              		.cfi_offset 14, -4
 239:./app/main.c  ****     MemStart = 0;
 178              		.loc 1 239 0
 179 0002 0024     		movs	r4, #0
 180 0004 024B     		ldr	r3, .L21
 240:./app/main.c  ****     BSP_Reset();
 241:./app/main.c  **** 	return 0;
 242:./app/main.c  **** }
 181              		.loc 1 242 0
 182              		@ sp needed
 239:./app/main.c  ****     MemStart = 0;
 183              		.loc 1 239 0
 184 0006 1C80     		strh	r4, [r3]
 240:./app/main.c  ****     BSP_Reset();
 185              		.loc 1 240 0
 186 0008 FFF7FEFF 		bl	BSP_Reset
 187              	.LVL18:
 188              		.loc 1 242 0
 189 000c 2000     		movs	r0, r4
 190 000e 10BD     		pop	{r4, pc}
 191              	.L22:
 192              		.align	2
 193              	.L21:
 194 0010 00000000 		.word	.LANCHOR0
 195              		.cfi_endproc
 196              	.LFE65:
 198              		.section	.text.startup.main,"ax",%progbits
 199              		.align	1
 200              		.global	main
 201              		.code	16
 202              		.thumb_func
 204              	main:
 205              	.LFB60:
  78:./app/main.c  **** 	OSInit();
 206              		.loc 1 78 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 0
 209              		@ frame_needed = 0, uses_anonymous_args = 0
 210 0000 07B5     		push	{r0, r1, r2, lr}
 211              	.LCFI3:
 212              		.cfi_def_cfa_offset 16
 213              		.cfi_offset 0, -16
 214              		.cfi_offset 1, -12
 215              		.cfi_offset 2, -8
 216              		.cfi_offset 14, -4
  79:./app/main.c  ****     OSTASK_CREATE( Dis, 5 );
 217              		.loc 1 79 0
 218 0002 FFF7FEFF 		bl	OSInit
 219              	.LVL19:
  80:./app/main.c  ****     OSStart();
 220              		.loc 1 80 0
 221 0006 0523     		movs	r3, #5
 222 0008 0193     		str	r3, [sp, #4]
 223 000a 064B     		ldr	r3, .L24
 224 000c 0022     		movs	r2, #0
 225 000e 0093     		str	r3, [sp]
 226 0010 0549     		ldr	r1, .L24+4
 227 0012 064B     		ldr	r3, .L24+8
 228 0014 0648     		ldr	r0, .L24+12
 229 0016 FFF7FEFF 		bl	OSTaskCreateExt
 230              	.LVL20:
  83:./app/main.c  **** 
 231              		.loc 1 83 0
 232              		@ sp needed
  81:./app/main.c  **** 	return 0;
 233              		.loc 1 81 0
 234 001a FFF7FEFF 		bl	OSStart
 235              	.LVL21:
  83:./app/main.c  **** 
 236              		.loc 1 83 0
 237 001e 0020     		movs	r0, #0
 238 0020 0EBD     		pop	{r1, r2, r3, pc}
 239              	.L25:
 240 0022 C046     		.align	2
 241              	.L24:
 242 0024 00000000 		.word	Dis_TaskStk
 243 0028 00000000 		.word	Dis_Task
 244 002c FC030000 		.word	Dis_TaskStk+1020
 245 0030 15000000 		.word	.LC6
 246              		.cfi_endproc
 247              	.LFE60:
 249              		.global	__aeabi_uidiv
 250              		.section	.text.Init_Devices,"ax",%progbits
 251              		.align	1
 252              		.global	Init_Devices
 253              		.code	16
 254              		.thumb_func
 256              	Init_Devices:
 257              	.LFB63:
 205:./app/main.c  ****     OS_SREG_VAR;
 258              		.loc 1 205 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262 0000 10B5     		push	{r4, lr}
 263              	.LCFI4:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 4, -8
 266              		.cfi_offset 14, -4
 208:./app/main.c  ****     BSP_Init();
 267              		.loc 1 208 0
 268 0002 FFF7FEFF 		bl	OS_CPU_SR_Save
 269              	.LVL22:
 270 0006 0400     		movs	r4, r0
 271              	.LVL23:
 209:./app/main.c  **** 
 272              		.loc 1 209 0
 273 0008 FFF7FEFF 		bl	BSP_Init
 274              	.LVL24:
 211:./app/main.c  ****     OS_EXIT_CRITICAL();
 275              		.loc 1 211 0
 276 000c 0D4B     		ldr	r3, .L27
 277 000e C821     		movs	r1, #200
 278 0010 1868     		ldr	r0, [r3]
 279 0012 FFF7FEFF 		bl	__aeabi_uidiv
 280              	.LVL25:
 281 0016 FFF7FEFF 		bl	OS_CPU_SysTickInit
 282              	.LVL26:
 212:./app/main.c  **** 
 283              		.loc 1 212 0
 284 001a 2000     		movs	r0, r4
 285 001c FFF7FEFF 		bl	OS_CPU_SR_Restore
 286              	.LVL27:
 214:./app/main.c  ****    
 287              		.loc 1 214 0
 288 0020 FFF7FEFF 		bl	IO_Init
 289              	.LVL28:
 216:./app/main.c  ****     printk_set( printk_put, NULL );
 290              		.loc 1 216 0
 291 0024 9620     		movs	r0, #150
 292 0026 8001     		lsls	r0, r0, #6
 293 0028 FFF7FEFF 		bl	Uart_Init
 294              	.LVL29:
 217:./app/main.c  **** 
 295              		.loc 1 217 0
 296 002c 0021     		movs	r1, #0
 297 002e 0648     		ldr	r0, .L27+4
 298 0030 FFF7FEFF 		bl	printk_set
 299              	.LVL30:
 219:./app/main.c  ****     CAN_Init( 1 , 10000 );
 300              		.loc 1 219 0
 301 0034 FFF7FEFF 		bl	wdt_init
 302              	.LVL31:
 220:./app/main.c  **** }
 303              		.loc 1 220 0
 304 0038 0449     		ldr	r1, .L27+8
 305 003a 0120     		movs	r0, #1
 306 003c FFF7FEFF 		bl	CAN_Init
 307              	.LVL32:
 221:./app/main.c  **** 
 308              		.loc 1 221 0
 309              		@ sp needed
 310              	.LVL33:
 311 0040 10BD     		pop	{r4, pc}
 312              	.L28:
 313 0042 C046     		.align	2
 314              	.L27:
 315 0044 00000000 		.word	SystemCoreClock
 316 0048 00000000 		.word	printk_put
 317 004c 10270000 		.word	10000
 318              		.cfi_endproc
 319              	.LFE63:
 321              		.section	.text.Dis_Task,"ax",%progbits
 322              		.align	1
 323              		.global	Dis_Task
 324              		.code	16
 325              		.thumb_func
 327              	Dis_Task:
 328              	.LFB61:
  91:./app/main.c  ****     int dly;
 329              		.loc 1 91 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 8
 332              		@ frame_needed = 0, uses_anonymous_args = 0
 333 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 20
 336              		.cfi_offset 4, -20
 337              		.cfi_offset 5, -16
 338              		.cfi_offset 6, -12
 339              		.cfi_offset 7, -8
 340              		.cfi_offset 14, -4
 341 0002 85B0     		sub	sp, sp, #20
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 40
  95:./app/main.c  **** 
 344              		.loc 1 95 0
 345 0004 FFF7FEFF 		bl	Init_Devices
 346              	.LVL34:
  97:./app/main.c  ****     UsrInit();
 347              		.loc 1 97 0
 348 0008 FFF7FEFF 		bl	Pro_Init
 349              	.LVL35:
  98:./app/main.c  **** 
 350              		.loc 1 98 0
 351 000c FFF7FEFF 		bl	UsrInit
 352              	.LVL36:
 100:./app/main.c  ****     {
 353              		.loc 1 100 0
 354 0010 464C     		ldr	r4, .L54
 355 0012 474D     		ldr	r5, .L54+4
 356 0014 2388     		ldrh	r3, [r4]
 357 0016 AB42     		cmp	r3, r5
 358 0018 04D0     		beq	.L30
 102:./app/main.c  ****         MemStart = 0x55AA;
 359              		.loc 1 102 0
 360 001a 0120     		movs	r0, #1
 361 001c FFF7FEFF 		bl	Data_Init
 362              	.LVL37:
 103:./app/main.c  ****     }else
 363              		.loc 1 103 0
 364 0020 2580     		strh	r5, [r4]
 365 0022 02E0     		b	.L31
 366              	.L30:
 105:./app/main.c  **** 
 367              		.loc 1 105 0
 368 0024 0020     		movs	r0, #0
 369 0026 FFF7FEFF 		bl	Data_Init
 370              	.LVL38:
 371              	.L31:
 107:./app/main.c  ****     ASSERT(dly == OS_NO_ERR);
 372              		.loc 1 107 0
 373 002a 0022     		movs	r2, #0
 374 002c 414B     		ldr	r3, .L54+8
 375 002e 0192     		str	r2, [sp, #4]
 376 0030 0093     		str	r3, [sp]
 377 0032 4149     		ldr	r1, .L54+12
 378 0034 414B     		ldr	r3, .L54+16
 379 0036 4248     		ldr	r0, .L54+20
 380 0038 FFF7FEFF 		bl	OSTaskCreateExt
 381              	.LVL39:
 108:./app/main.c  ****    
 382              		.loc 1 108 0
 383 003c 0028     		cmp	r0, #0
 384 003e 03D0     		beq	.L32
 108:./app/main.c  ****    
 385              		.loc 1 108 0 is_stmt 0 discriminator 1
 386 0040 6C21     		movs	r1, #108
 387 0042 4048     		ldr	r0, .L54+24
 388              	.LVL40:
 389 0044 FFF7FEFF 		bl	__error
 390              	.LVL41:
 391              	.L32:
 110:./app/main.c  ****     ASSERT( dly == OS_NO_ERR );
 392              		.loc 1 110 0 is_stmt 1
 393 0048 0423     		movs	r3, #4
 394 004a 0193     		str	r3, [sp, #4]
 395 004c 3E4B     		ldr	r3, .L54+28
 396 004e 0022     		movs	r2, #0
 397 0050 0093     		str	r3, [sp]
 398 0052 3E49     		ldr	r1, .L54+32
 399 0054 3E4B     		ldr	r3, .L54+36
 400 0056 3F48     		ldr	r0, .L54+40
 401 0058 FFF7FEFF 		bl	OSTaskCreateExt
 402              	.LVL42:
 111:./app/main.c  **** 
 403              		.loc 1 111 0
 404 005c 0028     		cmp	r0, #0
 405 005e 03D0     		beq	.L33
 111:./app/main.c  **** 
 406              		.loc 1 111 0 is_stmt 0 discriminator 1
 407 0060 6F21     		movs	r1, #111
 408 0062 3848     		ldr	r0, .L54+24
 409              	.LVL43:
 410 0064 FFF7FEFF 		bl	__error
 411              	.LVL44:
 412              	.L33:
 118:./app/main.c  ****           );
 413              		.loc 1 118 0 is_stmt 1
 414 0068 3B4B     		ldr	r3, .L54+44
 113:./app/main.c  **** 
 415              		.loc 1 113 0
 416 006a 1425     		movs	r5, #20
 118:./app/main.c  ****           );
 417              		.loc 1 118 0
 418 006c 1B68     		ldr	r3, [r3]
 115:./app/main.c  ****             VERSION_STR \
 419              		.loc 1 115 0
 420 006e D878     		ldrb	r0, [r3, #3]
 421 0070 FFF7FEFF 		bl	GetObjName
 422              	.LVL45:
 423 0074 0100     		movs	r1, r0
 424 0076 3948     		ldr	r0, .L54+48
 425 0078 FFF7FEFF 		bl	dbg_print
 426              	.LVL46:
 427              	.L34:
 122:./app/main.c  ****         shell( Uart_GetChar_nb() );
 428              		.loc 1 122 0
 429 007c FFF7FEFF 		bl	wdt_reset
 430              	.LVL47:
 123:./app/main.c  ****         OSTimeDly(HZ/10);
 431              		.loc 1 123 0
 432 0080 FFF7FEFF 		bl	Uart_GetChar_nb
 433              	.LVL48:
 434 0084 FFF7FEFF 		bl	shell
 435              	.LVL49:
 125:./app/main.c  ****         {
 436              		.loc 1 125 0
 437 0088 013D     		subs	r5, r5, #1
 438              	.LVL50:
 124:./app/main.c  ****         if( --dly == 0 )
 439              		.loc 1 124 0
 440 008a 1420     		movs	r0, #20
 441 008c FFF7FEFF 		bl	OSTimeDly
 442              	.LVL51:
 125:./app/main.c  ****         {
 443              		.loc 1 125 0
 444 0090 002D     		cmp	r5, #0
 445 0092 0BD1     		bne	.L35
 446              	.LVL52:
 129:./app/main.c  ****             {
 447              		.loc 1 129 0
 448 0094 FFF7FEFF 		bl	Data_PD
 449              	.LVL53:
 450 0098 314B     		ldr	r3, .L54+52
 451 009a 0028     		cmp	r0, #0
 452 009c 01D0     		beq	.L36
 131:./app/main.c  ****             }else
 453              		.loc 1 131 0
 454 009e 1D60     		str	r5, [r3]
 455 00a0 01E0     		b	.L37
 456              	.L36:
 133:./app/main.c  ****             Data_Trans();
 457              		.loc 1 133 0
 458 00a2 0122     		movs	r2, #1
 459 00a4 1A60     		str	r2, [r3]
 460              	.L37:
 134:./app/main.c  ****         }
 461              		.loc 1 134 0
 462 00a6 FFF7FEFF 		bl	Data_Trans
 463              	.LVL54:
 128:./app/main.c  ****             if( Data_PD() )
 464              		.loc 1 128 0
 465 00aa 1425     		movs	r5, #20
 466              	.LVL55:
 467              	.L35:
 137:./app/main.c  ****         {
 468              		.loc 1 137 0
 469 00ac 2D4C     		ldr	r4, .L54+56
 470 00ae 2368     		ldr	r3, [r4]
 471 00b0 002B     		cmp	r3, #0
 472 00b2 E3D1     		bne	.L34
 139:./app/main.c  ****             LED_OFF; //LED_H;
 473              		.loc 1 139 0
 474 00b4 FFF7FEFF 		bl	data_cmd
 475              	.LVL56:
 140:./app/main.c  ****             OSTimeDly(10);
 476              		.loc 1 140 0
 477 00b8 0123     		movs	r3, #1
 478 00ba 294E     		ldr	r6, .L54+52
 141:./app/main.c  ****             if( KEY_IN == 0 )
 479              		.loc 1 141 0
 480 00bc 0A20     		movs	r0, #10
 140:./app/main.c  ****             OSTimeDly(10);
 481              		.loc 1 140 0
 482 00be 3360     		str	r3, [r6]
 141:./app/main.c  ****             if( KEY_IN == 0 )
 483              		.loc 1 141 0
 484 00c0 FFF7FEFF 		bl	OSTimeDly
 485              	.LVL57:
 142:./app/main.c  ****             {
 486              		.loc 1 142 0
 487 00c4 2468     		ldr	r4, [r4]
 488 00c6 002C     		cmp	r4, #0
 489 00c8 2DD1     		bne	.L40
 144:./app/main.c  ****                 delay = 0;
 490              		.loc 1 144 0
 491 00ca 3460     		str	r4, [r6]
 492              	.LVL58:
 493              	.L41:
 146:./app/main.c  ****                 {
 494              		.loc 1 146 0
 495 00cc 254B     		ldr	r3, .L54+56
 496 00ce 1B68     		ldr	r3, [r3]
 497 00d0 0393     		str	r3, [sp, #12]
 498 00d2 002B     		cmp	r3, #0
 499 00d4 27D1     		bne	.L40
 148:./app/main.c  ****                     OSTimeDly(10);
 500              		.loc 1 148 0
 501 00d6 FFF7FEFF 		bl	wdt_reset
 502              	.LVL59:
 150:./app/main.c  ****                     if( delay > 20 )
 503              		.loc 1 150 0
 504 00da 0134     		adds	r4, r4, #1
 505              	.LVL60:
 149:./app/main.c  ****                     delay++;
 506              		.loc 1 149 0
 507 00dc 0A20     		movs	r0, #10
 508 00de FFF7FEFF 		bl	OSTimeDly
 509              	.LVL61:
 151:./app/main.c  ****                     {
 510              		.loc 1 151 0
 511 00e2 142C     		cmp	r4, #20
 512 00e4 F2DD     		ble	.L41
 153:./app/main.c  ****                         if( SetAddress )
 513              		.loc 1 153 0
 514 00e6 0122     		movs	r2, #1
 154:./app/main.c  ****                         {
 515              		.loc 1 154 0
 516 00e8 1F4F     		ldr	r7, .L54+60
 153:./app/main.c  ****                         if( SetAddress )
 517              		.loc 1 153 0
 518 00ea 1D4B     		ldr	r3, .L54+52
 154:./app/main.c  ****                         {
 519              		.loc 1 154 0
 520 00ec 3868     		ldr	r0, [r7]
 153:./app/main.c  ****                         if( SetAddress )
 521              		.loc 1 153 0
 522 00ee 1A60     		str	r2, [r3]
 154:./app/main.c  ****                         {
 523              		.loc 1 154 0
 524 00f0 0028     		cmp	r0, #0
 525 00f2 EBD0     		beq	.L41
 156:./app/main.c  ****                             CAN_Init( UsrSetAddr( SetAddress ), 10000);
 526              		.loc 1 156 0
 527 00f4 FFF7FEFF 		bl	UsrSetAddr
 528              	.LVL62:
 157:./app/main.c  ****                             TK_Trans( TCMDDATA_SETADDR );
 529              		.loc 1 157 0
 530 00f8 3868     		ldr	r0, [r7]
 531 00fa FFF7FEFF 		bl	UsrSetAddr
 532              	.LVL63:
 533 00fe 1B49     		ldr	r1, .L54+64
 534 0100 FFF7FEFF 		bl	CAN_Init
 535              	.LVL64:
 158:./app/main.c  ****                             SetAddress = 0;
 536              		.loc 1 158 0
 537 0104 A920     		movs	r0, #169
 538 0106 FFF7FEFF 		bl	TK_Trans
 539              	.LVL65:
 159:./app/main.c  ****                             wdt_reset();
 540              		.loc 1 159 0
 541 010a 039B     		ldr	r3, [sp, #12]
 542 010c 3B60     		str	r3, [r7]
 160:./app/main.c  ****                             OSTimeDly(HZ);
 543              		.loc 1 160 0
 544 010e FFF7FEFF 		bl	wdt_reset
 545              	.LVL66:
 161:./app/main.c  ****                             wdt_reset();
 546              		.loc 1 161 0
 547 0112 C820     		movs	r0, #200
 548 0114 FFF7FEFF 		bl	OSTimeDly
 549              	.LVL67:
 162:./app/main.c  ****                             OSTimeDly(HZ);
 550              		.loc 1 162 0
 551 0118 FFF7FEFF 		bl	wdt_reset
 552              	.LVL68:
 163:./app/main.c  ****                             wdt_reset();
 553              		.loc 1 163 0
 554 011c C820     		movs	r0, #200
 555 011e FFF7FEFF 		bl	OSTimeDly
 556              	.LVL69:
 164:./app/main.c  ****                             break;
 557              		.loc 1 164 0
 558 0122 FFF7FEFF 		bl	wdt_reset
 559              	.LVL70:
 560              	.L40:
 170:./app/main.c  ****         }
 561              		.loc 1 170 0
 562 0126 0123     		movs	r3, #1
 563 0128 3360     		str	r3, [r6]
 564 012a A7E7     		b	.L34
 565              	.L55:
 566              		.align	2
 567              	.L54:
 568 012c 00000000 		.word	.LANCHOR0
 569 0130 AA550000 		.word	21930
 570 0134 00000000 		.word	Can_TaskStk
 571 0138 00000000 		.word	Can_Task
 572 013c FC020000 		.word	Can_TaskStk+764
 573 0140 19000000 		.word	.LC14
 574 0144 1D000000 		.word	.LC17
 575 0148 00000000 		.word	DataCJ_TaskStk
 576 014c 00000000 		.word	DataCJ_Task
 577 0150 7C010000 		.word	DataCJ_TaskStk+380
 578 0154 2A000000 		.word	.LC21
 579 0158 00000000 		.word	pUsrCfg
 580 015c 31000000 		.word	.LC25
 581 0160 50420050 		.word	1342194256
 582 0164 80420050 		.word	1342194304
 583 0168 00000000 		.word	SetAddress
 584 016c 10270000 		.word	10000
 585              		.cfi_endproc
 586              	.LFE61:
 588              		.section	.text.OS_TaskIdle_Hook,"ax",%progbits
 589              		.align	1
 590              		.global	OS_TaskIdle_Hook
 591              		.code	16
 592              		.thumb_func
 594              	OS_TaskIdle_Hook:
 595              	.LFB64:
 230:./app/main.c  ****     __WFI();
 596              		.loc 1 230 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              		@ link register save eliminated.
 601              	.LBB4:
 602              	.LBB5:
 603              		.file 2 "./bsp/core_cm0.h"
   1:./bsp/core_cm0.h **** /**************************************************************************//**
   2:./bsp/core_cm0.h ****  * @file     core_cm0.h
   3:./bsp/core_cm0.h ****  * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
   4:./bsp/core_cm0.h ****  * @version  V1.30
   5:./bsp/core_cm0.h ****  * @date     30. October 2009
   6:./bsp/core_cm0.h ****  *
   7:./bsp/core_cm0.h ****  * @note
   8:./bsp/core_cm0.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:./bsp/core_cm0.h ****  *
  10:./bsp/core_cm0.h ****  * @par
  11:./bsp/core_cm0.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:./bsp/core_cm0.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:./bsp/core_cm0.h ****  * within development tools that are supporting such ARM based processors. 
  14:./bsp/core_cm0.h ****  *
  15:./bsp/core_cm0.h ****  * @par
  16:./bsp/core_cm0.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:./bsp/core_cm0.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:./bsp/core_cm0.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:./bsp/core_cm0.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:./bsp/core_cm0.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:./bsp/core_cm0.h ****  *
  22:./bsp/core_cm0.h ****  ******************************************************************************/
  23:./bsp/core_cm0.h **** 
  24:./bsp/core_cm0.h **** #ifndef __CM0_CORE_H__
  25:./bsp/core_cm0.h **** #define __CM0_CORE_H__
  26:./bsp/core_cm0.h **** 
  27:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_LintCinfiguration CMSIS CM0 Core Lint Configuration
  28:./bsp/core_cm0.h ****  *
  29:./bsp/core_cm0.h ****  * List of Lint messages which will be suppressed and not shown:
  30:./bsp/core_cm0.h ****  *   - not yet checked
  31:./bsp/core_cm0.h ****  * .
  32:./bsp/core_cm0.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  33:./bsp/core_cm0.h ****  *
  34:./bsp/core_cm0.h ****  */
  35:./bsp/core_cm0.h **** 
  36:./bsp/core_cm0.h **** 
  37:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_definitions CM0 Core Definitions
  38:./bsp/core_cm0.h ****   This file defines all structures and symbols for CMSIS core:
  39:./bsp/core_cm0.h ****     - CMSIS version number
  40:./bsp/core_cm0.h ****     - Cortex-M core registers and bitfields
  41:./bsp/core_cm0.h ****     - Cortex-M core peripheral base address
  42:./bsp/core_cm0.h ****   @{
  43:./bsp/core_cm0.h ****  */
  44:./bsp/core_cm0.h **** 
  45:./bsp/core_cm0.h **** #ifdef __cplusplus
  46:./bsp/core_cm0.h ****  extern "C" {
  47:./bsp/core_cm0.h **** #endif 
  48:./bsp/core_cm0.h **** 
  49:./bsp/core_cm0.h **** #define __CM0_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  50:./bsp/core_cm0.h **** #define __CM0_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  51:./bsp/core_cm0.h **** #define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16) | __CM0_CMSIS_VERSION_SUB) /*!<
  52:./bsp/core_cm0.h **** 
  53:./bsp/core_cm0.h **** #define __CORTEX_M                (0x00)                                                       /*!<
  54:./bsp/core_cm0.h **** 
  55:./bsp/core_cm0.h **** #include <stdint.h>                           /* Include standard types */
  56:./bsp/core_cm0.h **** 
  57:./bsp/core_cm0.h **** #if defined (__ICCARM__)
  58:./bsp/core_cm0.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  59:./bsp/core_cm0.h **** #endif
  60:./bsp/core_cm0.h **** 
  61:./bsp/core_cm0.h **** 
  62:./bsp/core_cm0.h **** #ifndef __NVIC_PRIO_BITS
  63:./bsp/core_cm0.h ****   #define __NVIC_PRIO_BITS    2               /*!< standard definition for NVIC Priority Bits */
  64:./bsp/core_cm0.h **** #endif
  65:./bsp/core_cm0.h **** 
  66:./bsp/core_cm0.h **** 
  67:./bsp/core_cm0.h **** 
  68:./bsp/core_cm0.h **** 
  69:./bsp/core_cm0.h **** /**
  70:./bsp/core_cm0.h ****  * IO definitions
  71:./bsp/core_cm0.h ****  *
  72:./bsp/core_cm0.h ****  * define access restrictions to peripheral registers
  73:./bsp/core_cm0.h ****  */
  74:./bsp/core_cm0.h **** 
  75:./bsp/core_cm0.h **** #ifdef __cplusplus
  76:./bsp/core_cm0.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
  77:./bsp/core_cm0.h **** #else
  78:./bsp/core_cm0.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
  79:./bsp/core_cm0.h **** #endif
  80:./bsp/core_cm0.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
  81:./bsp/core_cm0.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
  82:./bsp/core_cm0.h **** 
  83:./bsp/core_cm0.h **** /*******************************************************************************
  84:./bsp/core_cm0.h ****  *                 Register Abstraction
  85:./bsp/core_cm0.h ****  ******************************************************************************/
  86:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_core_register CMSIS CM0 Core Register
  87:./bsp/core_cm0.h ****  @{
  88:./bsp/core_cm0.h **** */
  89:./bsp/core_cm0.h **** 
  90:./bsp/core_cm0.h **** 
  91:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_NVIC CMSIS CM0 NVIC
  92:./bsp/core_cm0.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
  93:./bsp/core_cm0.h ****   @{
  94:./bsp/core_cm0.h ****  */
  95:./bsp/core_cm0.h **** typedef struct
  96:./bsp/core_cm0.h **** {
  97:./bsp/core_cm0.h ****   __IO uint32_t ISER[1];                      /*!< (Offset: 0x000) Interrupt Set Enable Register   
  98:./bsp/core_cm0.h ****        uint32_t RESERVED0[31];
  99:./bsp/core_cm0.h ****   __IO uint32_t ICER[1];                      /*!< (Offset: 0x080) Interrupt Clear Enable Register 
 100:./bsp/core_cm0.h ****        uint32_t RSERVED1[31];
 101:./bsp/core_cm0.h ****   __IO uint32_t ISPR[1];                      /*!< (Offset: 0x100) Interrupt Set Pending Register  
 102:./bsp/core_cm0.h ****        uint32_t RESERVED2[31];
 103:./bsp/core_cm0.h ****   __IO uint32_t ICPR[1];                      /*!< (Offset: 0x180) Interrupt Clear Pending Register
 104:./bsp/core_cm0.h ****        uint32_t RESERVED3[31];
 105:./bsp/core_cm0.h ****        uint32_t RESERVED4[64];
 106:./bsp/core_cm0.h ****   __IO uint32_t IPR[8];                       /*!< (Offset: 0x3EC) Interrupt Priority Register     
 107:./bsp/core_cm0.h **** }  NVIC_Type;
 108:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_NVIC */
 109:./bsp/core_cm0.h **** 
 110:./bsp/core_cm0.h **** 
 111:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_SCB CMSIS CM0 SCB
 112:./bsp/core_cm0.h ****   memory mapped structure for System Control Block (SCB)
 113:./bsp/core_cm0.h ****   @{
 114:./bsp/core_cm0.h ****  */
 115:./bsp/core_cm0.h **** typedef struct
 116:./bsp/core_cm0.h **** {
 117:./bsp/core_cm0.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 118:./bsp/core_cm0.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 119:./bsp/core_cm0.h ****        uint32_t RESERVED0;                                      
 120:./bsp/core_cm0.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 121:./bsp/core_cm0.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 122:./bsp/core_cm0.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 123:./bsp/core_cm0.h ****        uint32_t RESERVED1;                                      
 124:./bsp/core_cm0.h ****   __IO uint32_t SHP[2];                       /*!< Offset: 0x1C  System Handlers Priority Registers
 125:./bsp/core_cm0.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 126:./bsp/core_cm0.h ****        uint32_t RESERVED2[2];                                   
 127:./bsp/core_cm0.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 128:./bsp/core_cm0.h **** } SCB_Type;                                                
 129:./bsp/core_cm0.h **** 
 130:./bsp/core_cm0.h **** /* SCB CPUID Register Definitions */
 131:./bsp/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 132:./bsp/core_cm0.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 133:./bsp/core_cm0.h **** 
 134:./bsp/core_cm0.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 135:./bsp/core_cm0.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 136:./bsp/core_cm0.h **** 
 137:./bsp/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 138:./bsp/core_cm0.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFul << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 139:./bsp/core_cm0.h **** 
 140:./bsp/core_cm0.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 141:./bsp/core_cm0.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 142:./bsp/core_cm0.h **** 
 143:./bsp/core_cm0.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 144:./bsp/core_cm0.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 145:./bsp/core_cm0.h **** 
 146:./bsp/core_cm0.h **** /* SCB Interrupt Control State Register Definitions */
 147:./bsp/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 148:./bsp/core_cm0.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 149:./bsp/core_cm0.h **** 
 150:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 151:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 152:./bsp/core_cm0.h **** 
 153:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 154:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 155:./bsp/core_cm0.h **** 
 156:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 157:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 158:./bsp/core_cm0.h **** 
 159:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 160:./bsp/core_cm0.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 161:./bsp/core_cm0.h **** 
 162:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 163:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 164:./bsp/core_cm0.h **** 
 165:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 166:./bsp/core_cm0.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 167:./bsp/core_cm0.h **** 
 168:./bsp/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 169:./bsp/core_cm0.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 170:./bsp/core_cm0.h **** 
 171:./bsp/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 172:./bsp/core_cm0.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 173:./bsp/core_cm0.h **** 
 174:./bsp/core_cm0.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 175:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 176:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 177:./bsp/core_cm0.h **** 
 178:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 179:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 180:./bsp/core_cm0.h **** 
 181:./bsp/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 182:./bsp/core_cm0.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 183:./bsp/core_cm0.h **** 
 184:./bsp/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 185:./bsp/core_cm0.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 186:./bsp/core_cm0.h **** 
 187:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 188:./bsp/core_cm0.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 189:./bsp/core_cm0.h **** 
 190:./bsp/core_cm0.h **** /* SCB System Control Register Definitions */
 191:./bsp/core_cm0.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 192:./bsp/core_cm0.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 193:./bsp/core_cm0.h **** 
 194:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 195:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 196:./bsp/core_cm0.h **** 
 197:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 198:./bsp/core_cm0.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 199:./bsp/core_cm0.h **** 
 200:./bsp/core_cm0.h **** /* SCB Configuration Control Register Definitions */
 201:./bsp/core_cm0.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 202:./bsp/core_cm0.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 203:./bsp/core_cm0.h **** 
 204:./bsp/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 205:./bsp/core_cm0.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 206:./bsp/core_cm0.h **** 
 207:./bsp/core_cm0.h **** /* SCB System Handler Control and State Register Definitions */
 208:./bsp/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 209:./bsp/core_cm0.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 210:./bsp/core_cm0.h **** 
 211:./bsp/core_cm0.h **** /* SCB Debug Fault Status Register Definitions */
 212:./bsp/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 213:./bsp/core_cm0.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 214:./bsp/core_cm0.h **** 
 215:./bsp/core_cm0.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 216:./bsp/core_cm0.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 217:./bsp/core_cm0.h **** 
 218:./bsp/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 219:./bsp/core_cm0.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 220:./bsp/core_cm0.h **** 
 221:./bsp/core_cm0.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 222:./bsp/core_cm0.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 223:./bsp/core_cm0.h **** 
 224:./bsp/core_cm0.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 225:./bsp/core_cm0.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 226:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SCB */
 227:./bsp/core_cm0.h **** 
 228:./bsp/core_cm0.h **** 
 229:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_SysTick CMSIS CM0 SysTick
 230:./bsp/core_cm0.h ****   memory mapped structure for SysTick
 231:./bsp/core_cm0.h ****   @{
 232:./bsp/core_cm0.h ****  */
 233:./bsp/core_cm0.h **** typedef struct
 234:./bsp/core_cm0.h **** {
 235:./bsp/core_cm0.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 236:./bsp/core_cm0.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 237:./bsp/core_cm0.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 238:./bsp/core_cm0.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 239:./bsp/core_cm0.h **** } SysTick_Type;
 240:./bsp/core_cm0.h **** 
 241:./bsp/core_cm0.h **** /* SysTick Control / Status Register Definitions */
 242:./bsp/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 243:./bsp/core_cm0.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 244:./bsp/core_cm0.h **** 
 245:./bsp/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 246:./bsp/core_cm0.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 247:./bsp/core_cm0.h **** 
 248:./bsp/core_cm0.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 249:./bsp/core_cm0.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 250:./bsp/core_cm0.h **** 
 251:./bsp/core_cm0.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 252:./bsp/core_cm0.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 253:./bsp/core_cm0.h **** 
 254:./bsp/core_cm0.h **** /* SysTick Reload Register Definitions */
 255:./bsp/core_cm0.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 256:./bsp/core_cm0.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 257:./bsp/core_cm0.h **** 
 258:./bsp/core_cm0.h **** /* SysTick Current Register Definitions */
 259:./bsp/core_cm0.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 260:./bsp/core_cm0.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 261:./bsp/core_cm0.h **** 
 262:./bsp/core_cm0.h **** /* SysTick Calibration Register Definitions */
 263:./bsp/core_cm0.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 264:./bsp/core_cm0.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 265:./bsp/core_cm0.h **** 
 266:./bsp/core_cm0.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 267:./bsp/core_cm0.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 268:./bsp/core_cm0.h **** 
 269:./bsp/core_cm0.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 270:./bsp/core_cm0.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 271:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_SysTick */
 272:./bsp/core_cm0.h **** 
 273:./bsp/core_cm0.h **** 
 274:./bsp/core_cm0.h **** /** @addtogroup CMSIS_CM0_CoreDebug CMSIS CM0 Core Debug
 275:./bsp/core_cm0.h ****   memory mapped structure for Core Debug Register
 276:./bsp/core_cm0.h ****   @{
 277:./bsp/core_cm0.h ****  */
 278:./bsp/core_cm0.h **** typedef struct
 279:./bsp/core_cm0.h **** {
 280:./bsp/core_cm0.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 281:./bsp/core_cm0.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 282:./bsp/core_cm0.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 283:./bsp/core_cm0.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 284:./bsp/core_cm0.h **** } CoreDebug_Type;
 285:./bsp/core_cm0.h **** 
 286:./bsp/core_cm0.h **** /* Debug Halting Control and Status Register */
 287:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 288:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 289:./bsp/core_cm0.h **** 
 290:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 291:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 292:./bsp/core_cm0.h **** 
 293:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 294:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 295:./bsp/core_cm0.h **** 
 296:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 297:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 298:./bsp/core_cm0.h **** 
 299:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 300:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 301:./bsp/core_cm0.h **** 
 302:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 303:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 304:./bsp/core_cm0.h **** 
 305:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 306:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 307:./bsp/core_cm0.h **** 
 308:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 309:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 310:./bsp/core_cm0.h **** 
 311:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 312:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 313:./bsp/core_cm0.h **** 
 314:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 315:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 316:./bsp/core_cm0.h **** 
 317:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 318:./bsp/core_cm0.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 319:./bsp/core_cm0.h **** 
 320:./bsp/core_cm0.h **** /* Debug Core Register Selector Register */
 321:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 322:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 323:./bsp/core_cm0.h **** 
 324:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 325:./bsp/core_cm0.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 326:./bsp/core_cm0.h **** 
 327:./bsp/core_cm0.h **** /* Debug Exception and Monitor Control Register */
 328:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Pos         24                                             /*!< Core
 329:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_DWTENA_Msk         (1ul << CoreDebug_DEMCR_DWTENA_Pos)            /*!< Core
 330:./bsp/core_cm0.h **** 
 331:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 332:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 333:./bsp/core_cm0.h **** 
 334:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 335:./bsp/core_cm0.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 336:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_CoreDebug */
 337:./bsp/core_cm0.h **** 
 338:./bsp/core_cm0.h **** 
 339:./bsp/core_cm0.h **** /* Memory mapping of Cortex-M0 Hardware */
 340:./bsp/core_cm0.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 341:./bsp/core_cm0.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 342:./bsp/core_cm0.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 343:./bsp/core_cm0.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 344:./bsp/core_cm0.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 345:./bsp/core_cm0.h **** 
 346:./bsp/core_cm0.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 347:./bsp/core_cm0.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 348:./bsp/core_cm0.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 349:./bsp/core_cm0.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 350:./bsp/core_cm0.h **** 
 351:./bsp/core_cm0.h **** /*@}*/ /* end of group CMSIS_CM0_core_register */
 352:./bsp/core_cm0.h **** 
 353:./bsp/core_cm0.h **** 
 354:./bsp/core_cm0.h **** /*******************************************************************************
 355:./bsp/core_cm0.h ****  *                Hardware Abstraction Layer
 356:./bsp/core_cm0.h ****  ******************************************************************************/
 357:./bsp/core_cm0.h **** 
 358:./bsp/core_cm0.h **** 
 359:./bsp/core_cm0.h **** #if defined ( __CC_ARM   )
 360:./bsp/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 361:./bsp/core_cm0.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 362:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static __inline
 363:./bsp/core_cm0.h **** #elif defined ( __ICCARM__ )
 364:./bsp/core_cm0.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 365:./bsp/core_cm0.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 366:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static inline
 367:./bsp/core_cm0.h **** #elif defined   (  __GNUC__  )
 368:./bsp/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 369:./bsp/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 370:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static inline
 371:./bsp/core_cm0.h **** #elif defined   (  __TASKING__  )
 372:./bsp/core_cm0.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 373:./bsp/core_cm0.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 374:./bsp/core_cm0.h ****   #define __STATIC_INLINE  static inline
 375:./bsp/core_cm0.h **** #endif
 376:./bsp/core_cm0.h **** 
 377:./bsp/core_cm0.h **** 
 378:./bsp/core_cm0.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 379:./bsp/core_cm0.h **** 
 380:./bsp/core_cm0.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 381:./bsp/core_cm0.h **** /* ARM armcc specific functions */
 382:./bsp/core_cm0.h **** 
 383:./bsp/core_cm0.h **** #define __enable_fault_irq                __enable_fiq
 384:./bsp/core_cm0.h **** #define __disable_fault_irq               __disable_fiq
 385:./bsp/core_cm0.h **** 
 386:./bsp/core_cm0.h **** #define __NOP                             __nop
 387:./bsp/core_cm0.h **** #define __WFI                             __wfi
 388:./bsp/core_cm0.h **** #define __WFE                             __wfe
 389:./bsp/core_cm0.h **** #define __SEV                             __sev
 390:./bsp/core_cm0.h **** #define __ISB()                           __isb(0)
 391:./bsp/core_cm0.h **** #define __DSB()                           __dsb(0)
 392:./bsp/core_cm0.h **** #define __DMB()                           __dmb(0)
 393:./bsp/core_cm0.h **** #define __REV                             __rev
 394:./bsp/core_cm0.h **** 
 395:./bsp/core_cm0.h **** 
 396:./bsp/core_cm0.h **** /* intrinsic void __enable_irq();     */
 397:./bsp/core_cm0.h **** /* intrinsic void __disable_irq();    */
 398:./bsp/core_cm0.h **** 
 399:./bsp/core_cm0.h **** 
 400:./bsp/core_cm0.h **** /**
 401:./bsp/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 402:./bsp/core_cm0.h ****  *
 403:./bsp/core_cm0.h ****  * @return ProcessStackPointer
 404:./bsp/core_cm0.h ****  *
 405:./bsp/core_cm0.h ****  * Return the actual process stack pointer
 406:./bsp/core_cm0.h ****  */
 407:./bsp/core_cm0.h **** extern uint32_t __get_PSP(void);
 408:./bsp/core_cm0.h **** 
 409:./bsp/core_cm0.h **** /**
 410:./bsp/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 411:./bsp/core_cm0.h ****  *
 412:./bsp/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 413:./bsp/core_cm0.h ****  *
 414:./bsp/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 415:./bsp/core_cm0.h ****  * (process stack pointer) Cortex processor register
 416:./bsp/core_cm0.h ****  */
 417:./bsp/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 418:./bsp/core_cm0.h **** 
 419:./bsp/core_cm0.h **** /**
 420:./bsp/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 421:./bsp/core_cm0.h ****  *
 422:./bsp/core_cm0.h ****  * @return Main Stack Pointer
 423:./bsp/core_cm0.h ****  *
 424:./bsp/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 425:./bsp/core_cm0.h ****  * Cortex processor register
 426:./bsp/core_cm0.h ****  */
 427:./bsp/core_cm0.h **** extern uint32_t __get_MSP(void);
 428:./bsp/core_cm0.h **** 
 429:./bsp/core_cm0.h **** /**
 430:./bsp/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 431:./bsp/core_cm0.h ****  *
 432:./bsp/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 433:./bsp/core_cm0.h ****  *
 434:./bsp/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 435:./bsp/core_cm0.h ****  * (main stack pointer) Cortex processor register
 436:./bsp/core_cm0.h ****  */
 437:./bsp/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 438:./bsp/core_cm0.h **** 
 439:./bsp/core_cm0.h **** /**
 440:./bsp/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 441:./bsp/core_cm0.h ****  *
 442:./bsp/core_cm0.h ****  * @param   value  value to reverse
 443:./bsp/core_cm0.h ****  * @return         reversed value
 444:./bsp/core_cm0.h ****  *
 445:./bsp/core_cm0.h ****  * Reverse byte order in unsigned short value
 446:./bsp/core_cm0.h ****  */
 447:./bsp/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 448:./bsp/core_cm0.h **** 
 449:./bsp/core_cm0.h **** /**
 450:./bsp/core_cm0.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 451:./bsp/core_cm0.h ****  *
 452:./bsp/core_cm0.h ****  * @param   value  value to reverse
 453:./bsp/core_cm0.h ****  * @return         reversed value
 454:./bsp/core_cm0.h ****  *
 455:./bsp/core_cm0.h ****  * Reverse byte order in signed short value with sign extension to integer
 456:./bsp/core_cm0.h ****  */
 457:./bsp/core_cm0.h **** extern int32_t __REVSH(int16_t value);
 458:./bsp/core_cm0.h **** 
 459:./bsp/core_cm0.h **** 
 460:./bsp/core_cm0.h **** #if (__ARMCC_VERSION < 400000)
 461:./bsp/core_cm0.h **** 
 462:./bsp/core_cm0.h **** /**
 463:./bsp/core_cm0.h ****  * @brief  Return the Priority Mask value
 464:./bsp/core_cm0.h ****  *
 465:./bsp/core_cm0.h ****  * @return PriMask
 466:./bsp/core_cm0.h ****  *
 467:./bsp/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 468:./bsp/core_cm0.h ****  */
 469:./bsp/core_cm0.h **** extern uint32_t __get_PRIMASK(void);
 470:./bsp/core_cm0.h **** 
 471:./bsp/core_cm0.h **** /**
 472:./bsp/core_cm0.h ****  * @brief  Set the Priority Mask value
 473:./bsp/core_cm0.h ****  *
 474:./bsp/core_cm0.h ****  * @param   priMask  PriMask
 475:./bsp/core_cm0.h ****  *
 476:./bsp/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 477:./bsp/core_cm0.h ****  */
 478:./bsp/core_cm0.h **** extern void __set_PRIMASK(uint32_t priMask);
 479:./bsp/core_cm0.h **** 
 480:./bsp/core_cm0.h **** /**
 481:./bsp/core_cm0.h ****  * @brief  Return the Control Register value
 482:./bsp/core_cm0.h ****  * 
 483:./bsp/core_cm0.h ****  * @return Control value
 484:./bsp/core_cm0.h ****  *
 485:./bsp/core_cm0.h ****  * Return the content of the control register
 486:./bsp/core_cm0.h ****  */
 487:./bsp/core_cm0.h **** extern uint32_t __get_CONTROL(void);
 488:./bsp/core_cm0.h **** 
 489:./bsp/core_cm0.h **** /**
 490:./bsp/core_cm0.h ****  * @brief  Set the Control Register value
 491:./bsp/core_cm0.h ****  *
 492:./bsp/core_cm0.h ****  * @param  control  Control value
 493:./bsp/core_cm0.h ****  *
 494:./bsp/core_cm0.h ****  * Set the control register
 495:./bsp/core_cm0.h ****  */
 496:./bsp/core_cm0.h **** extern void __set_CONTROL(uint32_t control);
 497:./bsp/core_cm0.h **** 
 498:./bsp/core_cm0.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 499:./bsp/core_cm0.h **** 
 500:./bsp/core_cm0.h **** 
 501:./bsp/core_cm0.h **** /**
 502:./bsp/core_cm0.h ****  * @brief  Return the Priority Mask value
 503:./bsp/core_cm0.h ****  *
 504:./bsp/core_cm0.h ****  * @return PriMask
 505:./bsp/core_cm0.h ****  *
 506:./bsp/core_cm0.h ****  * Return state of the priority mask bit from the priority mask register
 507:./bsp/core_cm0.h ****  */
 508:./bsp/core_cm0.h **** static __INLINE uint32_t __get_PRIMASK(void)
 509:./bsp/core_cm0.h **** {
 510:./bsp/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 511:./bsp/core_cm0.h ****   return(__regPriMask);
 512:./bsp/core_cm0.h **** }
 513:./bsp/core_cm0.h **** 
 514:./bsp/core_cm0.h **** /**
 515:./bsp/core_cm0.h ****  * @brief  Set the Priority Mask value
 516:./bsp/core_cm0.h ****  *
 517:./bsp/core_cm0.h ****  * @param  priMask  PriMask
 518:./bsp/core_cm0.h ****  *
 519:./bsp/core_cm0.h ****  * Set the priority mask bit in the priority mask register
 520:./bsp/core_cm0.h ****  */
 521:./bsp/core_cm0.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 522:./bsp/core_cm0.h **** {
 523:./bsp/core_cm0.h ****   register uint32_t __regPriMask         __ASM("primask");
 524:./bsp/core_cm0.h ****   __regPriMask = (priMask);
 525:./bsp/core_cm0.h **** }
 526:./bsp/core_cm0.h **** 
 527:./bsp/core_cm0.h **** /**
 528:./bsp/core_cm0.h ****  * @brief  Return the Control Register value
 529:./bsp/core_cm0.h ****  * 
 530:./bsp/core_cm0.h ****  * @return Control value
 531:./bsp/core_cm0.h ****  *
 532:./bsp/core_cm0.h ****  * Return the content of the control register
 533:./bsp/core_cm0.h ****  */
 534:./bsp/core_cm0.h **** static __INLINE uint32_t __get_CONTROL(void)
 535:./bsp/core_cm0.h **** {
 536:./bsp/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 537:./bsp/core_cm0.h ****   return(__regControl);
 538:./bsp/core_cm0.h **** }
 539:./bsp/core_cm0.h **** 
 540:./bsp/core_cm0.h **** /**
 541:./bsp/core_cm0.h ****  * @brief  Set the Control Register value
 542:./bsp/core_cm0.h ****  *
 543:./bsp/core_cm0.h ****  * @param  control  Control value
 544:./bsp/core_cm0.h ****  *
 545:./bsp/core_cm0.h ****  * Set the control register
 546:./bsp/core_cm0.h ****  */
 547:./bsp/core_cm0.h **** static __INLINE void __set_CONTROL(uint32_t control)
 548:./bsp/core_cm0.h **** {
 549:./bsp/core_cm0.h ****   register uint32_t __regControl         __ASM("control");
 550:./bsp/core_cm0.h ****   __regControl = control;
 551:./bsp/core_cm0.h **** }
 552:./bsp/core_cm0.h **** 
 553:./bsp/core_cm0.h **** #endif /* __ARMCC_VERSION  */ 
 554:./bsp/core_cm0.h **** 
 555:./bsp/core_cm0.h **** 
 556:./bsp/core_cm0.h **** 
 557:./bsp/core_cm0.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 558:./bsp/core_cm0.h **** /* IAR iccarm specific functions */
 559:./bsp/core_cm0.h **** 
 560:./bsp/core_cm0.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
 561:./bsp/core_cm0.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
 562:./bsp/core_cm0.h **** 
 563:./bsp/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
 564:./bsp/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
 565:./bsp/core_cm0.h **** 
 566:./bsp/core_cm0.h **** #define __NOP                                     __no_operation            /*!< no operation intri
 567:./bsp/core_cm0.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
 568:./bsp/core_cm0.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
 569:./bsp/core_cm0.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
 570:./bsp/core_cm0.h **** 
 571:./bsp/core_cm0.h **** /* intrinsic void __ISB(void)                                     */
 572:./bsp/core_cm0.h **** /* intrinsic void __DSB(void)                                     */
 573:./bsp/core_cm0.h **** /* intrinsic void __DMB(void)                                     */
 574:./bsp/core_cm0.h **** /* intrinsic void __set_PRIMASK();                                */
 575:./bsp/core_cm0.h **** /* intrinsic void __get_PRIMASK();                                */
 576:./bsp/core_cm0.h **** 
 577:./bsp/core_cm0.h **** 
 578:./bsp/core_cm0.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
 579:./bsp/core_cm0.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
 580:./bsp/core_cm0.h **** 
 581:./bsp/core_cm0.h **** 
 582:./bsp/core_cm0.h **** /**
 583:./bsp/core_cm0.h ****  * @brief  Return the Process Stack Pointer
 584:./bsp/core_cm0.h ****  *
 585:./bsp/core_cm0.h ****  * @return ProcessStackPointer
 586:./bsp/core_cm0.h ****  *
 587:./bsp/core_cm0.h ****  * Return the actual process stack pointer
 588:./bsp/core_cm0.h ****  */
 589:./bsp/core_cm0.h **** extern uint32_t __get_PSP(void);
 590:./bsp/core_cm0.h **** 
 591:./bsp/core_cm0.h **** /**
 592:./bsp/core_cm0.h ****  * @brief  Set the Process Stack Pointer
 593:./bsp/core_cm0.h ****  *
 594:./bsp/core_cm0.h ****  * @param  topOfProcStack  Process Stack Pointer
 595:./bsp/core_cm0.h ****  *
 596:./bsp/core_cm0.h ****  * Assign the value ProcessStackPointer to the MSP 
 597:./bsp/core_cm0.h ****  * (process stack pointer) Cortex processor register
 598:./bsp/core_cm0.h ****  */
 599:./bsp/core_cm0.h **** extern void __set_PSP(uint32_t topOfProcStack);
 600:./bsp/core_cm0.h **** 
 601:./bsp/core_cm0.h **** /**
 602:./bsp/core_cm0.h ****  * @brief  Return the Main Stack Pointer
 603:./bsp/core_cm0.h ****  *
 604:./bsp/core_cm0.h ****  * @return Main Stack Pointer
 605:./bsp/core_cm0.h ****  *
 606:./bsp/core_cm0.h ****  * Return the current value of the MSP (main stack pointer)
 607:./bsp/core_cm0.h ****  * Cortex processor register
 608:./bsp/core_cm0.h ****  */
 609:./bsp/core_cm0.h **** extern uint32_t __get_MSP(void);
 610:./bsp/core_cm0.h **** 
 611:./bsp/core_cm0.h **** /**
 612:./bsp/core_cm0.h ****  * @brief  Set the Main Stack Pointer
 613:./bsp/core_cm0.h ****  *
 614:./bsp/core_cm0.h ****  * @param  topOfMainStack  Main Stack Pointer
 615:./bsp/core_cm0.h ****  *
 616:./bsp/core_cm0.h ****  * Assign the value mainStackPointer to the MSP 
 617:./bsp/core_cm0.h ****  * (main stack pointer) Cortex processor register
 618:./bsp/core_cm0.h ****  */
 619:./bsp/core_cm0.h **** extern void __set_MSP(uint32_t topOfMainStack);
 620:./bsp/core_cm0.h **** 
 621:./bsp/core_cm0.h **** /**
 622:./bsp/core_cm0.h ****  * @brief  Reverse byte order in unsigned short value
 623:./bsp/core_cm0.h ****  *
 624:./bsp/core_cm0.h ****  * @param  value  value to reverse
 625:./bsp/core_cm0.h ****  * @return        reversed value
 626:./bsp/core_cm0.h ****  *
 627:./bsp/core_cm0.h ****  * Reverse byte order in unsigned short value
 628:./bsp/core_cm0.h ****  */
 629:./bsp/core_cm0.h **** extern uint32_t __REV16(uint16_t value);
 630:./bsp/core_cm0.h **** 
 631:./bsp/core_cm0.h **** 
 632:./bsp/core_cm0.h **** 
 633:./bsp/core_cm0.h **** 
 634:./bsp/core_cm0.h **** 
 635:./bsp/core_cm0.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 636:./bsp/core_cm0.h **** /* GNU gcc specific functions */
 637:./bsp/core_cm0.h **** 
 638:./bsp/core_cm0.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 639:./bsp/core_cm0.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 640:./bsp/core_cm0.h **** 
 641:./bsp/core_cm0.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
 642:./bsp/core_cm0.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
 643:./bsp/core_cm0.h **** 
 644:./bsp/core_cm0.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
 645:./bsp/core_cm0.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
 604              		.loc 2 645 0
 605              		.syntax divided
 606              	@ 645 "./bsp/core_cm0.h" 1
 607 0000 30BF     		wfi
 608              	@ 0 "" 2
 609              		.thumb
 610              		.syntax unified
 611              	.LBE5:
 612              	.LBE4:
 232:./app/main.c  **** #endif 
 613              		.loc 1 232 0
 614              		@ sp needed
 615 0002 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE64:
 619              		.global	cmd_reset
 620              		.global	MemStart
 621              		.comm	DataCJ_TaskStk,384,4
 622              		.comm	Can_TaskStk,768,4
 623              		.comm	Dis_TaskStk,1024,4
 624              		.section	.rodata
 627              	help_reset:
 628 0000 72657365 		.ascii	"reset\000"
 628      7400
 631              	name_reset:
 632 0006 72657365 		.ascii	"reset\000"
 632      7400
 633              		.section	.shell,"aw",%progbits
 634              		.align	2
 637              	cmd_reset:
 638 0000 06000000 		.word	name_reset
 639 0004 00000000 		.word	reset_cmd
 640 0008 00000000 		.word	help_reset
 641              		.section	.rodata.str1.1,"aMS",%progbits,1
 642              	.LC1:
 643 0000 63616E20 		.ascii	"can %08x, %08x %08x\012\000"
 643      25303878 
 643      2C202530 
 643      38782025 
 643      3038780A 
 644              	.LC6:
 645 0015 44697300 		.ascii	"Dis\000"
 646              	.LC14:
 647 0019 43616E00 		.ascii	"Can\000"
 648              	.LC17:
 649 001d 2E2F6170 		.ascii	"./app/main.c\000"
 649      702F6D61 
 649      696E2E63 
 649      00
 650              	.LC21:
 651 002a 44617461 		.ascii	"DataCJ\000"
 651      434A00
 652              	.LC25:
 653 0031 0A25730A 		.ascii	"\012%s\012ZXVI 4.2\012cmd>\000"
 653      5A585649 
 653      20342E32 
 653      0A636D64 
 653      3E00
 654              		.section	.noinit,"aw",%progbits
 655              		.align	1
 656              		.set	.LANCHOR0,. + 0
 659              	MemStart:
 660 0000 0000     		.space	2
 661              		.text
 662              	.Letext0:
 663              		.file 3 "d:\\wingcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 664              		.file 4 "d:\\wingcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 665              		.file 5 "./bsp/mytype.h"
 666              		.file 6 "../mylib_t/os_cpu.h"
 667              		.file 7 "../mylib_t/MicroOS.h"
 668              		.file 8 "./app/../drive/nuc_can.h"
 669              		.file 9 "../mylib_t/OSstdio.h"
 670              		.file 10 "../mylib_t/data_def.h"
 671              		.file 11 "./data/user.h"
 672              		.file 12 "../mylib_t/pcommand.h"
 673              		.file 13 "./app/app_cfg.h"
 674              		.file 14 "./bsp/system_NUC131.h"
 675              		.file 15 "./data/protocol.h"
 676              		.file 16 "./drive/nuc_uart0.h"
 677              		.file 17 "./bsp/bsp.h"
 678              		.file 18 "./drive/hardware.h"
 679              		.file 19 "../mylib_t/printk.h"
 680              		.file 20 "./drive/nuc_wdt.h"
 681              		.file 21 "./data/data.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:20     .text.Can_Task:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:25     .text.Can_Task:00000000 Can_Task
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:116    .text.Can_Task:00000058 $d
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:122    .text.printk_put:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:126    .text.printk_put:00000000 printk_put
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:162    .text.reset_cmd:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:167    .text.reset_cmd:00000000 reset_cmd
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:194    .text.reset_cmd:00000010 $d
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:199    .text.startup.main:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:204    .text.startup.main:00000000 main
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:242    .text.startup.main:00000024 $d
                            *COM*:00000400 Dis_TaskStk
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:327    .text.Dis_Task:00000000 Dis_Task
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:251    .text.Init_Devices:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:256    .text.Init_Devices:00000000 Init_Devices
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:315    .text.Init_Devices:00000044 $d
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:322    .text.Dis_Task:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:568    .text.Dis_Task:0000012c $d
                            *COM*:00000300 Can_TaskStk
                            *COM*:00000180 DataCJ_TaskStk
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:589    .text.OS_TaskIdle_Hook:00000000 $t
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:594    .text.OS_TaskIdle_Hook:00000000 OS_TaskIdle_Hook
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:637    .shell:00000000 cmd_reset
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:659    .noinit:00000000 MemStart
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:627    .rodata:00000000 help_reset
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:631    .rodata:00000006 name_reset
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:634    .shell:00000000 $d
C:\Users\beyond\AppData\Local\Temp\ccXZlIT5.s:655    .noinit:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
CAN_GetErr
TK_Trans
CAN_WriteAll
CAN_rdMSG
dbg_print
CanCmdMsg
OSTimeDly
debug_en
Uart_SendByte
BSP_Reset
OSInit
OSTaskCreateExt
OSStart
__aeabi_uidiv
OS_CPU_SR_Save
BSP_Init
OS_CPU_SysTickInit
OS_CPU_SR_Restore
IO_Init
Uart_Init
printk_set
wdt_init
CAN_Init
SystemCoreClock
Pro_Init
UsrInit
Data_Init
__error
GetObjName
wdt_reset
Uart_GetChar_nb
shell
Data_PD
Data_Trans
data_cmd
UsrSetAddr
DataCJ_Task
pUsrCfg
SetAddress
